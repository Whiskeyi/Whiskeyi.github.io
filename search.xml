<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>preact</title>
      <link href="/preact.html"/>
      <url>/preact.html</url>
      
        <content type="html"><![CDATA[<h1 id="Preact"><a href="#Preact" class="headerlink" title="Preact"></a>Preact</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>Rreact：</strong>带来了很多全新的概念如：JSX、virtual-dom、组件化、合成事件</p><p><strong>P（Performance）react</strong>：React轻量级替代方案</p><p>学习了解Preact，能够从原理上进一步了解React</p><p><img src="https://cloud.zhuchj.com/image-20221130155005229.png" alt="image-20221130155005229" style="zoom:33%;" /></p><p>链接：<a href="https://preactjs.com/" target="_blank" rel="noopener">https://preactjs.com/</a></p><p>（Fast 3kB alternative to React with the same modern API）</p><p>案例：Taro v3.4开始支持PReact，与 React 接近 <strong>100k</strong> 的体积相比，它的体积只有 <strong>3k</strong> 左右。在小程序严格的体积要求下，使用 Preact 省下的大量空间则显得弥足珍贵。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="更靠近DOM（Closer-to-the-DOM）"><a href="#更靠近DOM（Closer-to-the-DOM）" class="headerlink" title="更靠近DOM（Closer to the DOM）"></a>更靠近DOM（Closer to the DOM）</h3><p>Preact在DOM之上提供了可能是最薄的虚拟DOM抽象，将真实DOM区分，注册真实的事件处理函数，能与其他库很好地一起工作。</p><h3 id="小体积-3KB（Small-Size）"><a href="#小体积-3KB（Small-Size）" class="headerlink" title="小体积 - 3KB（Small Size）"></a>小体积 - 3KB（Small Size）</h3><p>大多数UI框架相当大，占据应用程序js代码的大部分。Preact不同：它足够小，这使得你的业务代码是应用程序的最大部分。Preact的bundle在gzip下大概3kb，比react小很多。<br>这意味着下载、解析和执行的JavaScript更少 - 可以有效提升应用性能和体验</p><h3 id="高性能（Big-Performance）"><a href="#高性能（Big-Performance）" class="headerlink" title="高性能（Big Performance）"></a>高性能（Big Performance）</h3><p>Preact速度很快，不仅仅是因为它的大小。它是目前最快的虚拟DOM库之一。，也得益于一个简单且可预测的diff实现。<br>做到自动批量更新，并们与浏览器工程师密切合作，在性能方面将PReact调到极致。</p><h3 id="便携-amp-嵌入式（Portable-amp-Embeddable）"><a href="#便携-amp-嵌入式（Portable-amp-Embeddable）" class="headerlink" title="便携&amp;嵌入式（Portable &amp; Embeddable）"></a>便携&amp;嵌入式（Portable &amp; Embeddable）</h3><p>Preact体积很小，这意味着您可以将强大的虚拟DOM组件范例带到其他地方。<br>使用Preact构建应用程序的部分，而无需复杂的集成。将Preact嵌入到小部件中，应用与构建完整应用程序。</p><h3 id="易于开发和生产（Instantly-Productive）"><a href="#易于开发和生产（Instantly-Productive）" class="headerlink" title="易于开发和生产（Instantly Productive）"></a>易于开发和生产（Instantly Productive）</h3><p>不需要牺牲生产力的前提，preact包含了有一些额外而便捷的功能以使得开发更简单高效，如：</p><ol><li>props, state 和 context 可以被传递给 render()</li><li>可使用标准的 HTML 属性，如 class 和 for</li></ol><h3 id="生态能力-Ecosystem-Compatible"><a href="#生态能力-Ecosystem-Compatible" class="headerlink" title="生态能力(Ecosystem Compatible)"></a>生态能力(Ecosystem Compatible)</h3><p>可以无缝使用 React 生态系统中可用的数千个组件。增加一个简单的兼容层 preact-compat 到绑定库中，甚至可以在系统中使用非常复杂的 React 组件。</p><p>……</p><h2 id="与React区别"><a href="#与React区别" class="headerlink" title="与React区别"></a>与React区别</h2><h3 id="Preact-并未完全实现React的每个特性"><a href="#Preact-并未完全实现React的每个特性" class="headerlink" title="Preact 并未完全实现React的每个特性"></a>Preact 并未完全实现React的每个特性</h3><p>Preact 本身没有去重新实现一遍 React。它们有一些不同之处。大部份的不同都很细微，且可以完全通过 <a href="https://github.com/developit/preact-compat" target="_blank" rel="noopener">preact-compat</a> 去掉。</p><h3 id="版本迭代"><a href="#版本迭代" class="headerlink" title="版本迭代"></a>版本迭代</h3><p>当新特性被React团队公布后，Preact团队会考虑到项目目标如果非常合理，符合项目目标的React特性才会被添加到Preact</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p>如何在<code>JS</code>中来描述<code>DOM</code>结构?</p><p>可以通过浏览器的操作<code>DOM</code>的API来完成，或者封装成一个<strong>工厂函数(h)</strong>来进行接收一定的输入，输出就是相应的<code>DOM</code>，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">h(<span class="string">"a"</span>, &#123;</span><br><span class="line">  class: "click",</span><br><span class="line">  href: <span class="string">"#"</span>,</span><br><span class="line">  onclick: <span class="function"><span class="keyword">function</span> <span class="title">onclick</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'you are 1,000,000th visitor!'</span>);</span><br><span class="line">    e.preventDefault();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="string">"click here to win a prize"</span>);</span><br></pre></td></tr></table></figure><p>但是这样对于开发者来说太不友好了，如果React按照这样实现，应该也不会发展到现状。我们习惯的是通过一个类似HTML的结构来描述页面的DOM结构，于是便有了JSX</p><p><strong>JSX =&gt; 工厂函数（h） =&gt; 原生<code>DOM</code>的结构</strong></p><p>原来从<code>JSX</code>转化到函数调用这个阶段是由<code>React</code>团队提供的，后面因为<code>babel</code>做的更好，更强大，就逐渐演变成了<code>@babel/plugin-transform-react-jsx</code>这个核心插件</p><p><a href="https://babeljs.io/repl/#?browsers=&amp;build=&amp;builtIns=false&amp;corejs=3.21&amp;spec=false&amp;loose=true&amp;code_lz=PQKhAIAECsGcA9wAtwmAKHQHgGYHs9xgA-Abk1wPACMBDAJwF4AiOgL2fDwDsBTRgN4BGAL5EyFAK4AbYunDgs0gJbEA8nyzAVchUtUAVAO54tO7MBkSKtdAEgAxtNqxYLJ8ocBrTknq8cFgBiZnseD29BHEluBwAXZR4ACl4ASnABeQVwO1ppXno4pIByAE88SXAGXnAhABoABibGpriUADdlWGU4vHoAQmLUrIU7XgA6AAd_dt5uOIARANoZIuHs8BERdF1wCK9kApre8CNlbirwaeU2XgtaYiA&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=false&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=true&amp;presets=react%2Ces2015-loose&amp;prettier=false&amp;targets=&amp;version=7.20.6&amp;externalPlugins=&amp;assumptions=%7B%7D" target="_blank" rel="noopener">Babel转换</a></p><h3 id="Vritual-DOM"><a href="#Vritual-DOM" class="headerlink" title="Vritual DOM"></a>Vritual DOM</h3><p>工厂函数（h）的输出就是用来描述DOM结构的Virtual DOM（使用对象类型来描述树状结构）</p><p>快？合并DOM更新、跨平台</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"big"</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// virtual DOM</span></span><br><span class="line"><span class="keyword">let</span> vdom = &#123;</span><br><span class="line">  type: <span class="string">'p'</span>,         <span class="comment">// a &lt;p&gt; element</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    class: 'big',    // with class="big"</span><br><span class="line">    children: [</span><br><span class="line">      <span class="string">'Hello World!'</span> <span class="comment">// and the text "Hello World!"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><p><strong>React</strong>：实现了合成事件</p><p><strong>Preact</strong>：没有事件合成系统，它直接使用的是由浏览器原生提供的事件系统，体积更小。类似React，通过驼峰Prop定义</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clicked</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'clicked'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myButton = <span class="built_in">document</span>.getElementById(<span class="string">'my-button'</span>)</span><br><span class="line">myButton.addEventListener(<span class="string">'click'</span>, clicked)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clicked</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'clicked'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;button onClick=&#123;clicked&#125;&gt;</span><br></pre></td></tr></table></figure><h3 id="Diff、组件化、生命周期…"><a href="#Diff、组件化、生命周期…" class="headerlink" title="Diff、组件化、生命周期…"></a>Diff、组件化、生命周期…</h3><h3 id="Hooks（主要介绍）"><a href="#Hooks（主要介绍）" class="headerlink" title="Hooks（主要介绍）"></a>Hooks（主要介绍）</h3><p><code>hook</code>在<code>Preact</code>中是通过<code>preact/hook</code>内一个模块单独引入的。这个模块中有两个重要的模块内的全局变量：</p><p>1、<code>currentIndex</code>：用于记录当前函数组件正在使用的 hook 的顺序。</p><p>2、<code>currentComponent</code>。用于记录当前渲染对应的组件。</p><h3 id="options"><a href="#options" class="headerlink" title="options"></a>options</h3><p><code>Preact hook</code> 的实现是通过暴露在<code>Preact.options</code>中的几个钩子函数在<code>Preact</code>的相应初始/更新时候执行相应的<code>hook</code>逻辑。这几个钩子分别是<code>_render</code>=&gt;<code>diffed</code>=&gt;<code>_commit</code>=&gt;<code>umount</code></p><ol><li>_render：</li></ol><blockquote><p> 进行每次 render 的初始化操作。包括执行/清理上次未处理完的 effect、初始化 hook 下标为 0、取得当前 render 的组件实例。</p></blockquote><ol><li>diffed</li></ol><blockquote><p>vnode 的 diff 完成之后，将当前的<code>_pendingEffects</code>推进执行队列，让它在下一帧绘制前执行</p></blockquote><ol><li>_commit</li></ol><blockquote><p>初始或者更新 render 结束之后执行<code>_renderCallbacks</code>(在<code>preact</code>中指每次 render 后，同步执行的操作回调列表，例如<code>setState</code>的第二个参数 cb、或者一些<code>render</code>后的生命周期函数、或者<code>forceUpdate</code>的回调)</p></blockquote><ol><li>unmount</li></ol><blockquote><p>组件的卸载之后执行<code>effect</code>的清理操作</p></blockquote><h3 id="组件状态"><a href="#组件状态" class="headerlink" title="组件状态"></a>组件状态</h3><p>对于组件来说加入的 hook 只是在 preact 的组件基础上增加一个__hook 属性，因此函数组件是无状态的，hooks让它变成了有状态。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> ComponentHooks &#123;</span><br><span class="line"><span class="comment">/** The list of hooks a component uses */</span></span><br><span class="line">_list: HookState[];</span><br><span class="line"><span class="comment">/** List of Effects to be invoked after the next frame is rendered */</span></span><br><span class="line">_pendingEffects: EffectHookState[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Component <span class="keyword">extends</span> PreactComponent&lt;any, any&gt; &#123;</span><br><span class="line">__hooks?: ComponentHooks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getHookState</code>函数在每次执行<code>useXxx</code>的时候，首先执行这个函数获取 hook 的状态的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHookState</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (options._hook) options._hook(currentComponent);</span><br><span class="line">  <span class="keyword">const</span> hooks =</span><br><span class="line">    currentComponent.__hooks ||</span><br><span class="line">    (currentComponent.__hooks = &#123; <span class="attr">_list</span>: [], <span class="attr">_pendingEffects</span>: [] &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化的时候，创建一个空的hook</span></span><br><span class="line">  <span class="keyword">if</span> (index &gt;= hooks._list.length) &#123;</span><br><span class="line">    hooks._list.push(&#123;&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> hooks._list[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>currentIndex</code>在每一次的<code>render</code>过程中是从 0 开始的，每执行一次<code>useXxx</code>后加一。每个<code>hook</code>在多次<code>render</code>中对于记录前一次的执行状态是通过<code>currentComponent.__hooks</code>中的顺序决定。所以如果处于条件语句，如果某一次条件不成立，导致那个<code>useXxx</code>没有执行，这个后面的 hook 的顺序就会发生错乱。</p><p>第一次渲染后，<code>__hooks = [hook1,hook2,hook3]</code>。 第二次渲染，由于<code>const [state2, setState2] = useState();</code>被跳过，通过<code>currentIndex</code>取到的<code>const [state3, setState3] = useState();</code>其实是<code>hook2</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Component = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [state1, setState1] = useState();</span><br><span class="line">  <span class="comment">// 假设condition第一次渲染为true，第二次渲染为false</span></span><br><span class="line">  <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="keyword">const</span> [state2, setState2] = useState();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> [state3, setState3] = useState();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="PReact-Hooks源码"><a href="#PReact-Hooks源码" class="headerlink" title="PReact Hooks源码"></a>PReact Hooks源码</h3><p>将主要开发场景下的hooks分为三类</p><h4 id="MemoHookState"><a href="#MemoHookState" class="headerlink" title="MemoHookState"></a>MemoHookState</h4><p><code>useMemo</code> 、<code>useCallback</code>、<code>useRef</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useMemo</span>(<span class="params">factory, args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 当前hook状态</span></span><br><span class="line"><span class="keyword">const</span> state = getHookState(currentIndex++, <span class="number">7</span>);</span><br><span class="line">  <span class="comment">// 判断依赖项是否改变</span></span><br><span class="line"><span class="keyword">if</span> (argsChanged(state._args, args)) &#123;</span><br><span class="line">    <span class="comment">// 存储本次数据值</span></span><br><span class="line">state._pendingValue = factory();</span><br><span class="line">state._pendingArgs = args;</span><br><span class="line">state._factory = factory;</span><br><span class="line"><span class="keyword">return</span> state._pendingValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> state._value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useCallback</span>(<span class="params">callback, args</span>) </span>&#123;</span><br><span class="line">currentHook = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">return</span> useMemo(<span class="function"><span class="params">()</span> =&gt;</span> callback, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useRef</span>(<span class="params">initialValue</span>) </span>&#123;</span><br><span class="line">currentHook = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">return</span> useMemo(<span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">current</span>: initialValue &#125;), []);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为什么要有current？</span></span><br></pre></td></tr></table></figure><p><code>useCallback</code>可以看作<code>useMemo</code>的语法糖</p><p><img src="https://cloud.zhuchj.com/image-20221201170454732.png" alt="image-20221201170454732" style="zoom:50%;" /></p><h4 id="ReducerHookState"><a href="#ReducerHookState" class="headerlink" title="ReducerHookState"></a>ReducerHookState</h4><p> <code>useReducer</code> 、<code>useState</code> </p><p>useReducer和redux很像</p><p><code>useState</code>其实只是传特定<code>reducer</code>的<code>useReducer</code>一种实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useState</span>(<span class="params">initialState</span>) </span>&#123;</span><br><span class="line">currentHook = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> useReducer(invokeOrReturn, initialState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  function invokeOrReturn(arg, f) &#123;</span></span><br><span class="line"><span class="comment"> *return typeof f == 'function' ? f(arg) : f;</span></span><br><span class="line"><span class="comment"> *&#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useReducer</span>(<span class="params">reducer, initialState, init</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> hookState = getHookState(currentIndex++);</span><br><span class="line"><span class="keyword">if</span> (!hookState._component) &#123;</span><br><span class="line">hookState._component = currentComponent;</span><br><span class="line"></span><br><span class="line">hookState._value = [</span><br><span class="line">!init ? invokeOrReturn(<span class="literal">undefined</span>, initialState) : init(initialState),</span><br><span class="line">action =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> nextValue = reducer(hookState._value[<span class="number">0</span>], action);</span><br><span class="line"><span class="keyword">if</span> (hookState._value[<span class="number">0</span>] !== nextValue) &#123;</span><br><span class="line">hookState._value[<span class="number">0</span>] = nextValue;</span><br><span class="line">hookState._component.setState(&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="keyword">return</span> hookState._value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EffectHookState"><a href="#EffectHookState" class="headerlink" title="EffectHookState"></a>EffectHookState</h4><p><code>useLayoutEffect</code> 、<code>useEffect</code></p><p><code>useEffect</code> 的 callback 执行是在本次渲染结束之后，下次渲染之前执行</p><p><code>useLayoutEffect</code>是在本次会在浏览器 layout 之后，painting 之前执行(阻塞视图更新，避免闪烁问题)，是同步的</p><p><code>_pendingEffects</code>是本次重绘之后，下次重绘之前执行。<code>options.differed</code> 钩子中（即组件 diff 完成后），执行<code>afterPaint(afterPaintEffects.push(c))</code>将含有<code>_pendingEffects</code>的组件推进全局的<code>afterPaintEffects</code>队列</p><p><code>_renderCallbacks</code>是在<code>_commit</code>钩子中执行的，renderCallback 就是 render 后的回调，此时 DOM 已经更新完，浏览器还没有 paint 新一帧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useEffect</span>(<span class="params">callback, args</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> state = getHookState(currentIndex++, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (!options._skipEffects &amp;&amp; argsChanged(state._args, args)) &#123;</span><br><span class="line">state._value = callback;</span><br><span class="line">state._pendingArgs = args;</span><br><span class="line"></span><br><span class="line">currentComponent.__hooks._pendingEffects.push(state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useLayoutEffect</span>(<span class="params">callback, args</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> state = getHookState(currentIndex++, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (!options._skipEffects &amp;&amp; argsChanged(state._args, args)) &#123;</span><br><span class="line">state._value = callback;</span><br><span class="line">state._pendingArgs = args;</span><br><span class="line"></span><br><span class="line">currentComponent._renderCallbacks.push(state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>useContext</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">useContext</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 每个Preact组件的context属性都保存着当前全局context的Provider引用，不同的context都有一个唯一id。获取当前组件的Context Provider</span></span><br><span class="line"><span class="keyword">const</span> provider = currentComponent.context[context._id];</span><br><span class="line"><span class="keyword">const</span> state = getHookState(currentIndex++, <span class="number">9</span>);</span><br><span class="line">state._context = context;</span><br><span class="line"><span class="keyword">if</span> (!provider) <span class="keyword">return</span> context._defaultValue;</span><br><span class="line"><span class="keyword">if</span> (state._value == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 初始化时订阅当前组件Provider的value变化</span></span><br><span class="line">    <span class="comment">// 当Provider的value变化时，重新渲染当前组件</span></span><br><span class="line">state._value = <span class="literal">true</span>;</span><br><span class="line">provider.sub(currentComponent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> provider.props.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><a href="https://github.com/Whiskeyi/React-PReact" target="_blank" rel="noopener">https://github.com/Whiskeyi/React-PReact</a></p><h2 id="分析总结"><a href="#分析总结" class="headerlink" title="分析总结"></a>分析总结</h2><p>首先不可否认的是Preact是一个优秀的框架，我们可以考虑在开发中使用它，但是需要注意一下几个方面：</p><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>React的稳定性已得到多个项目以及数十亿用户的验证，故建议新启的项目，特别是活动页，移动端页面可以使用Preact,而原有的React项目，尤其是大型项目，在引入Preact的时候需要进行足够的验证，测试以保证项目的稳定性。</p><h3 id="react自身的不断优化"><a href="#react自身的不断优化" class="headerlink" title="react自身的不断优化"></a>react自身的不断优化</h3><p>随着版本的迭代，react自身也在性能，开发模式上做了很多优化，如：react重大更新版本react16在加载时间上相比react15减少了接近1/3，已经在慢慢接近Preact。</p><h3 id="弄清楚性能瓶颈到底是什么"><a href="#弄清楚性能瓶颈到底是什么" class="headerlink" title="弄清楚性能瓶颈到底是什么"></a>弄清楚性能瓶颈到底是什么</h3><p>应用的加载速度慢真的是由于React框架过大吗？如果不是，那就没有必要去改用Preact。因花更多的时间去解决更关键的问题，而不是花在各种使用替换方案和解决其兼容性上。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AST编译学习</title>
      <link href="/ast.html"/>
      <url>/ast.html</url>
      
        <content type="html"><![CDATA[<h2 id="技术学习：AST"><a href="#技术学习：AST" class="headerlink" title="技术学习：AST"></a>技术学习：AST</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前段时间在开发CMS更新模态框的需求，有做到将md文件解析“tokens”再将“tokens”转换为json的步骤，组内交流说业界有md转json的工具<br>想着自己原来只是简单了解过<code>AST</code>，而<code>AST</code>在我们前端开发中运用的还比较多，于是去系统学习一下（然后就有了这篇文章）</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>AST</code>是<code>Abstract Syntax Tree(抽象语法树)</code>的简称<br><strong>抽象：</strong>源代码语法结构的一种抽象<br><strong>语法树：</strong>树状形式表现（树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构）</p><p>可以说<code>AST</code>是前端工程化绕不过的一个名词，为什么呢？</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Most people don't really have to think about compilers in their day</span><br><span class="line">jobs. However, compilers are all around you, tons of the tools you use are based</span><br><span class="line">on concepts borrowed from compilers.</span><br></pre></td></tr></table></figure><p>涉及到<strong>工程化诸多环节的应用</strong>，比如：</p><ol><li>Typescript =&gt; Javascript (typescript)</li><li>SASS/LESS =&gt; CSS (sass/less)</li><li>ES6+ =&gt; ES5 (babel)</li><li>Javascript 代码进行格式化 (eslint/prettier)</li><li>识别 React 项目中的 JSX (不是js原生的写法)</li><li>Vue SFC（单文件组件single file component）</li><li>js uglify</li><li>Tree Shaking（通过 AST 将用不到的函数进行移除，从而减小打包体积）</li></ol><p><strong>Vue SFC</strong></p><p><img src="../img/ast/vuesfc.png" alt="vuesfc"></p><p><strong>js uglify</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 代码精简</span><br><span class="line"><span class="comment">// 对两个数求和</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">first, second</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> first + second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ----------去除空格注释换行----------</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">first,second</span>)</span>&#123;<span class="keyword">return</span> first+second&#125;</span><br><span class="line"><span class="comment">// ----------压缩变量名，函数名及属性名----------</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params">x,y</span>)</span>&#123;<span class="keyword">return</span> x+y&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 合并声明</span><br><span class="line"><span class="comment">// 压缩前</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩后</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 布尔简化</span><br><span class="line"><span class="comment">// 压缩前</span></span><br><span class="line">!b &amp;&amp; !c &amp;&amp; !d &amp;&amp; !e</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩后</span></span><br><span class="line">!(b||c||d||e)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> 预计算</span><br><span class="line"><span class="comment">// 压缩前</span></span><br><span class="line"><span class="keyword">const</span> ONE_YEAR = <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩后</span></span><br><span class="line"><span class="keyword">const</span> ONE_YAAR = <span class="number">31536000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩前</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello, world'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩后</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello, world'</span>)</span><br></pre></td></tr></table></figure><hr><p><strong>在语言转换的过程中，实质上就是对其 AST 的操作</strong></p><ol><li>Code -&gt; AST（Parse）解析</li><li>AST -&gt; AST（Transform）转换另外一种语言的AST<blockquote><p>如将ts转化为ts的ast，再将ts的ast转化为js的ast</p></blockquote></li><li>AST -&gt; Code（Generate）生成代码</li></ol><p>以下是一段代码和它转换的AST</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Code</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AST</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"type"</span>: <span class="string">"Program"</span>,</span><br><span class="line">  <span class="string">"start"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"end"</span>: <span class="number">11</span>,</span><br><span class="line">  <span class="string">"body"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">      <span class="string">"start"</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="string">"end"</span>: <span class="number">11</span>,</span><br><span class="line">      <span class="string">"declarations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">          <span class="string">"start"</span>: <span class="number">6</span>,</span><br><span class="line">          <span class="string">"end"</span>: <span class="number">11</span>,</span><br><span class="line">          <span class="string">"id"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">            <span class="string">"start"</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="string">"end"</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"a"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="string">"init"</span>: &#123;</span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"Literal"</span>,</span><br><span class="line">            <span class="string">"start"</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">"end"</span>: <span class="number">11</span>,</span><br><span class="line">            <span class="string">"value"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">"raw"</span>: <span class="string">"4"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"kind"</span>: <span class="string">"const"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"sourceType"</span>: <span class="string">"module"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同的语言拥有不同的解析器：<br>比如 <code>Javascript</code> （Babel）的解析器和 <code>CSS</code> 的解析器（postcss）就完全不同<br>对相同的语言，也存在诸多的解析器，也就会生成多种 AST：<br>如<code>babel</code>与 <code>espree</code></p><p><a href="https://astexplorer.net/" target="_blank" rel="noopener">AstExplorer</a></p><h3 id="AST生成"><a href="#AST生成" class="headerlink" title="AST生成"></a>AST生成</h3><p>AST的生成是个复杂度极高过程，AST 的生成这一步骤被称为<strong>解析（Parser）</strong></p><blockquote><p>可以理解为把一门编程语言转成另一门编程语言的过程，一般是指高级语言到低级语言</p></blockquote><p>解析步骤分为两个阶段:</p><ol><li><strong>词法分析</strong>（Lexical Analysis）</li><li><strong>语法分析</strong>（Syntactic Analysis）</li></ol><h4 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h4><p><strong>词法</strong>：词法组成语言的单词， 是语言中最小单元<br><strong>词法分析</strong>：将代码转化为 <code>Token</code> 流，维护一个关于 <code>Token</code> 的数组</p><blockquote><p>可以理解成代码中一系列独立的单词，var，for ，if，while等<br>词法分析的过程就是读取代码，识别每一个单词及其种类，将它们按照预定的规则合并成一个个的标识，也叫 token<br>同时，它会移除空白符，注释等，最终产出一个token数组。<br>即词法分析阶段把会字符串形式的代码转换为 <strong>令牌（tokens）</strong> 流</p></blockquote><p>类比于开发CMS更新模态框时将md文档内容拆出一块块小块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// code</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// token</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">"KEYWORD_CONST"</span>, <span class="attr">value</span>: <span class="string">"const"</span> &#125;, </span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">"VARIABLE"</span>, <span class="attr">value</span>: <span class="string">"a"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">"OPERATOR_EQUAL"</span>, <span class="attr">value</span>: <span class="string">"="</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">type</span>: <span class="string">"INTEGER"</span>, <span class="attr">value</span>: <span class="string">"10"</span> &#125;</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>应用</strong>：</p><ol><li>代码检查，如 <code>eslint</code> 。例如：判断是否以分号结尾，则判断是否含有分号的 <code>token</code>（AST相同）</li><li>语法高亮，如 <code>highlight.js / prism.js</code> 使代码高亮</li><li>模板语法，如 <code>ejs</code> 等模板，参考<a href="https://hexo.io/" target="_blank" rel="noopener">hexo</a>中使用到的<a href="https://ejs.bootcss.com/" target="_blank" rel="noopener">ejs</a></li></ol><hr><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p><strong>语法</strong>：描述逻辑的格式（源程序是按照一定的格式组织的描述逻辑的文本）<br><strong>语法分析</strong>：根据词法，将 <code>Token</code> 流转化为结构化的 <code>AST</code>（树形的数据结构），方便操作<br>类比于CMS更新模态框需求将一个个小块转化为<code>json</code></p><h3 id="源码学习"><a href="#源码学习" class="headerlink" title="源码学习"></a>源码学习</h3><p>❌ 看<code>babel</code>的源码了解编译器工作原理，很多人都会望而却步。</p><p>✅ <code>babel</code>的维护者之一 James Kyle 有一个最小编译器的开源项目 <code>the-super-tiny-compiler</code>，截止目前超过21.5k stars。项目去掉注释大约200行代码，代码虽少，但足以展现编译器的很多要点，通过学习这个项目，可以对编译原理有一个较系统的理解</p><h4 id="the-super-tiny-compiler"><a href="#the-super-tiny-compiler" class="headerlink" title="the-super-tiny-compiler"></a>the-super-tiny-compiler</h4><p>链接：<a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noopener">the-super-tiny-compiler</a></p><p>all written in js<br><code>Lisp</code>语言风格函数调用 =&gt; 转换成<code>C</code>语言风格（不包含所有语法）<br>比如假设我们有<code>add</code>和<code>subtract</code>两个函数，两种语言的风格如下：</p><div class="table-container"><table><thead><tr><th></th><th><strong>Lisp风格</strong></th><th><strong>C风格</strong></th></tr></thead><tbody><tr><td>2 + 2</td><td>(add 2 2)</td><td>add(2, 2)</td></tr><tr><td>4 - 2</td><td>(subtract 4 2)</td><td>subtract(4, 2)</td></tr><tr><td>2 + (4 - 2)</td><td>(add 2 (subtract 4 2))</td><td>add(2, subtract(4, 2))</td></tr></tbody></table></div><p><strong>回顾：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  1. input  =&gt; tokenizer   =&gt; tokens</span></span><br><span class="line"><span class="comment"> *  2. tokens =&gt; parser      =&gt; ast</span></span><br><span class="line"><span class="comment"> *  3. ast    =&gt; transformer =&gt; newAst</span></span><br><span class="line"><span class="comment"> *  4. newAst =&gt; generator   =&gt; output</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compiler</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拆分成tokens</span></span><br><span class="line">  <span class="keyword">let</span> tokens = tokenizer(input);</span><br><span class="line">  <span class="comment">// tokens解析成ast</span></span><br><span class="line">  <span class="keyword">let</span> ast = parser(tokens);</span><br><span class="line">  <span class="comment">// ast =&gt; ast</span></span><br><span class="line">  <span class="keyword">let</span> newAst = transformer(ast);</span><br><span class="line">  <span class="comment">// generate new ast</span></span><br><span class="line">  <span class="keyword">let</span> output = codeGenerator(newAst);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// output</span></span><br><span class="line">  <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line"> &#123; <span class="attr">type</span>: <span class="string">'paren'</span>,  <span class="attr">value</span>: <span class="string">'('</span> &#125;,</span><br><span class="line"> &#123; <span class="attr">type</span>: <span class="string">'name'</span>,   <span class="attr">value</span>: <span class="string">'add'</span> &#125;,</span><br><span class="line"> &#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'2'</span> &#125;,</span><br><span class="line"> &#123; <span class="attr">type</span>: <span class="string">'paren'</span>,  <span class="attr">value</span>: <span class="string">'('</span> &#125;,</span><br><span class="line"> &#123; <span class="attr">type</span>: <span class="string">'name'</span>,   <span class="attr">value</span>: <span class="string">'subtract'</span> &#125;,</span><br><span class="line"> &#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'4'</span> &#125;,</span><br><span class="line"> &#123; <span class="attr">type</span>: <span class="string">'number'</span>, <span class="attr">value</span>: <span class="string">'2'</span> &#125;,</span><br><span class="line"> &#123; <span class="attr">type</span>: <span class="string">'paren'</span>,  <span class="attr">value</span>: <span class="string">')'</span> &#125;,</span><br><span class="line"> &#123; <span class="attr">type</span>: <span class="string">'paren'</span>,  <span class="attr">value</span>: <span class="string">')'</span> &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="step1-input-gt-tokenizer-gt-tokens"><a href="#step1-input-gt-tokenizer-gt-tokens" class="headerlink" title="step1 input  =&gt; tokenizer  =&gt; tokens"></a>step1 input  =&gt; tokenizer  =&gt; tokens</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenizer</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tokens = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current &lt; input.length) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> char = input[current];</span><br><span class="line">   <span class="comment">// 括号处理</span></span><br><span class="line">    <span class="keyword">if</span> (char === <span class="string">'('</span>) &#123;</span><br><span class="line"></span><br><span class="line">      tokens.push(&#123;</span><br><span class="line">        type: <span class="string">'paren'</span>,</span><br><span class="line">        value: <span class="string">'('</span>,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      current++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 括号处理</span></span><br><span class="line">    <span class="keyword">if</span> (char === <span class="string">')'</span>) &#123;</span><br><span class="line">      tokens.push(&#123;</span><br><span class="line">        type: <span class="string">'paren'</span>,</span><br><span class="line">        value: <span class="string">')'</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      current++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 空白符号处理</span></span><br><span class="line">    <span class="keyword">let</span> WHITESPACE = <span class="regexp">/\s/</span>;</span><br><span class="line">    <span class="keyword">if</span> (WHITESPACE.test(char)) &#123;</span><br><span class="line">      current++;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 对于数字处理</span></span><br><span class="line">    <span class="keyword">let</span> NUMBERS = <span class="regexp">/[0-9]/</span>;</span><br><span class="line">    <span class="keyword">if</span> (NUMBERS.test(char)) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> value = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (NUMBERS.test(char)) &#123;</span><br><span class="line">        value += char;</span><br><span class="line">        char = input[++current];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      tokens.push(&#123; <span class="attr">type</span>: <span class="string">'number'</span>, value &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// (concat "foo" "bar")</span></span><br><span class="line">    <span class="keyword">if</span> (char === <span class="string">'"'</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> value = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">      char = input[++current];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (char !== <span class="string">'"'</span>) &#123;</span><br><span class="line">        value += char;</span><br><span class="line">        char = input[++current];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      char = input[++current];</span><br><span class="line"></span><br><span class="line">      tokens.push(&#123; <span class="attr">type</span>: <span class="string">'string'</span>, value &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 对于字母处理</span></span><br><span class="line">    <span class="keyword">let</span> LETTERS = <span class="regexp">/[a-z]/i</span>;</span><br><span class="line">    <span class="keyword">if</span> (LETTERS.test(char)) &#123;</span><br><span class="line">      <span class="keyword">let</span> value = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (LETTERS.test(char)) &#123;</span><br><span class="line">        value += char;</span><br><span class="line">        char = input[++current];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      tokens.push(&#123; <span class="attr">type</span>: <span class="string">'name'</span>, value &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// unrecognized</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'I dont know what this character is: '</span> + char);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tokens;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> type: <span class="string">'Program'</span>,</span><br><span class="line"> body: [&#123;</span><br><span class="line">   type: <span class="string">'CallExpression'</span>,</span><br><span class="line">   name: <span class="string">'add'</span>,</span><br><span class="line">   params: [&#123;</span><br><span class="line">     type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">     value: <span class="string">'2'</span>,</span><br><span class="line">   &#125;, &#123;</span><br><span class="line">     type: <span class="string">'CallExpression'</span>,</span><br><span class="line">     name: <span class="string">'subtract'</span>,</span><br><span class="line">     params: [&#123;</span><br><span class="line">       type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">       value: <span class="string">'4'</span>,</span><br><span class="line">     &#125;, &#123;</span><br><span class="line">       type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">       value: <span class="string">'2'</span>,</span><br><span class="line">     &#125;]</span><br><span class="line">   &#125;]</span><br><span class="line"> &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="step2-tokens-gt-parser-gt-ast"><a href="#step2-tokens-gt-parser-gt-ast" class="headerlink" title="step2  tokens =&gt; parser =&gt; ast"></a>step2  tokens =&gt; parser =&gt; ast</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parser</span>(<span class="params">tokens</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// use recursion, so we use walk instead of a while loop</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> token = tokens[current];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// number</span></span><br><span class="line">    <span class="keyword">if</span> (token.type === <span class="string">'number'</span>) &#123;</span><br><span class="line"></span><br><span class="line">      current++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">        value: token.value,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// string</span></span><br><span class="line">    <span class="keyword">if</span> (token.type === <span class="string">'string'</span>) &#123;</span><br><span class="line">      current++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'StringLiteral'</span>,</span><br><span class="line">        value: token.value,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// open</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      token.type === <span class="string">'paren'</span> &amp;&amp;</span><br><span class="line">      token.value === <span class="string">'('</span></span><br><span class="line">    ) &#123;</span><br><span class="line"></span><br><span class="line">      token = tokens[++current];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> node = &#123;</span><br><span class="line">        type: <span class="string">'CallExpression'</span>,</span><br><span class="line">        name: token.value,</span><br><span class="line">        params: [],</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      token = tokens[++current];</span><br><span class="line"></span><br><span class="line">      <span class="comment">//   [</span></span><br><span class="line">      <span class="comment">//     &#123; type: 'paren',  value: '('        &#125;,</span></span><br><span class="line">      <span class="comment">//     &#123; type: 'name',   value: 'add'      &#125;,</span></span><br><span class="line">      <span class="comment">//     &#123; type: 'number', value: '2'        &#125;,</span></span><br><span class="line">      <span class="comment">//     &#123; type: 'paren',  value: '('        &#125;,</span></span><br><span class="line">      <span class="comment">//     &#123; type: 'name',   value: 'subtract' &#125;,</span></span><br><span class="line">      <span class="comment">//     &#123; type: 'number', value: '4'        &#125;,</span></span><br><span class="line">      <span class="comment">//     &#123; type: 'number', value: '2'        &#125;,</span></span><br><span class="line">      <span class="comment">//     &#123; type: 'paren',  value: ')'        &#125;, &lt;&lt;&lt; Closing parenthesis</span></span><br><span class="line">      <span class="comment">//     &#123; type: 'paren',  value: ')'        &#125;, &lt;&lt;&lt; Closing parenthesis</span></span><br><span class="line">      <span class="comment">//   ]</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// !close</span></span><br><span class="line">      <span class="keyword">while</span> (</span><br><span class="line">        (token.type !== <span class="string">'paren'</span>) ||</span><br><span class="line">        (token.type === <span class="string">'paren'</span> &amp;&amp; token.value !== <span class="string">')'</span>)</span><br><span class="line">      ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// recursion</span></span><br><span class="line">        node.params.push(walk());</span><br><span class="line">        token = tokens[current];</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      current++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(token.type);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// init</span></span><br><span class="line">  <span class="keyword">let</span> ast = &#123;</span><br><span class="line">    type: <span class="string">'Program'</span>,</span><br><span class="line">    body: [],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (current &lt; tokens.length) &#123;</span><br><span class="line">    ast.body.push(walk());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="step3-ast-gt-transformer-gt-newAst"><a href="#step3-ast-gt-transformer-gt-newAst" class="headerlink" title="step3  ast =&gt; transformer =&gt; newAst"></a>step3  ast =&gt; transformer =&gt; newAst</h5><h6 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h6><p><strong>定义：</strong><br>你可以只修改 <code>Visitor</code> 本身完成新操作的定义，而不需要修改原本对象<br>类似于<code>polyfill</code>实现<br>在使用的时候以目标浏览器版本作为访问者，实现对应访问者的功能</p><p><strong>转换需要深度优先遍历AST：</strong></p><p>Program 类型 - 从 AST 的根节点开始<br>CallExpression (add) - 进入 Program 节点 body 属性的第一个子元素<br>NumberLiteral (2) - 进入 CallExpression (add) 节点 params 属性的第一个子元素<br>CallExpression (subtract) - 进入 CallExpression (add) 节点 params 属性的第二个子元素<br>NumberLiteral (4) - 进入 CallExpression (subtract) 节点 params 属性的第一个子元素<br>NumberLiteral (2) - 进入 CallExpression (subtract) 节点 params 属性的第二个子元素</p><p>可以使用访问者模式：</p><ol><li>创建一个类似下面的“访问者”对象，以提供访问各种数据类型的方法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> visitor = &#123;</span><br><span class="line">    NumberLiteral() &#123;&#125;,</span><br><span class="line">    CallExpression() &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>当遍历<code>AST</code>的时，一旦匹配到特定类型的节点，就调用访问者提供的方法。同时为了保证访问者能够拿到当前节点信息，我们需要将当前节点和父节点传入（有点类似<code>react fiber</code>结构中断续传的实现）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> visitor = &#123;</span><br><span class="line">    NumberLiteral(node, parent) &#123;&#125;,</span><br><span class="line">    CallExpression(node, parent) &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>存在进入叶子节点，退出（exit）分支的行为。即对树深度遍历时，每个节点会存在两种操作，一种是enter/exit</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- Program</span><br><span class="line"> - CallExpression</span><br><span class="line">   - NumberLiteral</span><br><span class="line">   - CallExpression</span><br><span class="line">    - NumberLiteral</span><br><span class="line">    - NumberLiteral</span><br><span class="line"></span><br><span class="line"><span class="comment">/** -------------------------- **/</span></span><br><span class="line"></span><br><span class="line">-&gt; Program (enter)</span><br><span class="line">  -&gt; CallExpression (enter)</span><br><span class="line">    -&gt; <span class="built_in">Number</span> Literal (enter)</span><br><span class="line">    &lt;- <span class="built_in">Number</span> Literal (exit)</span><br><span class="line">    -&gt; Call Expression (enter)</span><br><span class="line">       -&gt; <span class="built_in">Number</span> Literal (enter)</span><br><span class="line">       &lt;- <span class="built_in">Number</span> Literal (exit)</span><br><span class="line">       -&gt; <span class="built_in">Number</span> Literal (enter)</span><br><span class="line">       &lt;- <span class="built_in">Number</span> Literal (exit)</span><br><span class="line">    &lt;- CallExpression (exit)</span><br><span class="line">  &lt;- CallExpression (exit)</span><br><span class="line">&lt;- Program (exit)</span><br></pre></td></tr></table></figure><p>改造数据结构为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visitor = &#123;</span><br><span class="line">  NumberLiteral: &#123;</span><br><span class="line">    enter(node, parent) &#123;&#125;,</span><br><span class="line">    exit(node, parent) &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  CallExpression: &#123;</span><br><span class="line">    enter(node, parent) &#123;&#125;,</span><br><span class="line">    exit(node, parent) &#123;&#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverser</span>(<span class="params">ast, visitor</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 遍历数组节点</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">traverseArray</span>(<span class="params">array, parent</span>) </span>&#123;</span><br><span class="line">    array.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">      traverseNode(child, parent);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历节点，参数为当前节点及其父节点</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">traverseNode</span>(<span class="params">node, parent</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> methods = visitor[node.type];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (methods &amp;&amp; methods.enter) &#123;</span><br><span class="line">      methods.enter(node, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Next we are going to split things up by the current node type.</span></span><br><span class="line">    <span class="keyword">switch</span> (node.type) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'Program'</span>:</span><br><span class="line">        traverseArray(node.body, node);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'CallExpression'</span>:</span><br><span class="line">        traverseArray(node.params, node);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// no child nodes to visit, just break.</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'NumberLiteral'</span>:</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'StringLiteral'</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(node.type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (methods &amp;&amp; methods.exit) &#123;</span><br><span class="line">      methods.exit(node, parent);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  traverseNode(ast, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="transformer"><a href="#transformer" class="headerlink" title="transformer"></a>transformer</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> *   Original AST                     |   Transformed AST</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> *   &#123;                                |   &#123;</span></span><br><span class="line"><span class="comment"> *     type: 'Program',               |     type: 'Program',</span></span><br><span class="line"><span class="comment"> *     body: [&#123;                       |     body: [&#123;</span></span><br><span class="line"><span class="comment"> *       type: 'CallExpression',      |       type: 'ExpressionStatement',</span></span><br><span class="line"><span class="comment"> *       name: 'add',                 |       expression: &#123;</span></span><br><span class="line"><span class="comment"> *       params: [&#123;                   |         type: 'CallExpression',</span></span><br><span class="line"><span class="comment"> *         type: 'NumberLiteral',     |         callee: &#123;</span></span><br><span class="line"><span class="comment"> *         value: '2'                 |           type: 'Identifier',</span></span><br><span class="line"><span class="comment"> *       &#125;, &#123;                         |           name: 'add'</span></span><br><span class="line"><span class="comment"> *         type: 'CallExpression',    |         &#125;,</span></span><br><span class="line"><span class="comment"> *         name: 'subtract',          |         arguments: [&#123;</span></span><br><span class="line"><span class="comment"> *         params: [&#123;                 |           type: 'NumberLiteral',</span></span><br><span class="line"><span class="comment"> *           type: 'NumberLiteral',   |           value: '2'</span></span><br><span class="line"><span class="comment"> *           value: '4'               |         &#125;, &#123;</span></span><br><span class="line"><span class="comment"> *         &#125;, &#123;                       |           type: 'CallExpression',</span></span><br><span class="line"><span class="comment"> *           type: 'NumberLiteral',   |           callee: &#123;</span></span><br><span class="line"><span class="comment"> *           value: '2'               |             type: 'Identifier',</span></span><br><span class="line"><span class="comment"> *         &#125;]                         |             name: 'subtract'</span></span><br><span class="line"><span class="comment"> *       &#125;]                           |           &#125;,</span></span><br><span class="line"><span class="comment"> *     &#125;]                             |           arguments: [&#123;</span></span><br><span class="line"><span class="comment"> *   &#125;                                |             type: 'NumberLiteral',</span></span><br><span class="line"><span class="comment"> *                                    |             value: '4'</span></span><br><span class="line"><span class="comment"> * ---------------------------------- |           &#125;, &#123;</span></span><br><span class="line"><span class="comment"> *                                    |             type: 'NumberLiteral',</span></span><br><span class="line"><span class="comment"> *                                    |             value: '2'</span></span><br><span class="line"><span class="comment"> *                                    |           &#125;]</span></span><br><span class="line"><span class="comment"> *  (sorry the other one is longer.)  |         &#125;</span></span><br><span class="line"><span class="comment"> *                                    |       &#125;</span></span><br><span class="line"><span class="comment"> *                                    |     &#125;]</span></span><br><span class="line"><span class="comment"> *                                    |   &#125;</span></span><br><span class="line"><span class="comment"> * ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformer</span>(<span class="params">ast</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// init</span></span><br><span class="line">  <span class="keyword">let</span> newAst = &#123;</span><br><span class="line">    type: <span class="string">'Program'</span>,</span><br><span class="line">    body: [],</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// （引用类型）通过 _context 引用，更新新旧节点</span></span><br><span class="line">  ast._context = newAst.body;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ast and a visitor</span></span><br><span class="line">  traverser(ast, &#123;</span><br><span class="line">   <span class="comment">// NumberLiteral</span></span><br><span class="line">    NumberLiteral: &#123;</span><br><span class="line">      enter(node, parent) &#123;</span><br><span class="line">        parent._context.push(&#123;</span><br><span class="line">          type: <span class="string">'NumberLiteral'</span>,</span><br><span class="line">          value: node.value,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// StringLiteral</span></span><br><span class="line">    StringLiteral: &#123;</span><br><span class="line">      enter(node, parent) &#123;</span><br><span class="line">        parent._context.push(&#123;</span><br><span class="line">          type: <span class="string">'StringLiteral'</span>,</span><br><span class="line">          value: node.value,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数调用</span></span><br><span class="line">    CallExpression: &#123;</span><br><span class="line">      enter(node, parent) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// create a new node CallExpression with a nested Identifier</span></span><br><span class="line">        <span class="keyword">let</span> expression = &#123;</span><br><span class="line">          type: <span class="string">'CallExpression'</span>,</span><br><span class="line">          callee: &#123;</span><br><span class="line">            type: <span class="string">'Identifier'</span>,</span><br><span class="line">            name: node.name,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="built_in">arguments</span>: [],</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// _context 引用参数，供子节点使用</span></span><br><span class="line">        node._context = expression.arguments;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent.type !== <span class="string">'CallExpression'</span>) &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 顶层函数调用本质上是一个语句，写成特殊节点 ExpressionStatement？why</span></span><br><span class="line">          expression = &#123;</span><br><span class="line">            type: <span class="string">'ExpressionStatement'</span>,</span><br><span class="line">            expression: expression,</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        parent._context.push(expression);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newAst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="step4-newAst-gt-generator-gt-output"><a href="#step4-newAst-gt-generator-gt-output" class="headerlink" title="step4 newAst =&gt; generator   =&gt; output"></a>step4 newAst =&gt; generator   =&gt; output</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">codeGenerator</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (node.type) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Program'</span>:</span><br><span class="line">      <span class="keyword">return</span> node.body.map(codeGenerator) <span class="comment">// item =&gt; codeGenerator(item)</span></span><br><span class="line">        .join(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 顶层</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'ExpressionStatement'</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        codeGenerator(node.expression) +</span><br><span class="line">        <span class="string">';'</span> <span class="comment">// &lt;&lt; (...because we like to code the *correct* way)</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'CallExpression'</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        codeGenerator(node.callee) +</span><br><span class="line">        <span class="string">'('</span> +</span><br><span class="line">        node.arguments.map(codeGenerator)</span><br><span class="line">          .join(<span class="string">', '</span>) +</span><br><span class="line">        <span class="string">')'</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Identifier'</span>:</span><br><span class="line">      <span class="keyword">return</span> node.name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'NumberLiteral'</span>:</span><br><span class="line">      <span class="keyword">return</span> node.value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'StringLiteral'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'"'</span> + node.value + <span class="string">'"'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(node.type);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>end</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">2</span>, subtract(<span class="number">4</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h4 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h4><p>再来简单了解一下<code>babel</code>：</p><ol><li><code>@babel/parser</code></li><li><code>@babel/traverse和@babel/types</code></li><li><code>@babel/generate</code></li></ol><p>利用上面所学的知识，实现对var =&gt; let的转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">'@babel/parser'</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">'@babel/traverse'</span>);</span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">'@babel/generator'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> code = <span class="string">`const a = 1</span></span><br><span class="line"><span class="string">var b = 2</span></span><br><span class="line"><span class="string">let c = 3</span></span><br><span class="line"><span class="string">var d = 4`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> transToLet = <span class="function"><span class="params">code</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 解析成ast</span></span><br><span class="line">  <span class="keyword">const</span> ast = parser.parse(code);</span><br><span class="line">  <span class="comment">// 定义访问者</span></span><br><span class="line">  <span class="keyword">const</span> visitor = &#123;</span><br><span class="line">    <span class="comment">// 遍历声明表达式</span></span><br><span class="line">    VariableDeclaration(path) &#123;</span><br><span class="line">      <span class="comment">// 类型 = 变量声明</span></span><br><span class="line">      <span class="keyword">if</span> (path.node.type === <span class="string">'VariableDeclaration'</span>) &#123;</span><br><span class="line">        <span class="comment">// 替换</span></span><br><span class="line">        <span class="keyword">if</span> (path.node.kind === <span class="string">'var'</span>) &#123;</span><br><span class="line">          path.node.kind = <span class="string">'let'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 2. 遍历ast</span></span><br><span class="line">  traverse.default(ast, visitor);</span><br><span class="line">  <span class="comment">// 生成代码</span></span><br><span class="line">  <span class="keyword">const</span> newCode = generator.default(ast, &#123;&#125;, code).code;</span><br><span class="line">  <span class="keyword">return</span> newCode;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(transToLet(code))</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>了解<code>AST</code>概念及运用范围</li><li>对于大多数编译器的架构和原理有了系统的认知</li><li>对于编译器涉及到的访问者模式值得借鉴</li><li>利用<code>the-super-tiny-compiler</code>所学简单使用babel转换</li></ol>]]></content>
      
      
      <categories>
          
          <category> AST </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>greensock学习</title>
      <link href="/greensock.html"/>
      <url>/greensock.html</url>
      
        <content type="html"><![CDATA[<h2 id="技术调研：greensock"><a href="#技术调研：greensock" class="headerlink" title="技术调研：greensock"></a>技术调研：greensock</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前段时间，原神3.1版本更新，上线看了下有个领原石的活动页<br>进入页面挺好奇是怎么实现的，于是调研、分享一下～<br>…</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>（h5）<br> <a href="https://webstatic.mihoyo.com/ys/event/e20220928review_data/index.html?game_biz=hk4e_cn&amp;mhy_presentation_style=fullscreen&amp;mhy_auth_required=true&amp;mhy_landscape=true&amp;mhy_hide_status_bar=true&amp;utm_source=mkt&amp;utm_medium=weibo&amp;utm_campaign=arti" target="_blank" rel="noopener">绘忆星辰</a></p><p><img src="../img/greensock/effect.jpg" alt="effect"></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>简单了解一下抓包看了下，这个活动包括了很多图片素材和骨骼等参数，除了固定动画用了<code>spine</code>，其余效果在动画库中有一个叫<code>GSAP (GreenSock Animation Platform)</code>可以大致实现这样的效果</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>动画领域有一个比较知名的CSS库：<code>Animate.css</code>，它提供了60多种动画，满足一般网页的需求，比如淡入淡出、闪现等等一系列日常动画，不过虽然它能满足日常需求，但是一些复杂的场景就需要靠JS手动去操作，比如界面滚动到某个元素才开始播放动画，比如拖拽、比如滚动界面时，动态调整元素。</p><p>如果自己要手动实现这个需求，其实也不难，只需要监听页面滚动，当要滚动到该元素时，动态添加已经设置好动画的<code>CSS</code>类名，或者直接使用JS动态添加动画。<br>但自己实现会存在一些响应式界面造成元素高度不一致带来的兼容性问题，所以这个时候使用已经成熟的第三方动画框架就是最好的选择。</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><strong>GSAP</strong><br>链接：<a href="https://greensock.com/docs/" target="_blank" rel="noopener">https://greensock.com</a><br><code>GreenSock</code>动画平台（GSAP）是一个业界知名的工具套件，用于1100多万个网站，其中超过50%的获奖网站。在任何框架中，你都可以使用<code>GSAP</code>来动画化<code>JavaScript</code>可以触及的任何东西。无论你想动画<code>UI</code>，<code>SVG</code>，<code>Three.js</code>或<code>React</code>组件<br><a href="https://www.youtube.com/watch?v=RYuau0NeR1U" target="_blank" rel="noopener">yotube简介-74S</a><br>特点：</p><ol><li>小的<code>javascript</code>文件</li><li>消除了所有主要浏览器的兼容性问题</li><li>相较于<code>css</code>动画，更易于使用</li><li>自称地球上最强大动画库</li><li>高性能，适用范围广</li></ol><p>我觉得它可以称为一个动画框架，因为它的生态实在是太健全了，从简单动画，到拖拽，到滚动触发，应有尽有，几乎你能想象到的网页动画在它这里都可以实现，并且只需要使用它一个框架。</p><p>但是不知道为什么，这么厉害的东西，在国内很少有关于它的资料。我觉得它不火的原因可能是因为功能太多太复杂，往往一个界面不需要这么多动画，使用简单的Animate.css库就可以满足日常开发的需求。</p><h4 id="核心库介绍"><a href="#核心库介绍" class="headerlink" title="核心库介绍"></a>核心库介绍</h4><p>核心库包含创建快速、跨浏览器友好的动画所需的一切<br>核心库的简单入门介绍：<a href="https://greensock.com/get-started/" target="_blank" rel="noopener">https://greensock.com/get-started/</a></p><ol><li><p>方法 + 目标 + 变量组合<br><img src="../img/greensock/example.png" alt="example"></p></li><li><p>驼峰式类似<code>react</code>中的<code>style</code>（【-】 =&gt; 减号, 【20%】 =&gt; 模运算符）</p></li><li>更精简的写法</li><li>支持<code>css</code>属性，<code>svg</code>属性，对象（数组、颜色）</li></ol><h4 id="滚动动画介绍"><a href="#滚动动画介绍" class="headerlink" title="滚动动画介绍"></a>滚动动画介绍</h4><p>除了核心，还有各种插件。比如基于滚动的动画、可拖动的交互、变形等</p><p>这里主要介绍基于滚动的动画<br><a href="https://greensock.com/scrolltrigger" target="_blank" rel="noopener">https://greensock.com/scrolltrigger</a><br>VIDEO：<br><a href="https://www.youtube.com/watch?v=X7IBa7vZjmo&amp;t=452s" target="_blank" rel="noopener">https://www.youtube.com/watch?v=X7IBa7vZjmo&amp;t=452s</a></p><p><code>**scrolltrigger**</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./index.css"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>gasp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.3/gsap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.3/ScrollTrigger.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box a"</span>&gt;</span>a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box b"</span>&gt;</span>b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box c"</span>&gt;</span>c<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: bisque;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.b</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: cadetblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.c</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// step1</span></span><br><span class="line"><span class="comment">// gsap.to(".a", &#123;</span></span><br><span class="line"><span class="comment">//   x: 400,</span></span><br><span class="line"><span class="comment">//   rotation: 360,</span></span><br><span class="line"><span class="comment">//   duration: 3</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// step2: finished</span></span><br><span class="line"><span class="comment">// gsap.to(".c", &#123;</span></span><br><span class="line"><span class="comment">//   x: 400,</span></span><br><span class="line"><span class="comment">//   rotation: 360,</span></span><br><span class="line"><span class="comment">//   duration: 3</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// step3: so,register pulgin scrollTrigger to top level</span></span><br><span class="line"><span class="comment">// gsap.registerPlugin(ScrollTrigger)</span></span><br><span class="line"><span class="comment">// gsap.to(".c", &#123;</span></span><br><span class="line"><span class="comment">//   scrollTrigger: ".c",</span></span><br><span class="line"><span class="comment">//   x: 400,</span></span><br><span class="line"><span class="comment">//   rotation: 360,</span></span><br><span class="line"><span class="comment">//   duration: 3</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// but back it's still work down</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// step4: let me talk about toggle actions</span></span><br><span class="line"><span class="comment">// toggleAction key words can be (play, pause, resume, reverse, restart, reset, complete, none)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gsap.to(".b", &#123;</span></span><br><span class="line"><span class="comment">//   scrollTrigger: &#123;</span></span><br><span class="line"><span class="comment">//     trigger: ".b",</span></span><br><span class="line"><span class="comment">//     toggleActions: "play none none none"</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   x: 400,</span></span><br><span class="line"><span class="comment">//   rotation: 360,</span></span><br><span class="line"><span class="comment">//   duration: 3</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gsap.to(".b", &#123;</span></span><br><span class="line"><span class="comment">//   scrollTrigger: &#123;</span></span><br><span class="line"><span class="comment">//     trigger: ".b",</span></span><br><span class="line"><span class="comment">//     toggleActions: "restart none none none"</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   x: 400,</span></span><br><span class="line"><span class="comment">//   rotation: 360,</span></span><br><span class="line"><span class="comment">//   duration: 3</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gsap.to(".b", &#123;</span></span><br><span class="line"><span class="comment">//   scrollTrigger: &#123;</span></span><br><span class="line"><span class="comment">//     trigger: ".b",</span></span><br><span class="line"><span class="comment">//     toggleActions: "restart pause none none"</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   x: 400,</span></span><br><span class="line"><span class="comment">//   rotation: 360,</span></span><br><span class="line"><span class="comment">//   duration: 3</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gsap.to(".b", &#123;</span></span><br><span class="line"><span class="comment">//   scrollTrigger: &#123;</span></span><br><span class="line"><span class="comment">//     trigger: ".b",</span></span><br><span class="line"><span class="comment">//     toggleActions: "restart pause resume none"</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   x: 400,</span></span><br><span class="line"><span class="comment">//   rotation: 360,</span></span><br><span class="line"><span class="comment">//   duration: 3</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gsap.to(".b", &#123;</span></span><br><span class="line"><span class="comment">//   scrollTrigger: &#123;</span></span><br><span class="line"><span class="comment">//     trigger: ".b",</span></span><br><span class="line"><span class="comment">//     toggleActions: "restart pause reverse none"</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   x: 400,</span></span><br><span class="line"><span class="comment">//   rotation: 360,</span></span><br><span class="line"><span class="comment">//   duration: 3</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gsap.to(".b", &#123;</span></span><br><span class="line"><span class="comment">//   scrollTrigger: &#123;</span></span><br><span class="line"><span class="comment">//     trigger: ".b",</span></span><br><span class="line"><span class="comment">//     toggleActions: "restart pause reverse pause"</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   x: 400,</span></span><br><span class="line"><span class="comment">//   rotation: 360,</span></span><br><span class="line"><span class="comment">//   duration: 3</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start, markers</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gsap.to(".b", &#123;</span></span><br><span class="line"><span class="comment">//   scrollTrigger: &#123;</span></span><br><span class="line"><span class="comment">//     trigger: ".b",</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // trigger element, and screen position(ex: top, center, bottom, px)</span></span><br><span class="line"><span class="comment">//     start: "top center",</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // show: markers</span></span><br><span class="line"><span class="comment">//     markers: true,</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // end, just like start</span></span><br><span class="line"><span class="comment">//     // end: "bottom 100px",</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // relative to start</span></span><br><span class="line"><span class="comment">//     // end: "+=300",</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // support a function return</span></span><br><span class="line"><span class="comment">//     // end: () =&gt; "+=" + document.querySelector(".b").offsetWidth,</span></span><br><span class="line"><span class="comment">//     toggleActions: "restart pause reverse pause"</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   x: 400,</span></span><br><span class="line"><span class="comment">//   rotation: 360,</span></span><br><span class="line"><span class="comment">//   duration: 3</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// step5: scrub</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gsap.to(".b", &#123;</span></span><br><span class="line"><span class="comment">//   scrollTrigger: &#123;</span></span><br><span class="line"><span class="comment">//     trigger: ".b",</span></span><br><span class="line"><span class="comment">//     start: "top center",</span></span><br><span class="line"><span class="comment">//     end: "top 100px",</span></span><br><span class="line"><span class="comment">//     scrub: true,</span></span><br><span class="line"><span class="comment">//     markers: true</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   x: 400,</span></span><br><span class="line"><span class="comment">//   rotation: 360,</span></span><br><span class="line"><span class="comment">//   duration: 3</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><p>WebGL：<a href="https://codepen.io/motionharvest/pen/WNQYJyM" target="_blank" rel="noopener">https://codepen.io/motionharvest/pen/WNQYJyM</a><br>DragSVG：<a href="https://codepen.io/creativeocean/pen/zYrPrgd" target="_blank" rel="noopener">https://codepen.io/creativeocean/pen/zYrPrgd</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>通过对<code>greensock</code>的简单学习，让我对前端的动画领域有了更进步一的认识</li><li><code>greensock</code>是一款优秀的动画库，虽然只是浅浅人门，但也能够感受出它的”强大”</li><li>类似的效果展现给我的感觉比较好，不知道是否可以尝试结合我们的活动开发</li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计原则 &amp; 设计模式</title>
      <link href="/design-patterns.html"/>
      <url>/design-patterns.html</url>
      
        <content type="html"><![CDATA[<h2 id="设计原则-amp-设计模式"><a href="#设计原则-amp-设计模式" class="headerlink" title="设计原则 &amp; 设计模式"></a>设计原则 &amp; 设计模式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>从6月入职网易前端实习到现在，在开发过程中越来越感慨设计原则和设计模式的重要性。软件设计最大的难题就是应对需求的变化，但是纷繁复杂的需求变化又是不可预料的，我们要为不可预料的变化做好准备，因此就很有必要在编码的环节做足功夫，保障代码的易维护性、易拓展性、可读性、兼容性等。这可能也就是我们与前辈编写代码时的主要区别。在之前学校课程里也有教过这方面的知识但是自己觉得并没有很深入地去理解它们。于是便想写下这篇文章重新梳理一下设计原则和设计模式知识。</p><h3 id="六大设计原则"><a href="#六大设计原则" class="headerlink" title="六大设计原则"></a>六大设计原则</h3><p>在讲设计模式前首先对六大设计原则进行介绍</p><p>六大设计原则主要是指：</p><ul><li>单一职责原则（Single Responsibility Principle）</li><li>开闭原则（Open Closed Principle）</li><li>里氏替换原则（Liskov Substitution Principle）</li><li>迪米特法则（Law of Demeter），“最少知道法则”</li><li>接口隔离原则（Interface Segregation Principle）</li><li>依赖倒置原则（Dependence Inversion Principle）</li></ul><p>它们的英文首字母组合形成SOLID——稳定的（其中L字母重复取一个），代表这把这 6 个原则结合使用的好处是建立稳定、灵活、健壮的设计。</p><h4 id="单一指责原则"><a href="#单一指责原则" class="headerlink" title="单一指责原则"></a>单一指责原则</h4><p>一个类或接口只承担一个指责，有且仅有一个原因引起类的变更</p><p>优点：</p><ol><li><p>类的复杂性降低，实现什么职责都有清晰明确的定义</p></li><li><p>复杂性降低，可读性提高</p></li><li><p>可读性提高，可维护性提高</p></li><li><p>变更引起的风险降低。如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有很大帮助</p></li></ol><h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><p>对拓展开放，对修改关闭（应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化）</p><p>是最基本的一个原则，提高了复用性以及可维护性</p><h4 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h4><p>子类可以替换父类（只要父类能出现的地方，子类就可以出现，而且替换为子类也不会产生任何错误或异常）</p><p>在继承类时，务必重写（override）父类中所有的方法，尤其需要注意父类的protected方法（往往需要重写），子类尽量不要暴露自己的public方法供外界调用</p><p>四个层次规范：</p><ol><li><p>子类必须完全实现父类的方法</p></li><li><p>子类中可以增加自己的特有方法</p></li><li><p>子类可以重载父类方法，但不能覆盖，且入参可以放大</p></li><li><p>子类实现抽象方法时，返回值可以是父类返回值的子类</p></li></ol><h4 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h4><p>对象与对象直接应该尽可能少关联，减小类之间的耦合</p><p>核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类才能够易被复用</p><h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><p>类间的依赖关系应该建立在最小的接口上，不要对外暴露没有实际意义的接口（一个接口不能过于臃肿，使用多个专一功能的接口比一个总接口好）</p><h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><p>面向接口编程，依赖于抽象而不依赖于具体类</p><p>高层模块不应该依赖于低层模块，而应该依赖于抽象。抽象不应依赖于细节，细节应依赖于抽象。</p><ol><li><p>模块间的依赖通过抽象发生，实现类之间不直接发生依赖关系，其依赖关系通过接口或抽象类产生的</p></li><li><p>接口或抽象类不依赖于实现类</p></li><li><p>实现类依赖接口或抽象类</p></li></ol><p>减少类间的耦合性，提高系统的稳定性，降低并行开发引起的风险，提高代码的可读性和可维护性</p><h3 id="23-种设计模式"><a href="#23-种设计模式" class="headerlink" title="23 种设计模式"></a>23 种设计模式</h3><h4 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h4><p>设计模式是对软件设计中普遍存在（反复出现）的各种问题，所提出的解决方案</p><p>设计模式分为三大类：</p><p><strong>创建型模式：</strong></p><p>用来描述 “如何创建对象”，它的主要特点是 “将对象的创建和使用分离”</p><p>共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式</p><p><strong>结构型模式：</strong></p><p>用来描述如何将类或对象按照某种布局组成更大的结构</p><p>共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式</p><p><strong>行为型模式：</strong></p><p>用来识别对象之间的常用交流模式以及如何分配职责</p><p>共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式</p><h4 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h4><h5 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h5><h5 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h5><h5 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h5><h4 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h4><h5 id="适配器模式（类-对象）"><a href="#适配器模式（类-对象）" class="headerlink" title="适配器模式（类 / 对象）"></a>适配器模式（类 / 对象）</h5><h5 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h5><h5 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h5><h4 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h4><h5 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h5><h5 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h5><h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><h5 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h5><h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><blockquote><p>待完结</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统集成优化(Integration &amp; optimization)</title>
      <link href="/integration.html"/>
      <url>/integration.html</url>
      
        <content type="html"><![CDATA[<h2 id="系统集成优化"><a href="#系统集成优化" class="headerlink" title="系统集成优化"></a>系统集成优化</h2><h3 id="系统集成基础"><a href="#系统集成基础" class="headerlink" title="系统集成基础"></a>系统集成基础</h3><h4 id="系统集成基本含义"><a href="#系统集成基本含义" class="headerlink" title="系统集成基本含义"></a>系统集成基本含义</h4><p>系统集成(system integration)：通常是指将软件、硬件与通信技术组合起来为用户解决信息处理问题的业务，集成的各个分离部分原本就是一个个独立的系统，集成后的整体的各部分之间能彼此有机地和协调地工作，以发挥整体效益，达到整体优化的目的。</p><h4 id="系统集成主要方案"><a href="#系统集成主要方案" class="headerlink" title="系统集成主要方案"></a>系统集成主要方案</h4><ul><li><p>EAI：Enterprise Application Integration 企业应用集成，是中间件的一种，可完成企业内部基于各种不同平台、不同方案建立的异构应用集成互联，实现数据和信息在各个系统中同步和共享的一种方法和技术。</p><p><img src="img/integration/图片 1.png" alt="图片1"></p><ul><li><p>Hub/spoke （集线器架构）：Hub/Spoke 架构是星型拓扑结构，由处于系统中央的一个 Hub 和连接在 Hub 及应用系统的多个适配器(adapter)组成。适配器在 Hub 和应用系统之间，进行数据格式的转换与传输。适配器将应用系统的数据信息转化为 Hub 可以识别的格式并传递给 Hub, Hub 通过消息代理管理消息路由，并将这些来自应用系统的数据消息按其要求的路由规则传递给目标应用系统的适配器。</p><p><img src="img/integration/图片 2.png" alt="图片2"></p></li><li><p>BUS（总线架构）：可以看作是 Hub/Spoke 星型架构的一种变形。将星型中心点 Hub 的传输消息的功能提炼成一条消息传递总线，而将适配器、集成引擎绑在了应用系统所在的平台。应用程序使用适配器转换消息格式，并将消息发送到总线上。</p><p><img src="img/integration/图片 3.png" alt="图片3"></p></li></ul></li><li><p>SOA：在分布式架构下，当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，增加了一个调度中心对集群进行实时管理。它将应用程序的不同功能单元（称为服务）通过这些服务之间定义良好的接口和契约联系起来。</p><p><img src="img/integration/图片 4.png" alt="图片4"></p></li><li><p>微服务：微服务架构在某种程度上是面向服务的架构 SOA 继续发展的下一步，它更加强调服务的”彻底拆分”。</p><p><img src="img/integration/图片 5.png" alt="图片5"></p></li></ul><h3 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h3><h4 id="项目开发基本步骤"><a href="#项目开发基本步骤" class="headerlink" title="项目开发基本步骤"></a>项目开发基本步骤</h4><ul><li>创建项目：File-New-Project，选择 Spring Initializer</li><li>项目信息配置，选择需要的依赖[Web-Spring Web；SQL-Spring Data JPA,Mysql Driver]</li><li>启动类配置</li><li>配置类配置</li><li>Web 层配置开发</li><li>业务层配置开发</li><li>数据层配置开发</li><li>功能测试</li></ul><h4 id="项目特点与基本架构"><a href="#项目特点与基本架构" class="headerlink" title="项目特点与基本架构"></a>项目特点与基本架构</h4><h5 id="项目特点"><a href="#项目特点" class="headerlink" title="项目特点"></a>项目特点</h5><ol><li><p>独立运行的 Spring 项目：Spring Boot 可以以 jar 包的形式独立运行，Spring Boot 项目只需通过命令“ java–jar xx.jar” 即可运行。</p></li><li><p>内嵌 Servlet 容器：Spring Boot 使用嵌入式的 Servlet 容器（例如 Tomcat、Jetty 或者 Undertow 等），应用无需打成 WAR 包 。</p></li><li><p>提供 starter 简化 Maven 配置：Spring Boot 提供了一系列的 starter 项目对象模型（POMS）来简化 Maven 配置。</p></li><li><p>提供了大量的自动配置：Spring Boot 提供了大量的默认自动配置，来简化项目的开发，开发人员也通过配置文件修改默认配置。</p></li><li><p>约定大于配置，开箱即用，无代码生成和 xml 配置：Spring Boot 不需要任何 xml 配置即可实现 Spring 的所有配置。</p></li></ol><h5 id="基本架构"><a href="#基本架构" class="headerlink" title="基本架构"></a>基本架构</h5><ul><li><p>启动类（@SpringBootApplication）：普通 java 类，位于项目根包下，main 函数入口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootP1Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootP1Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件：application.properties/.yml</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/springbootp1</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">    <span class="attr">password</span>: <span class="string">123</span></span><br></pre></td></tr></table></figure></li><li><p>Web 层配置开发：</p><ol><li><p>新增 controller 包</p></li><li><p>在 controller 包中创建用户控制器类（普通 java 类）</p></li><li><p>类上添加@RestController 注解，表示所有方法的处理结果都 JSON 对象响应，独立前端的后端接口</p></li><li><p>@ReqestMapping 注解类和方法</p><ul><li><p>@GetMapping 注解：处理 GET 请求，相当于 method= RequestMethod.GET</p></li><li><p>@PostMapping 注解：处理 POST 请求，相当于 method= RequestMethod.POST</p></li></ul></li><li><p>@RequestBody：JSON 请求</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUser</span> <span class="params">(@PathVariable <span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">""</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserDto <span class="title">addUser</span> <span class="params">(@RequestBody UserDto user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"list"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;UserDto&gt; <span class="title">allUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>:</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务层开发：</p><ol><li><p>新增 service 和 dto 包，在 service 下新增 impl 子包</p></li><li><p>在 service 包中新建 service 接口</p></li><li><p>在 server.impl 包中添加 service 接口的相应实现类，并用@Service 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserServicel</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  UserDao userDao;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;UserDto&gt; <span class="title">getAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;TuserEntity&gt; tusers=userDao.findAll();</span><br><span class="line">    <span class="keyword">return</span> e2d (tusers);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUser</span> <span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> e2d (userDao.getOne(id));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 dto 包中添加需要的 dto 类</p></li></ol></li><li><p>数据层开发：</p><ol><li>新增 dao 和 entity 包</li><li>在 dao 包中新建 dao 接口，继承 JpaRepository</li><li>在 entity 包中添加需要的实体类映射</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span> (name = <span class="string">"tuser"</span>,schema = <span class="string">"test"</span>, catalog = <span class="string">""</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TuserEntity</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="meta">@Column</span></span><br><span class="line">  <span class="keyword">private</span> String mobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="与-Spring-关系"><a href="#与-Spring-关系" class="headerlink" title="与 Spring 关系"></a>与 Spring 关系</h4><ul><li><p>先有的 spring 框架，再有的 springboot 框架。因为基于 spring 的开发中，需要工程师写很多繁琐的配置文件，所以 spring 官方为了让开发者从配置文件中解放出来，在 spring 框架的基础上发明了 springboot 框架，springboot 体现了约定大于配置的理念，框架做了许多默认配置，同时集成了很多三方的框架，让开发者整合其他组件更加简单，我们可以说 Spring Boot 只是 Spring 本身的扩展，使开发，测试和部署更加方便。</p></li><li><p>Spring 框架为开发 Java 应用程序提供了全面的基础架构支持。它包含一些很好的功能，如依赖注入和开箱即用的模块，如： Spring JDBC 、Spring MVC 、Spring Security、 Spring AOP 、Spring ORM 、Spring Test，Spring Boot 基本上是 Spring 框架的扩展，它消除了设置 Spring 应用程序所需的 XML 配置，为更快，更高效的开发生态系统铺平了道路。</p></li></ul><h4 id="Swagger-的作用及配置要"><a href="#Swagger-的作用及配置要" class="headerlink" title="Swagger 的作用及配置要"></a>Swagger 的作用及配置要</h4><ul><li><p>作用：Swagger 是一个规范和完整的框架，用于生成、描述、测试和可视化 RESTful 风格的 Web 服务。</p><ul><li>接口的文档在线自动生成</li><li>功能测试</li><li>前后端开发人员联系的纽带</li></ul></li><li><p>配置过程</p><ul><li><p>pom 中添加依赖（swagger、swagger-ui）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建 config 包，其中新建 SwaggerConfig 类，类上注解@Configuration、@EnableSwagger2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Knife4jConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span>  Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">      .useDefaultResponseMessages(<span class="keyword">false</span>)</span><br><span class="line">      .apiInfo(apiInfo())</span><br><span class="line">      .select()</span><br><span class="line">      .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.example.springbootp1.controller"</span>))</span><br><span class="line">      .paths(PathSelectors.any())</span><br><span class="line">      .build();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">      .description(<span class="string">"接口测试文档"</span>)</span><br><span class="line">      .contact(<span class="keyword">new</span> Contact(<span class="string">"Whiskey"</span>, <span class="string">"https://zhuchj.com"</span>,<span class="string">"825906196@qq.com"</span>))</span><br><span class="line">      .version(<span class="string">"1.0.0"</span>)</span><br><span class="line">      .description(<span class="string">"测试API"</span>)</span><br><span class="line">      .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>swagger 注解</p><ul><li><p>@Api(tags=””)：在 controller 类上注解</p><ul><li>tags :说明该接口模块名称</li></ul></li><li><p>@ApiOperation(value=””, notes=””)：在 controller 类中的方法前注解</p><ul><li>value：接口方法名称</li><li>notes：接口方法说明</li></ul></li><li><p>@ApiParam(“”)：在方法参数前注解，说明该参数含义</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tags=<span class="string">"用户管理模块接口"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  UserServicel userService;</span><br><span class="line">  <span class="meta">@ApiOperation</span>(valve = <span class="string">"单个用户"</span>, notes=<span class="string">"根据ID获取用户信息"</span>)</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/(id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUser</span> <span class="params">(@ApiParam (<span class="string">"用户ID"</span>)</span> @PathVariable <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService-getUser(id);</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>@ApiModel：注解在 Dto 类上，说明 Dto 的用途</p><ul><li><p>@ApiModelProperty：注解在 Dto 类的字段上，说明该参数的含义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(<span class="string">"系统用户"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDto</span> </span>&#123;</span><br><span class="line">  <span class="meta">@ApiModelProperty</span>(<span class="string">"用户ID"</span>)</span><br><span class="line">  <span class="keyword">private</span> Integer id;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li></ul><h4 id="多模块-Maven-项目架构（父子模块操作）"><a href="#多模块-Maven-项目架构（父子模块操作）" class="headerlink" title="多模块 Maven 项目架构（父子模块操作）"></a>多模块 Maven 项目架构（父子模块操作）</h4><ul><li><p>概念：随着单体应用功能的增加和细化，复杂度迅速增加。使用 Maven 的多模块配置，可以帮助项目划分模块，鼓励重用，防止 POM 变得过于庞大，方便某个模块的构建，而不用每次都构建整个项目，并且使得针对某个模块的特殊控制更为方便。</p></li><li><p>步骤</p><ul><li><p>新建 parent 项目（Project），只保留 pom.xml，在 GAV 配置下添加<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></p></li><li><p>在 parent 项目添加 modules</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>common<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>user<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>course<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新增模块（子项目，模块 pom 改为父项目 parent 的 GAV）</p></li></ul></li></ul><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><h4 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h4><p><img src="img/integration/图片 6.png" alt="图片6"></p><ul><li><p><strong>服务治理</strong>：服务治理就是进行服务的自动化管理，其核心是服务的自动注册与发现。</p><ul><li>服务注册：服务实例将自身服务信息注册到注册中心。</li><li>服务发现：服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提供的服务。</li><li>服务剔除：服务注册中心将出问题的服务自动剔除到可用列表之外，使其不会被调用到。</li></ul></li><li><p><strong>服务调用</strong>：在微服务架构中，通常存在多个服务之间的远程调用的需求。</p><ul><li>REST(Representational State Transfer)：这是一种 HTTP 调用的格式，更标准，更通用，无论哪种语言都支持 http 协议。</li><li>RPC(Remote Promote Call)：一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC 框架的主要目标就是让远程服务调用更简单、透明。</li></ul></li></ul><div class="table-container"><table><thead><tr><th>比较项</th><th>RESTful</th><th>RPC</th></tr></thead><tbody><tr><td>通讯协议</td><td>HTTP</td><td>一般使用 TCP</td></tr><tr><td>性能</td><td>略低</td><td>较高</td></tr><tr><td>灵活度</td><td>高</td><td>低</td></tr><tr><td>应用</td><td>微服务架构</td><td>SOA 架构</td></tr></tbody></table></div><ul><li><p><strong>服务网关：</strong>随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现:</p><ul><li>客户端需要调用不同的 url 地址，增加难度。</li><li>在一定的场景下，存在跨域请求。</li><li>每个微服务都需要进行单独的身份认证等问题。</li></ul><p>API 网关将所有 API 调用统一接入到 API 网关层，由网关层统一接入和输出。一个网关的基本功能有:统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后， 各个 API 服务提供团队可以专注于自己的的业务逻辑处理，而 API 网关更专注于安全、流量、路由等问题。</p></li><li><p><strong>服务容错</strong>：一个请求经常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错的话，极有可能会造成一连串的服务不可用，这就是雪崩效应。服务容错有三个核心思想：</p><ul><li>不被上游请求压垮</li><li>不被外界环境影响</li><li>不被下游响应拖垮</li></ul></li><li><p><strong>链路追踪</strong>：一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录，性能监控即链路追踪。</p></li><li><p><strong>负载均衡</strong></p></li><li><p><strong>消费者</strong>：服务的主动调用方</p></li><li><p><strong>提供者</strong>：服务的被调用方</p></li></ul><h4 id="单体应用和微服务应用比较"><a href="#单体应用和微服务应用比较" class="headerlink" title="单体应用和微服务应用比较"></a>单体应用和微服务应用比较</h4><ul><li><p>单体应用</p><ul><li><p>优点</p><ol><li>项目架构简单，前期开发成本低，周期短。</li><li>开发效率高，模块之间可以本地调用。</li><li>容易部署，运维成本小，为一个完整的包。</li><li>单个应用容易测试。</li></ol></li><li><p>缺点</p><ol><li><p>代码臃肿，应用启动时间长。</p></li><li><p>回归测试周期长，修复一个小小 bug 可能都需要对所有关键业务进行回归测试。</p></li><li>应用容错性差，某个小小功能的程序错误可能导致整个系统宕机；</li><li>伸缩困难，单体应用扩展性能时只能整个应用进行扩展，造成计算资源浪费。</li><li>开发协作困难，一个大型应用系统，可能几十个甚至上百个开发人员，大家都在维护一套代码的话，代码 merge 复杂度急剧增加。</li></ol></li></ul></li><li><p>微服务应用</p><ul><li>优点<ol><li>服务拆分粒度更细，有利于资源重复利用，提高开发效率。</li><li>可以更加精准的制定每个服务的优化方案，按需伸缩。</li><li>适用于互联网时代，产品迭代周期更短。</li></ol></li><li>缺点<ol><li>开发的复杂性增加，因为一个业务流程需要多个微服务通过网络交互来完成。</li><li>微服务过多，服务治理成本高，不利于系统维护。</li></ol></li></ul></li></ul><h4 id="微服务技术框架"><a href="#微服务技术框架" class="headerlink" title="微服务技术框架"></a>微服务技术框架</h4><ul><li><p>Dubbo</p><ul><li>仅实现服务治理，可通过 Filter 完善</li><li>RPC 长链接，响应更快</li><li>依赖重，需要完善的版本管理，程序入侵少</li></ul></li><li><p>Spring Cloud</p><ul><li>覆盖微服务架构众多部件</li><li>HTTP RESTful API</li><li>JSON 交互，RESTful 提供跨平台基础</li></ul></li></ul><h3 id="Dubbo-amp-SpringCloud"><a href="#Dubbo-amp-SpringCloud" class="headerlink" title="Dubbo &amp; SpringCloud"></a>Dubbo &amp; SpringCloud</h3><h4 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h4><ul><li><strong>远程过程调用</strong>：从一个系统（客户主机）中某个程序调用另一个系统（服务器主机）上某个函数的一种方法。</li></ul><h4 id="Dubbo-架构理解"><a href="#Dubbo-架构理解" class="headerlink" title="Dubbo 架构理解"></a>Dubbo 架构理解</h4><p><img src="img/integration/图片 10.png" alt="图片10"></p><ul><li><strong>Provider</strong> ：服务提供者。</li><li><strong>Consumer</strong> ：服务消费者。</li><li><strong>Registry</strong> ：服务注册与发现的中心，提供目录服务。</li><li><strong>Monitor</strong> ：服务监控，统计服务的调用次数、调用时间等信息的日志服务，并可以对服务设置权限、降级处理等，称为服务管控中心。</li></ul><h4 id="Zookeeper-作用"><a href="#Zookeeper-作用" class="headerlink" title="Zookeeper 作用"></a>Zookeeper 作用</h4><ul><li>ZooKeeper 是一个开源的分布式协调服务，目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。是一个典型的分布式数据一致性的解决方案；分布式应用程序可以基于它实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master 选举、分布式锁和分布式队列等功能。</li></ul><h4 id="Dubbo-应用中关键注解及作用"><a href="#Dubbo-应用中关键注解及作用" class="headerlink" title="Dubbo 应用中关键注解及作用"></a>Dubbo 应用中关键注解及作用</h4><ul><li><p>服务提供者</p><ul><li><p>Service 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Service;</span><br><span class="line"><span class="meta">@Service</span>(version = <span class="string">"$&#123;hello.service.version&#125;"</span>,application=<span class="string">"$&#123;dubbo.application.id&#125;"</span>)</span><br></pre></td></tr></table></figure></li><li><p>启动类注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplicaiton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboHelloworldApplication</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>服务消费者</p><ul><li><p>Reference 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="meta">@Reference</span>(version = <span class="string">"$&#123;hello.service.version&#125;"</span>)</span><br></pre></td></tr></table></figure></li><li><p>启动类注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="meta">@SpringBootApplicaiton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboHelloworldRestApplication</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Dubbo-微服务的开发部署与测试"><a href="#Dubbo-微服务的开发部署与测试" class="headerlink" title="Dubbo 微服务的开发部署与测试"></a>Dubbo 微服务的开发部署与测试</h4><ul><li><p>下载、创建 zookeeper 镜像和容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull zookeeper:3.6.0</span><br><span class="line">docker run –d --name zookeeper –p 2181:2181 --net testnet zookeeper:3.6.0</span><br></pre></td></tr></table></figure></li><li><p>下载、创建 dubbo-admin 镜像和容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull apache&#x2F;dubbo-admin</span><br></pre></td></tr></table></figure></li><li><p>添加依赖</p><ul><li>接口项目</li><li>dubbo 依赖（apache）</li><li>dubbo-zookeeper 依赖</li></ul></li><li><p>dubbo 服务提供者配置（application.properties）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dubbo</span></span><br><span class="line"><span class="comment"># Base packages to scan Dubbo Components (e.g @Service , @Reference)</span></span><br><span class="line"><span class="meta">dubbo.scan.basePackages</span> = <span class="string">se.zust.edu.dubbohelloworld.service</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dubbo Config properties</span></span><br><span class="line"><span class="meta">hello.service.version</span>=<span class="string">1.0.0</span></span><br><span class="line"><span class="comment">## ApplicationConfig Bean</span></span><br><span class="line"><span class="meta">dubbo.application.id</span> = <span class="string">helloworld-provider</span></span><br><span class="line"><span class="meta">dubbo.</span> <span class="string">application.name = helloworld-provider</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ProtocolConfig Bean</span></span><br><span class="line"><span class="meta">dubbo.protocol.id</span> = <span class="string">dubbo</span></span><br><span class="line"><span class="meta">dubbo.protocol.name</span> = <span class="string">dubbo</span></span><br><span class="line"><span class="meta">dubbo.protocol.port</span> = <span class="string">11245</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## RegistryConfig Bean</span></span><br><span class="line"><span class="meta">dubbo.registry.id</span> = <span class="string">zk-helloworld-provider</span></span><br><span class="line"><span class="comment">#dubbo.registry.address = N/A</span></span><br><span class="line"><span class="comment"># zookeeper</span></span><br><span class="line"><span class="meta">dubbo.registry.protocol</span> = <span class="string">zookeeper</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span> = <span class="string">127.0.0.1:2181</span></span><br></pre></td></tr></table></figure></li><li><p>dubbo 服务消费者配置（application.properties）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">hello.service.version</span> = <span class="string">1.0.0</span></span><br><span class="line"><span class="comment"># application.name</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">hello-service-comsumer</span></span><br><span class="line"><span class="comment"># address</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span> = <span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure></li><li><p>多模块改造</p><p><img src="img/integration/图片 8.png" alt="图片8"></p></li></ul><h4 id="Springboot-与-SpringCloud-的关系"><a href="#Springboot-与-SpringCloud-的关系" class="headerlink" title="Springboot 与 SpringCloud 的关系"></a>Springboot 与 SpringCloud 的关系</h4><ul><li>Spring Cloud 是一个微服务框架的规范，注意，只是规范，他不是任何具体的框架。</li><li>没有必然的关系</li><li>最快的微服务开发方法是 springboot</li><li>Spring Cloud 通过 Spring Boot 风格的封装，屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、容易部署的分布式系统开发工具包。</li></ul><h4 id="SpringCloud-核心组件与功能"><a href="#SpringCloud-核心组件与功能" class="headerlink" title="SpringCloud 核心组件与功能"></a>SpringCloud 核心组件与功能</h4><h5 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h5><p>云端服务发现，一个基于 REST 的服务，用于定位服务，以实现云端中间层服务发现和故障转移。</p><h5 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h5><p>提供云端负载均衡，有多种负载均衡策略可供选择，可配合服务发现和断路器使用。</p><ul><li><p>在 RestTemplate 的生成方法上添加@LoadBalanced 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改服务调用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接使用微服务名字， 从nacos中获取服务地址</span></span><br><span class="line">String url = <span class="string">"service-product"</span>;</span><br><span class="line"><span class="comment">// 通过restTemplate调用商品微服务</span></span><br><span class="line">Product product = restTemplate.getForObject...</span><br></pre></td></tr></table></figure></li></ul><h5 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h5><p>熔断器，容错管理工具，旨在通过熔断机制控制服务和第三方库的节点,从而对延迟和故障提供更强大的容错能力。</p><h5 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h5><p>REST 客户端，目的是为了简化 WebService 客户端的开发</p><ul><li>默认集成了 Ribbon、Hystrix</li><li><p>加入 Fegin 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--fegin组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>主类加上注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="comment">//开启Fegin</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建一个 service， 并使用 Fegin 实现微服务调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"service-product"</span>)</span><br><span class="line"><span class="comment">//声明调用的提供者的name</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductService</span> </span>&#123;</span><br><span class="line"><span class="comment">//指定调用提供者的哪个方法</span></span><br><span class="line"><span class="comment">//@FeignClient+@GetMapping 就是一个完整的请求路径 http://service- product/product/&#123;pid&#125;</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/product/&#123;pid&#125;"</span>)</span><br><span class="line">    <span class="function">Product <span class="title">findByPid</span><span class="params">(@PathVariable(<span class="string">"pid"</span>)</span> Integer pid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 controller 代码，并重启微服务验证</p></li></ul><h5 id="Zuul"><a href="#Zuul" class="headerlink" title="Zuul"></a>Zuul</h5><p>为微服务集群提供代理、过滤、路由等功能</p><h5 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h5><p>分布式配置中心组件，让你可以把配置放到远程服务器，集中化管理集群配置，目前支持本地存储（内存）、也支持放在远程 Git、 svn。</p><h5 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a>gateway</h5><p>系统的统一入口，它封装了应用程序的内部结构，为客户端提供统一服</p><p>务，一些与业务本身功能无关的公共逻辑可以在这里实现，诸如认证、鉴权、监控、路由转发等等。</p><ul><li><p>添加依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建主类，添加配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">7000</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">api-gateway</span></span><br><span class="line">  <span class="attr">cloud</span>:<span class="string"></span></span><br><span class="line"><span class="attr">gateway</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">routes</span>: <span class="string"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span></span><br><span class="line">    <span class="meta">-</span> <span class="string">id: product_route # 当前路由的标识, 要求唯一</span></span><br><span class="line">      <span class="attr">uri</span>: <span class="string">http://localhost:8081 # 请求要转发到的地址</span></span><br><span class="line">      <span class="attr">order</span>: <span class="string">1 # 路由的优先级,数字越小级别越高</span></span><br><span class="line">      <span class="attr">predicates</span>: <span class="string"># 断言(就是路由转发要满足的条件)</span></span><br><span class="line">        <span class="meta">-</span> <span class="string">Path=/product-serv/** # 当请求路径满足Path指定的规则时,才进行路由转发</span></span><br><span class="line">      <span class="attr">filters</span>: <span class="string"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span></span><br><span class="line">        <span class="meta">-</span> <span class="string">StripPrefix=1 # 转发之前去掉1层路径</span></span><br></pre></td></tr></table></figure></li><li><p>启动项目通过网关访问服务</p></li></ul><h4 id="SpringCloud-应用中关键注解与作用"><a href="#SpringCloud-应用中关键注解与作用" class="headerlink" title="SpringCloud 应用中关键注解与作用"></a>SpringCloud 应用中关键注解与作用</h4><h5 id="nacos（eureka-config）"><a href="#nacos（eureka-config）" class="headerlink" title="nacos（eureka + config）:"></a>nacos（eureka + config）:</h5><ol><li>添加依赖<code>&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</code></li><li>主类上添加<code>@EnableDiscoveryClient</code>注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApplication</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在 application.yml 中添加 nacos 服务的地址</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">cloud</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">nacos</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">discovery</span>:<span class="string"></span></span><br><span class="line">        <span class="meta">server-addr</span>: <span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure><ol><li>修改微服务，实现服务调用，启动 nacos</li></ol><h4 id="SpringCloud-开发步骤"><a href="#SpringCloud-开发步骤" class="headerlink" title="SpringCloud 开发步骤"></a>SpringCloud 开发步骤</h4><ul><li><p>多模块项目结构准备</p><ul><li><p>新建 POM 类型的父项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;pom&lt;&#x2F;packaging&gt;</span><br></pre></td></tr></table></figure></li><li><p>在父项目中添加如下模块项目</p><ul><li>服务注册中心 Eureka 服务器项目——添加 EurekaServer 依赖</li><li>服务提供者项目（Eureka 客户端）——添加 Eureka Discovery 和 web 依赖</li><li>服务消费者项目（Eureka 客户端）——添加 Eureka Discovery 和 web 依赖</li></ul></li></ul></li><li><p>Eureka 服务器开发</p><ul><li><p>启动类前注解@EnableEurekaServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudDemoServerApplication</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建配置文件 application.yml</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">service-url</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://localhost:8761/eureka</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">eureka</span></span><br><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">8761</span></span><br></pre></td></tr></table></figure></li><li><p>运行 Eureka 服务器，测试访问</p></li></ul></li><li><p>微服务（服务端）开发</p><ul><li><p>在父项目中添加模块项目</p></li><li><p>添加 Eureka Discovery Client、Springweb、Lombok 依赖</p></li><li><p>启动类前注解@EnableDiscoveryClient（@EnableEurekaClient）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudDemoClient1Application</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建配置文件 application.yml</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">service-url</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://localhost:8761/eureka</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">springcloud-service1 # 服务提供方名称</span></span><br><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">2222 #服务端口</span></span><br></pre></td></tr></table></figure></li><li><p>业务功能开发：与 springboot 开发一致</p></li></ul></li><li><p>微服务（客户端）消费者开发</p><ul><li><p>在父项目中添加模块项目</p></li><li><p>添加 Eureka Discovery Client、OpenFeign、Springweb、Lombok 依赖</p></li><li><p>启动类前注解@EnableDiscoveryClient（@EnableEurekaClient）</p><ul><li>客户端访问配置 RestTemplate 调用 / Feign 客户端（二选一即可，也可以同时存在）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="comment">// 两种方式访问微服务</span></span><br><span class="line"><span class="comment">// 1、通过Feign客户端访问</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringcloudDemoClient3Application</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 2、通过RestTemplate访问</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="meta">@LoadBalanced</span></span><br><span class="line">  <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">client</span>:<span class="string"></span></span><br><span class="line">    <span class="meta">service-url</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">defaultZone</span>: <span class="string">http://localhost:8761/eureka</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">springcloud-client1</span></span><br><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">5555 #消费者端口</span></span><br></pre></td></tr></table></figure></li><li><p>业务功能开发 1：FeignClient 方式调用微服务</p><ul><li><p>新建 dto 包，添加 dto 类</p></li><li><p>新建 service 包，添加功能接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(<span class="string">"springcloud-service1"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FeignUserService</span> </span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id&#125;"</span>, method = RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span></span>;</span><br><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>, method = RequestMethod.POST)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserDto <span class="title">addUSer</span><span class="params">(@RequestParam <span class="keyword">int</span> id, @RequestParam <span class="keyword">int</span> name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建 controller 包，添加 controller 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAccessController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  FeignUserService userService;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>业务功能开发 2：RestTemplate 方式调用微服务</p><ul><li><p>在 controller 中通过@Autowired 注入 RestTemplate（启动类中通过@Bean 加入容器了）</p></li><li><p>通过 restTemplate.getForObject 方法调用服务端接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAccessController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  FeignUserService userService;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  RestTemplate restTemplate;</span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUser</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.getUser(id);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/template/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> UserDto <span class="title">getUserTemplate</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过服务名字访问api</span></span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://springcloud-service1/user/"</span> + id, UserDto<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  &#125;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>运行启动类，测试新接口</p></li></ul></li></ul></li></ul><h3 id="容器与-Docker"><a href="#容器与-Docker" class="headerlink" title="容器与 Docker"></a>容器与 Docker</h3><h4 id="计算虚拟化发展过程（虚拟机对比）"><a href="#计算虚拟化发展过程（虚拟机对比）" class="headerlink" title="计算虚拟化发展过程（虚拟机对比）"></a>计算虚拟化发展过程（虚拟机对比）</h4><ul><li>远古时代<ul><li>物理机的操作系统只有一个</li></ul></li><li>虚拟机时代<ul><li>同一硬件设施运行配置不一样的平台（软件、系统）</li></ul></li><li><p>容器时代</p><ul><li>共用操作系统资源，消耗更少资源</li></ul></li><li><p>相同点：</p><ol><li>虚拟机和容器都是宿主机上面的一个进程，也就是一个应用程序。</li><li>容器和虚拟机都有着资源隔离、安全隔离和系统资源分配的功能。</li></ol></li><li><p>不同点：</p></li></ul><div class="table-container"><table><thead><tr><th>Feature</th><th>虚拟机</th><th>容器</th></tr></thead><tbody><tr><td>隔离</td><td>提供与主机操作系统和其他 VM 的完全隔离，提供强安全边界</td><td>提供与主机和其他容器的轻度隔离，不提供与 VM 一样强的安全边界</td></tr><tr><td>大小</td><td>大（GB）</td><td>小（MB）</td></tr><tr><td>启动速度</td><td>慢（分钟）</td><td>快（秒：省去启动整个虚拟客户机的开销）</td></tr><tr><td>操作系统</td><td>运行包含内核的完整操作系统，需要更多的系统资源（CPU、内存和存储）</td><td>运行操作系统的用户模式部分，可以对其进行定制，使之只包含应用所需的服务，减少所使用的系统资源</td></tr><tr><td>系统支持量</td><td>运行几十个虚拟机</td><td>可以支持上千个容器</td></tr><tr><td>虚拟化</td><td>硬件平台级的虚拟化技术</td><td>软件运行环境的虚拟化技术</td></tr><tr><td>交付/部署</td><td>受操作系统、环境变量限制</td><td>开发、测试、生产环境一致</td></tr><tr><td>迁移/扩展</td><td>受操作系统、硬件资源限制</td><td>容易</td></tr><tr><td>系统性能</td><td>性能损耗较大</td><td>性能损耗低</td></tr><tr><td>硬件资源利用率</td><td>较低</td><td>较高</td></tr></tbody></table></div><ul><li><p>虚拟机时代：虚拟机的出现使得用户在一台物理机上能够独立运行多个相互隔离的系统，通过对资源的抽象化使得主机资源能够被有效复用。然而，虚拟机同样也会带来一些问题：大量独立系统的运行会占用许多额外开销，消耗宿主机器资源，资源竞争时可能会严重影响系统响应；此外，每运行新的虚拟机都需要重新配置一遍环境，和在物理机上的情况基本无异，重复的环境配置操作则会消耗开发和运维人员的工作时间。此时需求便关注到如何减少虚拟化时的资源损耗，同时还能保证隔离性，以及使应用的上线周期更短，这便引导了容器技术的发展。</p></li><li><p>容器时代：容器以其依托于系统实现轻量内核级别虚拟化为特色，各容器之间完全使用沙箱机制，相互之间不会有任何接口，已成为微服务时代的重要基础性软件工具。</p></li><li><p>Linux 实现</p><ul><li>资源隔离：Linux 通过 Namespace 实现, 就能在 OS 层面上同时运行多个相互独立的子系统</li><li>操作系统和基础镜像</li><li>分层文件系统</li></ul></li></ul><h4 id="容器技术的基本概念"><a href="#容器技术的基本概念" class="headerlink" title="容器技术的基本概念"></a>容器技术的基本概念</h4><p>公用操作系统资源，消耗更少的资源，完成同样的工作对应用程序及其关联性进行隔离构建起一套能随处运行的自容纳单元。</p><ul><li>Dockerfile：是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。每一条指令生成一层镜像文件。通过 docker build 执行 dockerfile 中的指令生成镜像</li><li>Docker 数据卷：容器与宿主机的文件系统完全隔离，容器删除后应用和数据都会清除，而应用可以重新部署，数据无法自动重建。通过数据卷，做到删除/重建应用容器的时候，保持数据</li><li>Docker 网络： Docker 引擎在宿主机虚拟一个 Docker 容器网桥(docker0)，作为容器网络的网关，外部网络无法寻址到（包括宿主机）</li></ul><h4 id="Docker-镜像与容器"><a href="#Docker-镜像与容器" class="headerlink" title="Docker 镜像与容器"></a>Docker 镜像与容器</h4><ul><li>镜像：Docker 镜像是一个特殊的文件系统（UnionFS，一层一层的系统文件），提供容器运行时所需的程序、库、资源、配置等文件，另外还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像是一个静态的概念，不包含任何动态数据，其内容在构建之后也不会被改变。</li><li>容器：通过 Docker 引擎运行 Docker 镜像创建该镜像的容器。容器是镜像的实例，对应系统中的一个实际运行的进程。相对于镜像来说容器是动态的，容器在启动的时候创建了一层可写层次作为最上层</li></ul><h4 id="Docker-常用命令（mysql、日志、端口映射）"><a href="#Docker-常用命令（mysql、日志、端口映射）" class="headerlink" title="Docker 常用命令（mysql、日志、端口映射）"></a>Docker 常用命令（mysql、日志、端口映射）</h4><p><img src="img/integration/图片 7.png" alt="图片7"></p><h5 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a>容器使用</h5><ul><li>docker pull ubuntu：获取镜像。</li><li>docker run -itd —name ubuntu-test ubuntu /bin/bash：启动容器（-i: 交互式操作、-t: 终端、-d：后台运行、退出终端 exit、-P:将容器内部使用的网络端口随机映射到我们使用的主机上）。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD&#x3D;123456 -d mysql:5.7</span><br><span class="line">docker run  --name nginx-test -p 8080:80 -d nginx</span><br><span class="line">docker run --name tomcat -p 8081:8080 -d tomcat</span><br></pre></td></tr></table></figure><ul><li>docker stop：停止容器运行</li><li>docker ps -a：查看所有容器。</li><li>docker start id：启动对应 id 容器。</li><li>docker restart id：重启对应 id 容器。</li><li>docker attach/docker exec：进入容器，在容器中执行命令。推荐使用 docker exec 命令，因为此命令会退出容器终端，但不会导致容器的停止。</li><li>docker rm -f id：删除对应 id 容器。</li><li>docker top：来查看容器内部运行的进程。</li><li>docker logs [ID 或者名字] ：查看容器内部的标准输出（应用日志）。</li><li>docker port：查看指定 （ID 或者名字）容器的某个确定端口映射到宿主机的端口号。</li></ul><h5 id="镜像使用"><a href="#镜像使用" class="headerlink" title="镜像使用"></a>镜像使用</h5><ul><li><p>docker images：列出本地主机上的镜像（REPOSITORY：表示镜像的仓库源、TAG：镜像的标签、IMAGE ID：镜像 ID</p><p>、CREATED：镜像创建时间、SIZE：镜像大小）</p></li><li><p>docker pull：下载获取镜像</p></li><li><p>docker search：搜索镜像</p></li><li><p>docker rmi：删除镜像</p></li><li><p>apt-get update：更新镜像</p></li><li><p>docker build（Dockerfile）：构建镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t runoob&#x2F;centos:6.7 .</span><br></pre></td></tr></table></figure><ul><li><strong>-t</strong> ：指定要创建的目标镜像名</li><li><strong>.</strong> ：Dockerfile 文件所在目录，可以指定 Dockerfile 的绝对路径</li></ul></li><li><p>docker tag id runoob/centos:dev：为镜像添加一个新的标签</p></li></ul><h5 id="容器连接"><a href="#容器连接" class="headerlink" title="容器连接"></a>容器连接</h5><ul><li><p>网络端口映射</p><ul><li><p>-P :是容器内部端口随机映射到主机的端口</p></li><li><p>-p : 是容器内部端口绑定到指定的主机端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1:5000:5000&#x2F;udp</span><br></pre></td></tr></table></figure></li></ul></li><li><p>新建网络</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d bridge test-net</span><br></pre></td></tr></table></figure></li><li><p>连接容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name test1 --network test-net ubuntu &#x2F;bin&#x2F;bash</span><br><span class="line">docker run -itd --name test2 --network test-net ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure></li><li><p>指定容器配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -h host_ubuntu  --dns&#x3D;114.114.114.114 --dns-search&#x3D;test.com ubuntu</span><br></pre></td></tr></table></figure><p>—rm：容器退出时自动清理容器内部的文件系统。</p><p>-h HOSTNAME 或者 —hostname=HOSTNAME： 设定容器的主机名。</p><p>—dns=IP_ADDRESS：添加 DNS 服务器到容器的 /etc/resolv.conf 中。</p><p>—dns-search=DOMAIN：设定容器的搜索域。</p></li></ul><h4 id="Docker-打包-Springboot-项目"><a href="#Docker-打包-Springboot-项目" class="headerlink" title="Docker 打包 Springboot 项目"></a>Docker 打包 Springboot 项目</h4><h5 id="制作-JKD-镜像"><a href="#制作-JKD-镜像" class="headerlink" title="制作 JKD 镜像"></a>制作 JKD 镜像</h5><ul><li><a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noopener">Oracle 官网</a>下载 JDK8(tar.gz)到 Docker 主机，解压</li><li>编写 DockerFile(FROM,ADD,ENV,JAVA_HOME)</li><li>创建镜像 docker build -t jdk:8.(文件目录)</li></ul><h5 id="Springboot-打包"><a href="#Springboot-打包" class="headerlink" title="Springboot 打包"></a>Springboot 打包</h5><ul><li>创建 Springboot 项目并完成功能</li><li>修改数据源</li><li>Maven 构建(mvn clean)打 jar 包</li><li>ftp 工具将 jar 包传至 docker 主机(scp)</li><li><p>编写 Dockerfile（FROM，指定使用哪个镜像源；RUN 指令告诉 docker 在镜像内执行命令，安装了什么）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ARG BUILD_FROM&#x3D;arm64v8</span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line">MAINTAINER whiskeyi</span><br><span class="line">VOLUME [&quot;&#x2F;opt&#x2F;jdk&quot;]</span><br><span class="line">ADD .&#x2F;jdk8.tar.gz &#x2F;opt&#x2F;jdk</span><br><span class="line">ENV JAVA_HOME &#x2F;opt&#x2F;jdk&#x2F;jdk1.8.0_144</span><br><span class="line">ENV CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br><span class="line">ENV PATH $JAVA_HOME&#x2F;bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>制作镜像，上传镜像仓库</p><ul><li><p>打包镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build –t springboottest:1.0 .</span><br></pre></td></tr></table></figure></li><li><p>Tag 重命名（生成一个新的 image 引用）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag springboottest:1.0 registry.cn-hangzhou.aliyuncs.com&#x2F;edu_zust&#x2F;springboottest:1.0</span><br></pre></td></tr></table></figure></li><li><p>上传阿里云私有仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">登录：docker login --username&#x3D;****** registry.cn-hangzhou.aliyuncs.com</span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com&#x2F;edu_zust&#x2F;springboottest:1.0</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建 docker 网络 docker network create mynet</p></li><li><p>创建容器</p><ul><li><p>mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name mysql -p 3336:3306 -e MYSQL_ROOT_PASSWORD&#x3D;123456 --net mynet mysql:5.7</span><br></pre></td></tr></table></figure></li></ul></li><li><p>容器部署</p><ul><li><p>依赖准备（mysql 容器及数据库建立）</p></li><li><p>在部署主机上拉取镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;edu_zust&#x2F;springboottest:1.0</span><br><span class="line">docker tag registry.cn-hangzhou.aliyuncs.com&#x2F;edu_zust&#x2F;springboottest:1.0 springboottest:v1</span><br></pre></td></tr></table></figure></li><li><p>运行镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run –d –name test-app –p 8080:8080 –network mynet springboottest:v1</span><br></pre></td></tr></table></figure></li><li><p>打开浏览器，通过部署主机 ip 的 8080 访问容器中的 web，进行功能测试</p></li></ul></li></ul><h3 id="OpenAPI"><a href="#OpenAPI" class="headerlink" title="OpenAPI"></a>OpenAPI</h3><h4 id="RESTful-基本概念"><a href="#RESTful-基本概念" class="headerlink" title="RESTful 基本概念"></a>RESTful 基本概念</h4><ul><li><p>REST 即在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的<strong>架构风格</strong>。</p></li><li><p>REST(Representation + State + Transfer)表现层状态转化。即资源在网络中以某种表现形式进行状态转移</p></li><li><p>如果一个架构符合 REST 原则就是 RESTful 架构，是一种面向资源的架构。</p><ul><li>每个 URI 代表一种资源</li><li>客户端和服务器之间，传递这种资源的某种表现层</li><li>客户端通过 HTTP 动词，对服务器端资源进行操作，实现“表现层状态转化”</li></ul></li><li><p>URL 用于资源定位，HTTP 动词描述操作</p></li></ul><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>资源表示一种实体，URI 使用名词表示，不应该包含动词；一般来说，数据库中的表都是同种记录的集合，所以 URI 中的名词应该使用复数。</li><li>如果某些动作是 HTTP 动词表示不了的，应该把动作做成一种资源。</li><li>参数的设计允许存在冗余，即允许 API 路径和 URL 参数偶尔有重复。</li><li>常见参数：?limit/?offset/?page=/?sortby=</li></ul><h4 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h4><ul><li><p>GET(SELECT)：从服务器取出资源(一项或多项)</p></li><li><p>POST(CREATE)：在服务器新建一个资源</p></li><li><p>PUT(UPDATE)：在服务器更新资源(客户端提供改变后的完整资源)</p></li><li><p>PATCH(UPDATE)：在服务器更新资源(客户端提供改变的属性)</p></li><li><p>DELETE(DELETE)：从服务器删除资源</p></li><li><p>HEAD：用于获取某个资源的元数据</p></li><li><p>OPTIONS：用于获取某个资源所支持的 Request 类型</p></li></ul><h4 id="Restful-最佳实践"><a href="#Restful-最佳实践" class="headerlink" title="Restful 最佳实践"></a>Restful 最佳实践</h4><ol><li>动词/方法：GET、POST、PUT、PATCH、DELETE；URI(面向资源)：/articles/；端点：动词与 URI 结合<code>GET:/articles/</code>。</li><li>一般不要返回纯文本：body 头部加上 Content-type: application/json。</li><li>避免 URI 使用动词：createNewArticle no | articles yes</li><li>合适情况下使用复数的名词来描述资源: /articles/</li><li>响应中返回错误详情: error =&gt; detail</li><li>返回正确的 status code(与错误类型一致，有一定含义): 200 no</li><li>保持 status code 一致</li><li>不要嵌套资源：/authors/12/articles/ no | /articles/?author_id=12 yes</li><li>优雅处理尾斜杠：提供重定向相应</li><li>querystring 完成筛选和分页：GET: /articles/?published=true&amp;page=2&amp;page_size=20</li><li>401/403: 未认证(未提供身份验证凭据、认证无效<code>401 Unauthorized</code>) | 未授权(经过身份验证，没有访问资源的权限<code>403 Forbidden</code>)</li><li>巧用 202 Accepted</li><li>采用 REST API 定制化框架</li></ol><h4 id="OAUTH"><a href="#OAUTH" class="headerlink" title="OAUTH"></a>OAUTH</h4><p>OAuth 为客户端提供了一种代表资源拥有者访问受保护资源的方法。 在客户端访问保护资源之前，他必须先从资源拥有者获取授权，然后用访问许可交换访问令牌。客户端通过向资源服务器出示访问令牌来访问受保护资源</p><h3 id="WebService"><a href="#WebService" class="headerlink" title="WebService"></a>WebService</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>一个接受 XML 格式请求的应用程序</li><li>可以从其他系统跨网络，是分布式技术的发展</li><li>轻量级和与厂商无关的通信协议（安全、事务等由 Web 服务规范拓展处理、基于标准开放协议，跨越所有厂商）</li></ul><h4 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h4><ul><li>XML – <strong>Extensible Markup Language</strong> －扩展性标记语言 XML，用于传输格式化的数据，是 Web 服务的基础。 namespace-命名空间。 xmlns=“<a href="http://itcast.cn”" target="_blank" rel="noopener">http://itcast.cn”</a> 使用默认命名空间。 xmlns:itcast=“<a href="http://itcast.cn”使用指定名称的命名空间。" target="_blank" rel="noopener">http://itcast.cn”使用指定名称的命名空间。</a></li><li>WSDL(说明书) – <strong>WebService Description Language</strong> – Web 服务描述语言。 通过 XML 形式说明服务在什么地方－地址。 通过 XML 形式说明服务提供什么样的方法 – 如何调用。描述 WebService 及其函数、参数和返回值。</li><li>SOAP – <strong>Simple Object Access Protocol</strong> – 简单对象访问协议，SOAP 作为一个基于 XML 语言的协议用于有网上传输数据，这样 WebService 可以通过 http 协议的 post 和 get 方法与其他远程数据</li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li><p>找到对应需要的 webservice 服务</p></li><li><p>下载需要使用的 webservice 的 wsdl：F12 开发者模式，查看响应内容 copy 到 air.wsdl 文件中（删除<code>&lt;s:element ref=&quot;s:schema&quot; /&gt;</code>）</p></li><li><p>新建基本 springboot 项目，添加以下依赖<code>cxf-spring-boot-starter-jaxws（webservice客户端）</code>、<code>fastjson（java对象、json转换）</code>、<code>dom4j（xml数据解析）</code>、<code>commons-lang（apache工具包，字符串处理）</code></p></li><li><p>将处理好的 wsdl 文件放入 resources 目录</p></li><li><p>通过 jax 客户端调用 web 服务，分析返回的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建web服务客户端</span></span><br><span class="line">JaxWsDynamicClientFactory dcf = JaxWsDynamicClientFactory.newInstance();</span><br><span class="line">Clinet client = dcf.createClient(<span class="string">"air.wsdl"</span>);</span><br><span class="line">Object[] objects;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 调用web服务</span></span><br><span class="line">  objects = client.invoke(<span class="string">"getDomesticAirlinesTime"</span>, ...);</span><br><span class="line">  <span class="comment">// 处理服务返回的结果（提取结果xml字符串）</span></span><br><span class="line">  String xmlStr = JSON.toJSONString(objects);</span><br><span class="line">  System.out.printIn(xmlStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提取结果 xml，通过 dom4j 解析</p></li><li><p>将 web 服务的数据封装成自己的 api 接口</p><ul><li>添加 controller 包，新建 AirController 类</li><li>增加<code>List&lt;AirDto&gt; airSearch(String from,String to,String date)</code>，将查询封装成 web 接口，并通过 AirDto 反馈给前端</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重拾算法(Re-learning Algorithm)</title>
      <link href="/algorithm.html"/>
      <url>/algorithm.html</url>
      
        <content type="html"><![CDATA[<h2 id="重拾算法-Re-learning-Algorithm"><a href="#重拾算法-Re-learning-Algorithm" class="headerlink" title="重拾算法(Re-learning Algorithm)"></a>重拾算法(Re-learning Algorithm)</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>数据结构和算法是一名合格程序员的基本素质，本专栏与在构建的<code>重拾数据结构(Re-learning Data Structure)</code>专栏一起，旨在回顾课程及自我学习到的数据结构和算法内容的知识，对它们进行重新梳理。代码以<code>JavaScript</code>语言编写，后续会持续更新记录自己的刷题过程。</p><blockquote><p>内容持续更新中…</p></blockquote><h3 id="算法概述"><a href="#算法概述" class="headerlink" title="算法概述"></a>算法概述</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>一般认为，算法是由若干条指令组成的有穷序列，具有下列五个特性：</p><ol><li>确定性：每条指令都是明确的、无二义的</li><li>能行性：每条指令都必须是能够执行的</li><li>输入：允许有 0 个或多个输入量，取自特定的集合</li><li>输出：产生一个或多个输出，它（们）与输入量之间存在着某种特定的关系</li><li>有穷性：每一条指令执行的次数都是有穷的</li></ol><blockquote><p>注：如果不满足有穷性，满足前 4 条，则称为计算过程，操作系统 OS 就是计算过程</p></blockquote><h4 id="算法的评定"><a href="#算法的评定" class="headerlink" title="算法的评定"></a>算法的评定</h4><p>同一问题可用不同算法解决，而一个算法的质量优劣将影响到算法乃至程序的效率。算法分析的目的在于选择合适算法和改进算法。一个算法的评价主要从<code>时间复杂度</code>和<code>空间复杂度</code>来考虑。</p><ul><li>时间复杂度:算法的时间复杂度是指执行算法所需要的计算工作量。一般来说，计算机算法是问题规模的函数，因此，问题的规模越大，算法执行的时间的增长率与的增长率正相关，称作渐进时间复杂度（Asymptotic Time Complexity）。</li><li>空间复杂度: 算法的空间复杂度是指算法需要消耗的内存空间。其计算和表示方法与时间复杂度类似，一般都用复杂度的渐近性来表示。同时间复杂度相比，空间复杂度的分析要简单得多。</li><li>正确性: 算法的正确性是评价一个算法优劣的最重要的标准。</li><li>可读性: 算法的可读性是指一个算法可供人们阅读的容易程度。</li><li>鲁棒性: 鲁棒性是指一个算法对不合理数据输入的反应能力和处理能力，也称为容错性。</li></ul><h4 id="NP-完全性理论"><a href="#NP-完全性理论" class="headerlink" title="NP 完全性理论"></a>NP 完全性理论</h4><p><strong>多项式时间和非多项式时间：</strong></p><p><img src="img/algorithm/on.png" alt="on"></p><p>当问题的规模足够大的时候，有的问题的时间复杂度是多项式时间的，而有的是非多项式时间的。也就是说，对于规模很大的非多项式时间问题，要解决它的话需要很久的时间，时间呈现指数级增长。</p><h5 id="P-Polynomial-time"><a href="#P-Polynomial-time" class="headerlink" title="P(Polynomial-time)"></a>P(Polynomial-time)</h5><p>如果一个问题可以找到一个能在多项式的时间（有限，除 n 次方阶乘等）里解决它的算法，那么这个问题就属于 P 问题。</p><h5 id="NP-Nondeterministic-Polynomial-time"><a href="#NP-Nondeterministic-Polynomial-time" class="headerlink" title="NP(Nondeterministic Polynomial-time)"></a>NP(Nondeterministic Polynomial-time)</h5><p>即非确定性多项式时间，在多项式时间内可以被证明（验证）的问题（可以在多项式的时间里猜出一个解的问题）。</p><p>对于一个问题，如果我们能够在多项式时间内解决，那么我们肯定也能在多项式时间内验证某个猜测是否为这个问题的一个解，因此 P 问题也属于 NP 问题，或者说 P 问题是 NP 问题的一个子集。</p><h5 id="NPC-NP-Completeness-：NP-中最难的问题"><a href="#NPC-NP-Completeness-：NP-中最难的问题" class="headerlink" title="NPC(NP Completeness)：NP 中最难的问题"></a>NPC(NP Completeness)：NP 中最难的问题</h5><p><strong>非形式化定义</strong>，如果一个 NP 问题和其他任何 NP 问题一样“不易解决”（归约），那么我们认为这一问题是 NPC 类问题或称之为 NP 完全问题</p><p>首先，它得是一个 NP 问题；然后，所有的 NP 问题都可以约化到它。所有的 NP 问题都可以归约到它。也就是说，解决了这个问题，也就同时解决了所有的 NP 问题</p><p><strong>归约</strong>：一个问题 A 可以约化为问题 B 的含义即是，可以用问题 B 的解法解决问题 A，或者说，问题 A 可以“变成”问题 B（B 的时间复杂度高于或者等于 A 的时间复杂度）</p><p>一个问题约化为另一个问题，时间复杂度增加了，问题的应用范围也增大了</p><p><img src="img/algorithm/np.png" alt="np"></p><h3 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h3><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><h4 id="搜索算法"><a href="#搜索算法" class="headerlink" title="搜索算法"></a>搜索算法</h4><h4 id="穷举法"><a href="#穷举法" class="headerlink" title="穷举法"></a>穷举法</h4><p>穷举法，或称为暴力破解法，其基本思路是：对于要解决的问题，列举出它的所有可能的情况，逐个判断有哪些是符合问题所要求的条件，从而得到问题的解。它也常用于对于密码的破译，即将密码进行逐个推算直到找出真正的密码为止。例如一个已知是四位并且全部由数字组成的密码，其可能共有 10000 种组合，因此最多枚举 10000 次就能找到正确的密码。</p><h3 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h3><h4 id="迭代-amp-递归-amp-分治法"><a href="#迭代-amp-递归-amp-分治法" class="headerlink" title="迭代 &amp; 递归 &amp; 分治法"></a>迭代 &amp; 递归 &amp; 分治法</h4><ul><li>迭代：迭代是重复反馈过程的活动，逼近所需目标或结果</li><li>递归：直接或者间接调用自身的算法</li><li>分治：把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解</li></ul><p><strong>分治条件：</strong></p><ol><li>边界条件：该问题的规模缩小到一定的程度就可以容易地解决</li><li>问题分解性质 1：该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质（子问题最优则原问题即最优</li><li>问题分解性质 2：该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子问题；（不独立则使用动态规划）</li><li>合并：利用该问题分解出的子问题的解可以合并为该问题的解</li></ol><p><strong>原则：</strong><br>在用分治法设计算法时，最好使子问题的规模大致相同。即将一个问题分成大小相等的 k 个子问题的处理方法是行之有效的。这种使子问题规模大致相等的做法是出自一种平衡(balancing)子问题的思想，它几乎总是比子问题规模不等的做法要好</p><p><strong>两者关系：</strong><br>由分治法产生的子问题往往是原问题的较小模式，这就为使用递归技术提供了方便。在这种情况下，反复应用分治手段，可以使子问题与原问题类型一致而其规模却不断缩小，最终使子问题缩小到很容易直接求出其解。这自然导致递归过程的产生</p><h5 id="T1-剑指-Offer-24-反转链表"><a href="#T1-剑指-Offer-24-反转链表" class="headerlink" title="T1. 剑指 Offer 24. 反转链表"></a>T1. 剑指 Offer 24. 反转链表</h5><p>链接：<a href="https://leetcode.cn/problems/fan-zhuan-lian-biao-lcof/" target="_blank" rel="noopener">反转链表</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反转链表——递归法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params">prev, head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head) <span class="keyword">return</span> prev;</span><br><span class="line">    <span class="keyword">let</span> temp = head.next;</span><br><span class="line">    head.next = prev;</span><br><span class="line">    prev = head;</span><br><span class="line">    <span class="keyword">return</span> reverse(prev, temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReverseList</span>(<span class="params">pHead</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> reverse(<span class="literal">null</span>, pHead);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ReverseList : ReverseList</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="T2：200-岛屿数量"><a href="#T2：200-岛屿数量" class="headerlink" title="T2：200. 岛屿数量"></a>T2：200. 岛屿数量</h5><p>链接：<a href="https://leetcode.cn/problems/number-of-islands/description/" target="_blank" rel="noopener">岛屿数量</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numIslands = <span class="function"><span class="keyword">function</span> (<span class="params">grid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rz = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> dfs = <span class="function">(<span class="params">grid, i, j</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span> &amp;&amp; i &lt; grid.length &amp;&amp; j &lt; grid[<span class="number">0</span>].length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (grid[i][j] !== <span class="string">'1'</span>) <span class="keyword">return</span></span><br><span class="line">      grid[i][j] = <span class="string">'0'</span>;</span><br><span class="line">      dfs(grid, i, j + <span class="number">1</span>);</span><br><span class="line">      dfs(grid, i, j - <span class="number">1</span>);</span><br><span class="line">      dfs(grid, i + <span class="number">1</span>, j);</span><br><span class="line">      dfs(grid, i - <span class="number">1</span>, j);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span></span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">      dfs(grid, i, j);</span><br><span class="line">      <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        rz++;</span><br><span class="line">        flag = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rz;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4><p>动态规划算法与分治法类似，其基本思想也是将待求解问题分解成若干个子问题。但是经分解得到的子问题往往不是互相独立的。不同子问题的数目常常只有多项式量级。在用分治法求解时，有些子问题被重复计算了许多次</p><p>如果能够保存已解决的子问题的答案，而在需要时再找出已求得的答案，就可以避免大量重复计算，从而得到多项式时间算法</p><p><strong>步骤：</strong></p><ol><li>找出最优解的性质，并刻划其结构特征</li><li>递归地定义最优值</li><li>以自底向上的方式计算出最优值</li><li>根据计算最优值时得到的信息，构造最优解</li></ol><p>动态规划与分治法相似，都是组合子问题的解来解决原问题的解，与分治法的不同在于：分治法的子问题是相互独立存在的，而动态规划应用于子问题重叠的情况。</p><h5 id="T1-518-零钱兑换-II"><a href="#T1-518-零钱兑换-II" class="headerlink" title="T1. 518. 零钱兑换 II"></a>T1. 518. 零钱兑换 II</h5><p>链接：<a href="https://leetcode.cn/problems/coin-change-ii" target="_blank" rel="noopener">零钱兑换 II</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">amount</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">coins</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> amount = <span class="number">5</span>, coins = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> change = <span class="function">(<span class="params">amount, coins</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="built_in">Array</span>(amount + <span class="number">1</span>).fill(<span class="number">0</span>);</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; coins.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = coins[i]; j &lt;= amount; j++) &#123;</span><br><span class="line">      dp[j] += dp[j - coins[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[amount];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(change(amount, coins));</span><br></pre></td></tr></table></figure><h5 id="T2：整数拆分"><a href="#T2：整数拆分" class="headerlink" title="T2：整数拆分"></a>T2：整数拆分</h5><p>链接：<a href="https://leetcode.cn/problems/integer-break" target="_blank" rel="noopener">整数拆分</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> integerBreak = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dp = [];</span><br><span class="line">  dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">  dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> max = -<span class="literal">Infinity</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">      max = <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.max(dp[i - j] * j, (i - j) * j), max);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[i] = max;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[n]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="T3：剑指-Offer-II-099-最小路径之和"><a href="#T3：剑指-Offer-II-099-最小路径之和" class="headerlink" title="T3：剑指 Offer II 099. 最小路径之和"></a>T3：剑指 Offer II 099. 最小路径之和</h5><p>链接：<a href="https://leetcode.cn/problems/0i0mDW/description/" target="_blank" rel="noopener">最小路径之和</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[][]&#125;</span> <span class="variable">grid</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> minPathSum = <span class="function"><span class="keyword">function</span> (<span class="params">grid</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> dp = <span class="keyword">new</span> <span class="built_in">Array</span>(grid.length).fill(<span class="number">0</span>).map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Array</span>(grid[<span class="number">0</span>].length).fill(<span class="number">0</span>))</span><br><span class="line">  <span class="keyword">let</span> row = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> column = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">    row += grid[i][<span class="number">0</span>]</span><br><span class="line">    dp[i][<span class="number">0</span>] = row;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">    column += grid[<span class="number">0</span>][j]</span><br><span class="line">    dp[<span class="number">0</span>][j] = column;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; grid.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt; grid[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">      dp[i][j] = <span class="built_in">Math</span>.min(dp[i - <span class="number">1</span>][j] + grid[i][j], dp[i][j - <span class="number">1</span>] + grid[i][j])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dp[grid.length - <span class="number">1</span>][grid[<span class="number">0</span>].length - <span class="number">1</span>]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h4><p><strong>基本思路：</strong></p><p>在对问题求解时，总是做出在当前看来是最好的选择（局部最优解）<br>所求问题的整体最优解可以通过一系列局部最优的选择，即贪心选择来达到。<br>动态规划算法通常以自底向上的方式解各子问题，而贪心算法则通常以自顶向下的方式进行，以迭代的方式作出相继的贪心选择，每作一次贪心选择就将所求问题简化为规模更小的子问题</p><ol><li>建立数学模型来描述问题</li><li>把求解的问题分成若干个子问题</li><li>对每一子问题求解，得到子问题的局部最优解</li><li>把子问题的解局部最优解合成原来解问题的一个解</li></ol><h5 id="T1：6221-最流行的视频创作者"><a href="#T1：6221-最流行的视频创作者" class="headerlink" title="T1：6221. 最流行的视频创作者"></a>T1：6221. 最流行的视频创作者</h5><p>链接：<a href="https://leetcode.cn/problems/most-popular-video-creator/description" target="_blank" rel="noopener">最流行的视频创作者</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整体思路【贪心】，从末尾往前依次 加上 能进位的数字大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> makeIntegerBeautiful = <span class="function"><span class="keyword">function</span> (<span class="params">n, target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 分隔n为数字数组</span></span><br><span class="line">  <span class="keyword">let</span> nArr = n.toString().split(<span class="string">''</span>).map(<span class="built_in">Number</span>)</span><br><span class="line">  <span class="comment">// 数组求和</span></span><br><span class="line">  <span class="keyword">let</span> sum = nArr.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur)</span><br><span class="line">  <span class="comment">// 需要添加的数字</span></span><br><span class="line">  <span class="keyword">let</span> rz = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 记录当前执行到第 base + 1 次</span></span><br><span class="line">  <span class="keyword">let</span> base = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = nArr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="comment">// 每次执行判断是否符合结果，若符合直接输出</span></span><br><span class="line">    <span class="keyword">if</span> (sum &lt;= target) <span class="keyword">return</span> rz</span><br><span class="line">    <span class="keyword">let</span> currNum = nArr[i]</span><br><span class="line">    <span class="comment">// 更新结果</span></span><br><span class="line">    sum = sum - currNum + <span class="number">1</span></span><br><span class="line">    rz += <span class="built_in">Math</span>.pow(<span class="number">10</span>, base) * (<span class="number">10</span> - currNum)</span><br><span class="line">    <span class="comment">// 每次操作前一位进一</span></span><br><span class="line">    nArr[nArr.length - <span class="number">2</span> - base]++</span><br><span class="line">    base++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rz</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>最优子结构：</strong><br>当一个问题的最优解包含其子问题的最优解时，称此问题具有最优子结构性质。问题的最优子结构性质是该问题可用动态规划算法或贪心算法求解的关键特征</p><h4 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h4><p><strong>基本思路：</strong></p><ol><li>针对所给问题，定义问题的解空间，确定易于搜索的解空间结构</li><li>以深度优先方式搜索解空间</li><li>在搜索过程中用剪枝函数避免无效搜索</li></ol><p>回溯法的基本行为是搜索，搜索过程使用剪枝函数来为了避免无效的搜索。剪枝函数包括两类：</p><ol><li>使用约束函数，剪去不满足约束条件的路径</li><li>使用限界函数，剪去不能得到最优解的路径</li></ol><p>问题的关键在于如何定义问题的解空间，转化成树（即解空间树）</p><p>回溯法的构造解空间树分为排列树和子集树。当选项可以重复时，则解空间树为子集树，如 01 背包中，每项都可以选或者不选，最小重量机器设计中，每个零件都可以在所有供应商买到。当解空间不可以重复时，解空间树则为排列树，如旅行售货员问题中，每条道路不能重复走，羽毛球最佳配对问题中，队员不能重复选择</p><h5 id="T1：78-子集"><a href="#T1：78-子集" class="headerlink" title="T1：78.子集"></a>T1：78.子集</h5><p>链接：<a href="https://leetcode.cn/problems/subsets/" target="_blank" rel="noopener">子集</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> subsets = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> rz = [[]];</span><br><span class="line">  <span class="keyword">let</span> path = [];</span><br><span class="line">  <span class="keyword">let</span> len = nums.length;</span><br><span class="line">  <span class="keyword">const</span> backTracking = <span class="function">(<span class="params">nums, startIndex, length</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.length === length) &#123;</span><br><span class="line">      rz.push([...path]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> k = startIndex; k &lt; len; k++) &#123;</span><br><span class="line">      path.push(nums[k]);</span><br><span class="line">      backTracking(nums, k + <span class="number">1</span>, length);</span><br><span class="line">      path.pop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">    backTracking(nums, <span class="number">0</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> rz;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="分支限界法"><a href="#分支限界法" class="headerlink" title="分支限界法"></a>分支限界法</h4><p>与回溯法一样，分支限界法也是在问题的解空间树上搜索问题的解的一种算法</p><p><strong>区别：</strong></p><ol><li>求解目标不同：<ul><li>回溯法的求解目标一般是找出解空间树中满足条件的所有解</li><li>分支限界法则是尽快找出满足约束条件的一个解，或是在满足约束条件的解中找出在某种意义下的最优解</li></ul></li><li>搜索方式不同：<ul><li>回溯法——&gt;深度优先遍历结点搜索解空间树</li><li>分支限界法——&gt;广度优先或最小耗费优先搜索解空间树</li></ul></li><li>空间不同：<ul><li>分支限界法由于加入了活结点表，所以存储空间比回溯法大得多。因此当内存容量有限时，回溯法的成功率要大一些分支限界法中，每个活结点只有一次机会变成扩展结点，一旦成为扩展结点便一次性生成其所有子结点组织形式：最大团问题——最大堆，旅行商问题——最小堆</li></ul></li></ol><p><strong>小结</strong>：回溯法空间效率更高，分支限界法由于只需要求到一个解，所以往往更“快”</p><h4 id="随机化算法"><a href="#随机化算法" class="headerlink" title="随机化算法"></a>随机化算法</h4><p><strong>算法思路：</strong></p><p>在算法中使用随机函数,其中决策依赖于某种随机事件,基本特征是同一个实例用统一随机化算法得到可能完全不同的结果</p><ul><li>数值随机化算法</li><li>蒙特卡罗（Monte Carlo）算法</li><li>拉斯维加斯（Las Vegas）算法</li><li>舍伍德（Sherwood）算法</li><li>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进一步理解Promise对象(Promise)</title>
      <link href="/promise.html"/>
      <url>/promise.html</url>
      
        <content type="html"><![CDATA[<h2 id="进一步理解-Promise-对象"><a href="#进一步理解-Promise-对象" class="headerlink" title="进一步理解 Promise 对象"></a>进一步理解 Promise 对象</h2><h3 id="Promise-简介"><a href="#Promise-简介" class="headerlink" title="Promise 简介"></a>Promise 简介</h3><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大，它能解决回调地狱的问题。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，使原生提供了 Promise 对象。</p><p>所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p><p>Promise 有<strong>两个特点</strong>：</p><ol><li><strong>对象的状态不受外界影响</strong>。Promise 对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是 Promise 这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</li><li><strong>一旦状态改变，就不会再变</strong>，任何时候都可以得到这个结果。Promise 对象的状态改变，只有两种可能：从 pending 变为 fulfilled 和从 pending 变为 rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对 Promise 对象添加回调函数，也会立即得到这个结果。</li></ol><h3 id="Promise-基本用法"><a href="#Promise-基本用法" class="headerlink" title="Promise 基本用法"></a>Promise 基本用法</h3><p>ES6 规定，Promise 对象是一个构造函数，用来生成 Promise 实例。<br>下面代码创造了一个 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// code</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。</p><ul><li><code>resolve</code> 函数的作用是，将 Promise 对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去。</li><li><code>reject</code> 函数的作用是，将 Promise 对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</li></ul><p>Promise 例生成以后，可以用 then 方法分别指定 resolved 状态和 rejected 状态的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">promise.then(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// failure</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>then 方法可以接受<strong>两个回调函数</strong>作为参数。</p><ul><li>第一个回调函数是 Promise 对象的状态变为 resolved 时调用。</li><li>第二个回调函数是 Promise 对象的状态变为 rejected 时调用。这两个函数都是可选的，不一定要提供。它们都接受 Promise 对象传出的值作为参数。</li></ul><p><strong>需要注意的几点：</strong></p><ol><li>Promise 代码在没有 resolve / reject 之前是立即执行的，在 resolve 后会被推到 event loop 的微任务队列中。</li><li>.then 或 .catch 的参数期望是函数，传入非函数则会发生值透传。</li><li>then 方法可以被多次调用及链式调用。</li><li>then 方法的返回值是一个新的 Promise。</li></ol><h3 id="Promise-方法"><a href="#Promise-方法" class="headerlink" title="Promise 方法"></a>Promise 方法</h3><h4 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h4><p>Promise 实例具有 then 方法，也就是说，then 方法是定义在原型对象 Promise.prototype 上的。它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then 方法的第一个参数是 resolved 状态的回调函数，第二个参数是 rejected 状态的回调函数，它们都是可选的。</p><h4 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h4><p>Promise.prototype.catch() 方法是 .then(null, rejection) 或 .then(undefined, rejection) 的别名，用于指定发生错误时的回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"test"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，promise 抛出一个错误，就被 catch() 方法指定的回调函数捕获。同样也可以使用 try 和 catch 捕捉错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"test"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    reject(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获。由此一般来说，不要在 then() 方法里面定义 Reject 状态的回调函数（即 then 的第二个参数），总是使用 catch 方法。</p><h4 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h4><p>finally() 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。<br>finally 方法的来源是有时候我们需要对成功和失败两种情况执行同样的操作，这就需要我们各写一次。有了 finally 方法，则只需要写一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;···&#125;);</span><br></pre></td></tr></table></figure><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h4><p>Promise.all() 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，Promise.all() 方法接受一个数组作为参数，p1、p2、p3 都是 Promise 实例，如果不是，就会先调用 Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。另外，Promise.all() 方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p><p>p 的状态由 p1、p2、p3 决定，分成两种情况。</p><ul><li>只有 p1、p2、p3 的状态都变成 fulfilled ，p 的状态才会变成 fulfilled ，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</li><li>只要 p1、p2、p3 之中有一个被 rejected ，p 的状态就变成 rejected ，此时第一个被 reject 的实例的返回值，会传递给 p 的回调函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all(promises)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">posts</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h4><p>Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>上面代码中，只要 p1、p2、p3 之中有一个实例率先(就如同赛跑、竞赛一样，故称 race)改变状态（<code>不管成功还是失败</code>），p 的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给 p 的回调函数。</p><p>Promise.race() 方法的参数与 Promise.all() 方法一样，如果不是 Promise 实例，就会调用 Promise.resolve() 方法，将参数转为 Promise 实例，再进一步处理。</p><p>需要注意的是 Promise.race()方法会将所有实例继续执行，并不是只执行返回的实例。</p><h4 id="Promise-allSettle"><a href="#Promise-allSettle" class="headerlink" title="Promise.allSettle()"></a>Promise.allSettle()</h4><p>我们希望等到一组异步操作都结束了，不管每一个操作是成功还是失败，再进行下一步操作。为了解决这个问题，ES2020 引入了 Promise.allSettled() 方法，用来确定一组异步操作是否都结束了（不管成功或失败）。所以，它的名字叫做 “Settled” ，包含了 fulfilled 和 rejected 两种情况。</p><p>Promise.allSettled() 方法接受一个数组作为参数，数组的每个成员都是一个 Promise 对象，并返回一个新的 Promise 对象。只有等到参数数组的所有 Promise 对象都发生状态变更（不管是 fulfilled 还是 rejected ），返回的 Promise 对象才会发生状态变更。</p><h4 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h4><p>ES2021 引入了 Promise.any() 方法。该方法接受一组 Promise 实例作为参数，包装成一个新的 Promise 实例返回。只要参数实例有一个变成 fulfilled 状态，包装实例就会变成 fulfilled 状态；如果所有参数实例都变成 rejected 状态，包装实例就会变成 rejected 状态。</p><p>Promise.any() 跟 Promise.race() 方法很像，只有一点不同，就是 Promise.any() 不会因为某个 Promise 变成 rejected 状态而结束，必须等到所有参数 Promise 变成 rejected 状态才会结束。</p><h4 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h4><p>有时需要将现有对象转为 Promise 对象，Promise.resolve()方法就起到这个作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="string">"foo"</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="string">"foo"</span>));</span><br></pre></td></tr></table></figure><p>有四种情况：</p><ol><li>参数是一个 Promise 实例。如果参数是 Promise 实例，那么 Promise.resolve 将不做任何修改、原封不动地返回这个实例。</li><li>参数是一个 thenable 对象(具有 then 方法的对象)。Promise.resolve() 方法会将这个对象转为 Promise 对象，然后就立即执行 thenable 对象的 then() 方法。</li><li>参数不是具有 then() 方法的对象，或根本就不是对象。如果参数是一个原始值，或者是一个不具有 then()方法的对象，则 Promise.resolve()方法返回一个新的 Promise 对象。由于不属于异步操作，返回 Promise 实例的状态从一生成就是 resolved，所以回调函数会立即执行。状态为 resolved。Promise.resolve()方法的参数，会同时传给回调函数。</li><li>不带有任何参数。Promise.resolve()方法允许调用时不带参数，直接返回一个 resolved 状态的 Promise 对象。</li></ol><h4 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h4><p>Promise.reject(reason)方法会返回一个新的 Promise 实例，该实例的状态为 rejected。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.reject(<span class="string">"出错了"</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">"出错了"</span>));</span><br><span class="line"></span><br><span class="line">p.then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure><h3 id="手写-Promise"><a href="#手写-Promise" class="headerlink" title="手写 Promise"></a>手写 Promise</h3><h4 id="PromiseAll-Promise-all"><a href="#PromiseAll-Promise-all" class="headerlink" title="PromiseAll(Promise.all())"></a>PromiseAll(Promise.all())</h4><p><strong>注意的点：</strong></p><ol><li><p>PromiseAll 返回的是一个 Promise 对象。</p></li><li><p>由于 PromiseAll 返回的结果和入参数组顺序一一对应，可能存在阻塞情况（造成返回数据顺序混乱），因此不能使用<code>rz.push()</code>方法，而是采用<code>res[i] = value</code>。</p></li><li><p>必须引入 counter 做记录（不能使用数组的长度 length 来判断），由于 js 内存空间的分配原理，若仅定义<code>let res[6] = 1</code>，<code>res.length === 7</code>返回的值为 true，这样就会造成结果判断的错误。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PromiseAll</span>(<span class="params">promiseArray</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// promiseArray传入的是可迭代对象，将其转化为数组</span></span><br><span class="line">  promiseArray = <span class="built_in">Array</span>.from(promiseArray);</span><br><span class="line">  <span class="comment">// 返回 Promise 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断传入的是否为数组</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(promiseArray)) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"argument must be a array"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 结果存储</span></span><br><span class="line">    <span class="keyword">const</span> res = [];</span><br><span class="line">    <span class="keyword">const</span> promiseNums = promiseArray.length;</span><br><span class="line">    <span class="comment">// 记录 promise fulfilled 的个数</span></span><br><span class="line">    <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promiseNums; i++) &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(promiseArray[i]).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        counter++;</span><br><span class="line">        res[i] = value;</span><br><span class="line">        <span class="comment">// 如果全部fulfilled ,执行resolve(res)</span></span><br><span class="line">        <span class="keyword">if</span> (counter === promiseNums) &#123;</span><br><span class="line">          resolve(res);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PromiseRace-Promise-race"><a href="#PromiseRace-Promise-race" class="headerlink" title="PromiseRace(Promise.race())"></a>PromiseRace(Promise.race())</h4><p><strong>注意的点：</strong></p><ol><li><p>PromiseRace 返回的也是一个 Promise 对象。</p></li><li><p>PromiseRace 结果谁快谁先输出。</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PromiseRace</span>(<span class="params">promiseArray</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// promiseArray传入的是可迭代对象，将其转化为数组</span></span><br><span class="line">  promiseArray = <span class="built_in">Array</span>.from(promiseArray);</span><br><span class="line">  <span class="comment">// 返回 promise 对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 判断传入的是否为数组</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(promiseArray)) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"argument must be a array"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (promiseArray.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 空的可迭代对象，用于pending态</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promiseArray.length; i++) &#123;</span><br><span class="line">        <span class="built_in">Promise</span>.resolve(promiseArray[i])</span><br><span class="line">          .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 谁快谁先输出</span></span><br><span class="line">            resolve(data);</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            reject(reason);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现一个-Promise"><a href="#实现一个-Promise" class="headerlink" title="实现一个 Promise"></a>实现一个 Promise</h4><p><strong>步骤：</strong></p><ol><li>初始化 class。</li><li>定义三种状态类型。</li><li>设置初始状态。</li><li>resolve / reject。</li><li>.then 方法实现, promise 构造函数的入参(一个函数，函数接受两个参数，resolve， reject。new promise 的时候，就要执行这个函数，并且有任何错误都要被 reject 出去)。</li><li>监听 status 改变(getter，setter)。</li><li>继续处理 .then 方法。</li><li>resolvePromise 方法实现。</li><li>.catch 方法实现。</li><li>resolve, reject 静态方法实现。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义三种状态类型</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">"pending"</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">"fulfilled"</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">"rejected"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MPromise</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 由于 .then 可以多个并行或者链式调用并且不一定立马调用(setTimeout)，需要定义两个数组用来保存 FULFILLED、REJECTED回调的数组</span></span><br><span class="line">  FULFILLED_CALLBACK_LIST = [];</span><br><span class="line">  REJECTED_CALLBACK_LIST = [];</span><br><span class="line">  <span class="comment">// self 变量存值, 避免死循环</span></span><br><span class="line">  _status = PENDING;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">    <span class="comment">// 初始状态, 实例（不同的实例有不同的状态）</span></span><br><span class="line">    <span class="keyword">this</span>.status = PENDING;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化的时候执行这个函数, 处理报错可能</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>), <span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> status() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> status(newStatus) &#123;</span><br><span class="line">    <span class="keyword">this</span>._status = newStatus;</span><br><span class="line">    <span class="comment">// 处理回调情况</span></span><br><span class="line">    <span class="keyword">switch</span> (newStatus) &#123;</span><br><span class="line">      <span class="keyword">case</span> FULFILLED: &#123;</span><br><span class="line">        <span class="keyword">this</span>.FULFILLED_CALLBACK_LIST.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">          callback(<span class="keyword">this</span>.value);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> REJECTED: &#123;</span><br><span class="line">        <span class="keyword">this</span>.REJECTED_CALLBACK_LIST.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">          callback(<span class="keyword">this</span>.reason);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resolve(value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">      <span class="comment">// 更新值, 更新 status</span></span><br><span class="line">      <span class="keyword">this</span>.value = value;</span><br><span class="line">      <span class="keyword">this</span>.status = FULFILLED;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reject(reason) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.status === PENDING) &#123;</span><br><span class="line">      <span class="comment">// 更新值, 更新 status</span></span><br><span class="line">      <span class="keyword">this</span>.reason = reason;</span><br><span class="line">      <span class="keyword">this</span>.status = REJECTED;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="comment">// 判断 onFulfilled，onRejected 是否为函数，如果是函数就直接使用，不是则返回value / reason(值透传)</span></span><br><span class="line">    <span class="keyword">const</span> realOnFulfilled = <span class="keyword">this</span>.ifFunction(onFulfilled)</span><br><span class="line">      ? onFulfilled</span><br><span class="line">      : <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> value;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">const</span> realOnRejected = <span class="keyword">this</span>.ifFunction(onRejected)</span><br><span class="line">      ? onRejected</span><br><span class="line">      : <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> reason;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="comment">// 返回 promise</span></span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> MPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> fulfilledMicrotask = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 微任务队列</span></span><br><span class="line">        queueMicrotask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = realOnFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">            <span class="keyword">this</span>.resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">const</span> rejectedMicrotask = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 微任务队列</span></span><br><span class="line">        queueMicrotask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = realOnRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">            <span class="keyword">this</span>.resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (<span class="keyword">this</span>.status) &#123;</span><br><span class="line">        <span class="keyword">case</span> FULFILLED: &#123;</span><br><span class="line">          fulfilledMicrotask();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> REJECTED: &#123;</span><br><span class="line">          rejectedMicrotask();</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> PENDING: &#123;</span><br><span class="line">          <span class="keyword">this</span>.FULFILLED_CALLBACK_LIST.push(fulfilledMicrotask);</span><br><span class="line">          <span class="keyword">this</span>.REJECTED_CALLBACK_LIST.push(rejectedMicrotask);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span>(onRejected) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resolvePromise(promise2, x, resolve, reject) &#123;</span><br><span class="line">    <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">      <span class="keyword">return</span> reject(</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"The promise and the return value are the same"</span>)</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MPromise) &#123;</span><br><span class="line">      queueMicrotask(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        x.then(<span class="function">(<span class="params">y</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;, reject);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">"object"</span> || <span class="keyword">this</span>.isFunction(x)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (x === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> then = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        then = x.then;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(error);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.isFunction(then)) &#123;</span><br><span class="line">        <span class="comment">// 只执行一次</span></span><br><span class="line">        <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          then.call(</span><br><span class="line">            x,</span><br><span class="line">            (y) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (called) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              called = <span class="literal">true</span>;</span><br><span class="line">              <span class="keyword">this</span>.resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">            &#125;,</span><br><span class="line">            (r) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (called) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              called = <span class="literal">true</span>;</span><br><span class="line">              reject(r);</span><br><span class="line">            &#125;</span><br><span class="line">          );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="keyword">if</span> (called) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否为函数</span></span><br><span class="line">  ifFunction(param) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> param === <span class="string">"function"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  <span class="keyword">static</span> resolve(value) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value <span class="keyword">instanceof</span> MPromise) &#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MPromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      resolve(value);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> reject(reason) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      reject(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化(Performance Optimization)</title>
      <link href="/optimization.html"/>
      <url>/optimization.html</url>
      
        <content type="html"><![CDATA[<h2 id="前端性能优化-performance-optimization"><a href="#前端性能优化-performance-optimization" class="headerlink" title="前端性能优化(performance optimization)"></a>前端性能优化(performance optimization)</h2><h3 id="说在最前面"><a href="#说在最前面" class="headerlink" title="说在最前面"></a>说在最前面</h3><p>性能是前端开发一个非常重要的组成部分，与应用不同，网页的所有资源初始都需要通过网络传输，因此如何进行更好地进行网络传输对前端性能影响很大，此外还有浏览器渲染部分的优化。而在另一方面，对于用户来说，给网站添加加载或者过渡动画，让用户能够在等待中给予反馈(而不是生硬的白屏)，其实也可以看作为一种不一样的“性能优化”，下面文章将主要描述前端在网路传输和浏览器渲染等过程中如何进行性能优化，为用户带来更好的体验。另外，<strong>由于前端性能优化涉及的知识点比较多，全文篇幅较长，希望你能有所收获～</strong></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在描述前端性能优化前，我们需要了解一个常谈的问题：</p><blockquote><p>从输入 URL 到页面加载完成，发生了什么?</p></blockquote><p>这个问题很重要，因为文章性能优化的各个点将由这个过程展开。下面我们来简单回顾一下整个过程(其中涉及到计算机网络的知识点，由于文章主要讲性能优化，这里不做具体展开：</p><ol><li>浏览器的地址栏输入 URL 并跳转访问</li><li>浏览器查找当前 URL 是否存在缓存并且未清空和过期</li><li>DNS 解析 URL 对应的 IP</li><li>根据 IP 建立 TCP 连接（三次握手）</li><li>HTTP 发起请求</li><li>服务器处理请求，浏览器接收 HTTP 响应</li><li>渲染页面，构建 DOM 树</li><li>关闭 TCP 连接（四次挥手）</li></ol><p>在进行下文阅读前，如果对过程不是很理解的话，推荐阅读<a href="https://juejin.cn/post/6844904132071915527" target="_blank" rel="noopener">掘金文章-网络通信</a>和<a href="https://juejin.cn/post/6844904132071915527" target="_blank" rel="noopener">掘金文章-页面渲染</a>两篇文章。</p><h3 id="如何优化-DNS-预解析-DNS-Prefetch"><a href="#如何优化-DNS-预解析-DNS-Prefetch" class="headerlink" title="如何优化-DNS 预解析(DNS Prefetch)"></a>如何优化-DNS 预解析(DNS Prefetch)</h3><p><strong>DNS 预解析介绍:</strong></p><p><code>DNS(Domain Name System, 域名系统)</code>，是域名和 IP 地址相互映射的一个分布式数据库。DNS 查询就是将域名转换成 IP 的过程，这个过程短的话可能 1ms(本地缓存)对用户来说几乎无感，长则可能达到几秒钟。<br>   当浏览器访问一个域名的时候，需要解析一次 DNS，获得对应域名的 ip 地址。在解析过程中，按照浏览器缓存、系统缓存、路由器缓存、ISP(运营商) DNS 缓存、根域名服务器、顶级域名服务器、主域名服务器的顺序，逐步读取缓存，直到拿到该域名的 IP 地址。<br>  <code>DNS预解析(DNS Prefetch)</code>，就是根据浏览器定义的规则，提前解析之后可能会用到的域名，使解析结果缓存到系统缓存中，缩短 DNS 解析时间，来提高网站的访问速度。</p><p>DNS 预解析会做两件事：</p><ul><li>html 源码下载完成后，会解析页面的包含链接的标签，提前查询对应的域名。</li><li>对于访问过的页面，浏览器会记录一份域名列表，当再次打开时，会在 html 下载的同时去解析 DNS。</li></ul><p><strong>DNS 预解析使用:</strong></p><p>下面介绍两种 DNS 预解析方式：</p><ol><li><code>自动解析</code>：浏览器使用超链接的 href 属性来查找要预解析的主机名。当遇到 a 标签，浏览器会自动将 href 中的域名解析为 IP 地址，这个解析过程是与用户浏览网页并行处理的。但是为了确保安全性，在 HTTPS 页面中不会自动解析。可以通过以下代码可以手动开启：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当content为off是则为关闭 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-dns-prefetch-control"</span> <span class="attr">content</span>=<span class="string">"on"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ol><li><code>手动解析</code>：在页面添加标记，给 link 的 rel 设置<code>dns-prefetch</code>。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"www.baidu.com"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>DNS 预解析总结:</strong></p><p><code>DNS Prefetch</code> 可以有效缩短了 DNS 的解析时间，在应用于一些大量引用很多其他域名资源的网站，能够明显提升访问的速度。</p><h3 id="如何优化-发送-HTTP-请求"><a href="#如何优化-发送-HTTP-请求" class="headerlink" title="如何优化-发送 HTTP 请求"></a>如何优化-发送 HTTP 请求</h3><p>我们知道，在访问一个网页时，会产生很多 HTTP 请求，那么如何来优化这部分的性能呢？我们有两个思路：<strong>减少请求次数</strong>和<strong>缩小请求体积</strong>以减少单次请求时间，下面我们具体分析这两个思路有哪些方法：</p><h4 id="减少请求次数"><a href="#减少请求次数" class="headerlink" title="减少请求次数"></a>减少请求次数</h4><p><strong>将要请求的<code>资源合并</code>：</strong></p><h5 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h5><ul><li>使用 <code>webpack 静态模块打包工具</code>，借助 webpack 我们可以对项目 JS 和 CSS 资源进行打包，避免 JS 、 CSS 文件过多。</li></ul><h5 id="CSS-Sprites"><a href="#CSS-Sprites" class="headerlink" title="CSS Sprites"></a>CSS Sprites</h5><ul><li>使用<code>雪碧图(CSS Sprites)，精灵图</code>。我们将多个小图合并为一张，在使用的时候利用 background-position 进行定位，相较于一个小图标一个图像文件，单独一张图片所需的 HTTP 请求更少，且对内存和带宽更加友好。</li></ul><blockquote><p>和雪碧图一样，Base64 也是为了减少加载网页图片时对服务器的请求次数，从而提升网页性能。</p></blockquote><h5 id="WebStorage"><a href="#WebStorage" class="headerlink" title="WebStorage"></a>WebStorage</h5><p>使用<code>WebStorage</code>：WebStorage 有两种， sessionStorage 和 localStorage ，大小在 5-10M 之间，都是以键值对的方式进行存储。我们可以将一些请求获得的数据存储在 WebStorage 中，这样可以避免同样的数据两次请求。要注意的是 sessionStorage 与 localStorage 的不同在于生命周期的不同， sessionStorage 在 tab 关闭后，就不再存在了，而 localStorage 的永久存储，除非主动删除。</p><h5 id="IndexDB"><a href="#IndexDB" class="headerlink" title="IndexDB"></a>IndexDB</h5><p>使用<code>IndexDB</code>： IndexDB 是一个运行在浏览器上的非关系型数据库，相比 WebStorage，它可以存储大量的数据。</p><h5 id="HTTP-Cache"><a href="#HTTP-Cache" class="headerlink" title="HTTP Cache"></a>HTTP Cache</h5><ul><li>使用 <code>HTTP Cache</code>机制：HTTP 缓存分为强缓存和协商缓存。优先级较高的是强缓存，在未命中强缓存后下，走协商缓存。<ul><li><code>强缓存</code>利用 http 头中的 expires 和 cache-control 两个字段控制，当请求再次发出时，浏览器会根据这两个字段判断目标资源是否“命中”强缓存，若命中则直接从缓存中获取资源，不会再与服务端发生通信。以此减少请求的次数。<blockquote><p>强缓存的 expires 是一个时间戳，如果我们试图再次向服务器请求资源，浏览器对比本地时间和 expires 的时间戳，如果本地时间小于 expires 设定的过期时间，那么就直接去缓存中取这个资源。这样就会产生一个问题：如果本地时间不正确， expires 就无法达到我们预期的效果。 HTTP1.1，引入了 cache-control 字段，我们通过 <code>cache-control: max-age=1000</code> 来控制资源的有效期。 max-age 是一个时间长度。若 max-age 若为 1000 秒，则它指向的资源在 1000 秒以内都是有效的，规避了时间戳带来的潜在问题。</p></blockquote></li><li><code>协商缓存</code>：协商缓存下，浏览器向服务器去询问缓存的相关信息，判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。如果服务端提示缓存资源未改动(Not Modified)，资源会被重定向到浏览器缓存，这种情况下网络请求对应的状态码是 <code>304</code>。<blockquote><p>协商缓存的字段 Last-Modified 也是一个时间戳，当我们启用协商缓存，它会在首次请求时随着 Response Headers 返回：<code>Last-Modified: Four, 3 Mar 2022 23:22:57 GMT</code>，随后每次请求时，会带上 If-Modified-Since 时间戳字段，它的值正是上一次 response 返回给它的 last-modified 值，服务器接时间戳后，会比对该时间戳和资源在服务器上的最后修改时间是否一致，从而判断资源是否发生了变化。如果发生了变化，会返回一个完整的响应内容，并在 Response Headers 中添加新的 Last-Modified 值；否则，返回 304 响应，并且不再添加 Last-Modified 字段。在使用 last-modified 时会有两个问题，无法检测我是否真的修改了文件和在很短时间里修改了文件，并未到 last-modified 检测时间间隔里。因此引入了 Etag，Etag 是由服务器为每个资源生成的唯一的标识字符串，这个标识字符串是基于文件内容编码的，只要文件内容不同，它们对应的 Etag 就是不同的。</p></blockquote></li></ul></li></ul><h4 id="缩小请求体积"><a href="#缩小请求体积" class="headerlink" title="缩小请求体积"></a>缩小请求体积</h4><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><ul><li><code>不滥用Cookie</code>：Cookie 的本职工作并非本地存储，而是“维持状态“。Cookie 的体积上限只有<code>4KB</code>，一般来说存在于响应头里的 Set-Cookie 中，因此在同一个域名下的所有请求，都会携带 Cookie ，过量的 Cookie 会带来巨大的性能浪费。</li></ul><h5 id="Gzip-压缩"><a href="#Gzip-压缩" class="headerlink" title="Gzip 压缩"></a>Gzip 压缩</h5><p><code>使用Gzip</code>:传输的时候可以在服务器端开启 gzip 压缩(在响应头<code>request headers</code>加一句<code>accept-encoding:gzip</code>)，<code>content-encoding: gzip</code>可以有效减少传输文件的大小。</p><blockquote><p>现今也有使用 Content-Encoding: br 的压缩方法的，它是一种比 Gzip 压缩率更高的算法。压缩文件这个过程本身是需要耗费时间的，这是一种以服务器压缩的时间开销和 CPU 开销（和浏览器解析压缩文件的开销）为代价，省下了传输过程中的时间开销的方法。</p></blockquote><h5 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h5><ul><li><code>代码压缩</code>：使用代码压缩工具，删除无用的注释、空行和缩减名称等以减少请求体积。</li></ul><h5 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h5><ul><li><code>图片优化</code>：图片是网页上占用很多流量的一种资源。图片优化往往能将性能优化达到比较好的效果。一般我们有牺牲质量，压缩图片大小和裁剪图片两种方式：<ul><li><code>压缩图片</code>：如果在图片损失一些颜色和像素的情况下并不会对用户体验有太大影响，我们可以对图片进行压缩。</li><li><code>裁剪图片</code>：在一些图片不用完全显示等情况下，我们可以对图片做一些裁切和缩小等操作，来减小图片的体积。<blockquote><p>图片选用正确的格式也可以算是一种图片优化等方法，网页图片的格式一般有 PNG、JPG、SVG、WEBP。SVG 为矢量图片，不失真，常用于简单图形；WEBP 压缩率一般比 PNG 和 JPG 更好，同时支持透明背景。缺点是兼容性不好，所以我们将 WEBP 可用于兼容性好的浏览器，并用 JPG 和 PNG 做回退机制。</p></blockquote></li></ul></li></ul><h3 id="如何优化-页面渲染"><a href="#如何优化-页面渲染" class="headerlink" title="如何优化-页面渲染"></a>如何优化-页面渲染</h3><p>在上文，我们简单回答了从输入 URL 到页面加载完成，发生了什么这个问题，其中第七步页面渲染，构建 DOM 树有以下步骤：</p><ol><li>浏览器开始解析目标 HTML 文件,执行流的顺序为自上而下。</li><li>HTML 解析器将 HTML 结构转换为基础的 DOM (文档对象模型),构建 DOM 树完成后,触发 DomContendLoaded 事件。</li><li>CSS 解析器将 CSS 解析为 CSSOM (层叠样式表对象模型),一棵仅含有样式信息的树。</li><li>CSSOM 和 DOM 开始合并构成渲染(render)树,每个节点开始包含具体的样式信息。</li><li>计算渲染树中个各个节点的位置信息,即布局阶段。</li><li>将布局后的渲染树显示到界面上。</li></ol><p>那么根据上述这些步骤，如何进行页面渲染的相关优化呢？下面介绍几块方法：浏览器下载完页面中的所有组件—— HTML 标记、JavaScript、CSS、图片之后会解析生成两个内部数据结构—— DOM 树和(render)渲染树。DOM 树表示页面结构，渲染树表示 DOM 节点如何显示。</p><h4 id="减少渲染次数"><a href="#减少渲染次数" class="headerlink" title="减少渲染次数"></a>减少渲染次数</h4><ul><li><code>减少渲染次数</code>：我们通过尽量减少重排与重绘来减少渲染的次数。重排又称为回流，即通过某种手段改变了元素的位置大小等信息，导致浏览器需要重新计算和渲染的过程。而重绘是被改变了样式如颜色等。我们可以将将需要多次重排的元素(如动画等)，position 属性设为 absolute 或 fixed，这样元素就脱离了文档流，不会影响到其他元素。由于浏览器的流布局，对渲染树的计算通常只需要遍历一次就可以完成。但 table 及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花 2 倍多于同等元素的时间。所以我们要尽量不用 table 布局。</li></ul><blockquote><p>重排重绘具体定义：DOM 树中的每一个需要显示的节点在渲染树种中至少存在一个对应的节点(隐藏的 DOM 元素 display 值为 none 在渲染树中没有对应的节点)。渲染树中的节点被称为“帧”或“盒”，符合 CSS 模型的定义，理解页面元素为一个具有填充，边距，边框和位置的盒子。一旦 DOM 和渲染树构建完成，浏览器就开始显示（绘制）页面元素。当 DOM 的变化影响了元素的几何属性（宽或高），浏览器需要重新计算元素的几何属性，同样其他元素的几何属性和位置也会因此受到影响。浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。这个过程称为<code>重排</code>。完成重排后，浏览器会重新绘制受影响的部分到屏幕，该过程称为<code>重绘</code>。</p></blockquote><h4 id="减少渲染节点数量"><a href="#减少渲染节点数量" class="headerlink" title="减少渲染节点数量"></a>减少渲染节点数量</h4><p>减少渲染节点数量,可以用到懒加载、虚拟列表等方法。</p><h5 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h5><ul><li><code>懒加载</code>：当访问一个页面的时候，先不设或把 img 元素或是其他元素的图片路径替换成一张大小为 <code>1*1 px</code> 图片的路径（俗称占位图），当图片出现在浏览器的可视区域内时，才设置图片正真的路径，让图片显示出来，实现懒加载。那我们为什么要进行懒加载呢？在一些页面内容丰富、图片较多的场景下，如各种电商、长页面。这些页面的资源量很大，要是页面载入就一次性完成加载，需要不少的时间。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">      img &#123;</span><br><span class="line">        height: 450px;</span><br><span class="line">        display: block;</span><br><span class="line">        margin-bottom: 20px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里不是用src，图片地址暂时先保存在data-src这个自定义属性上面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./img-lazy/img/1.jpg"</span> <span class="attr">alt</span>=<span class="string">"懒加载1"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./img-lazy/img/2.png"</span> <span class="attr">alt</span>=<span class="string">"懒加载2"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./img-lazy/img/3.jpg"</span> <span class="attr">alt</span>=<span class="string">"懒加载3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./img-lazy/img/4.jpg"</span> <span class="attr">alt</span>=<span class="string">"懒加载4"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">"./img-lazy/img/5.jpg"</span> <span class="attr">alt</span>=<span class="string">"懒加载5"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在介绍下面代码前，需要掌握这几个属性：<br><code>clientHeight</code>：浏览器视口的高度(img.offsetTop)；<br><code>scrollTop</code>：滚动轴滚动的距离(document.documentElement.scrollTop)；<br><code>offsetTop</code>：元素的头部距离浏览器顶部的高度（不是距离视口顶部的高度）(document.documentElement.clientHeight)；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imgs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazyLoad</span>(<span class="params">imgs</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 视口的高度；</span></span><br><span class="line">  <span class="keyword">const</span> clientH = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">  <span class="comment">// 滚动的距离，这里的逻辑判断是为了作兼容性处理；</span></span><br><span class="line">  <span class="keyword">const</span> clientT = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; imgs.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 逻辑判断，若是视口高度 + 滚动距离 &gt; 图片到浏览器顶部的距离就去加载；</span></span><br><span class="line">    <span class="comment">// !imgs[i].src 目的是避免重复请求</span></span><br><span class="line">    <span class="keyword">if</span> (clientH + clientT &gt; imgs[i].offsetTop &amp;&amp; !imgs[i].src) &#123;</span><br><span class="line">      <span class="comment">// 使用data-xx的自定义属性能够经过dom元素的dataset.xx取得；</span></span><br><span class="line">      imgs[i].src = imgs[i].dataset.src;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一开始可以加载显示在视口中的图片；</span></span><br><span class="line">lazyLoad(imgs);</span><br><span class="line"><span class="comment">// 监听滚动事件，加载后面的图片；</span></span><br><span class="line"><span class="built_in">window</span>.onscroll = <span class="function"><span class="params">()</span> =&gt;</span> lazyLoad(imgs);</span><br></pre></td></tr></table></figure><p>有同学可能会发现，频繁触发的 scroll 事件会给浏览器形成很大的压力，这里我们可以对懒加载进行进一步优化，结合<a href="https://zhuchj.com/debounce.html">节流函数</a>进行进一步优化。</p><h5 id="虚拟列表"><a href="#虚拟列表" class="headerlink" title="虚拟列表"></a>虚拟列表</h5><ul><li><code>虚拟列表</code>：在一些情况下，我们会遇到需要一些不能使用分页方式来加载列表数据，而一次性加载大量数据会极其浪费时间，因为在实际的工作中，列表项是由复杂 DOM 节点组成的。虚拟列表类似懒加载是按需显示的一种实现，即只对可见区域进行渲染，对非可见区域中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。虚拟列表的实现，实际上就是在首屏加载的时候，只加载可视区域内需要的列表项，当滚动发生时，动态通过计算获得可视区域内的列表项，并将非可视区域内存在的列表项删除。这里看到了一篇不错的文章可供学习<a href="https://juejin.cn/post/6844903982742110216" target="_blank" rel="noopener">虚拟列表</a>。</li></ul><h4 id="减少阻塞"><a href="#减少阻塞" class="headerlink" title="减少阻塞"></a>减少阻塞</h4><h5 id="CSS-阻塞渲染"><a href="#CSS-阻塞渲染" class="headerlink" title="CSS 阻塞渲染"></a>CSS 阻塞渲染</h5><ul><li><code>CSS阻塞渲染</code>：通常情况下 CSS 被认为是阻塞渲染的资源，在 CSSOM 构建完成之前，页面不会被渲染，放在顶部让样式表能够尽早开始加载。但如果把引入样式表的 link 放在文档底部，页面虽然能立刻呈现出来，但是页面加载出来的时候会是没有样式的，是混乱的。当后来样式表加载进来后，页面会立即进行重绘，会发生闪烁的问题。</li></ul><h5 id="JavaScript-阻塞文档解析"><a href="#JavaScript-阻塞文档解析" class="headerlink" title="JavaScript 阻塞文档解析"></a>JavaScript 阻塞文档解析</h5><ul><li><code>JavaScript 阻塞文档解析</code>：当在 HTML 文档中遇到 script 标签后控制权将交给 JS，在 JS 下载并执行完成之前，都不会解析 HTML。因此如果将 JS 放在文档顶部，恰好这个时候 JS 脚本加载的特别慢，用户将会等待很长一段时间，这段时间 HTML 文档还没有解析到 body 部分，页面会是空白的。我们可以人为指定，哪些元素进行延迟加载，通过为 script 标签指定 async 或 defer 来延迟脚本。<ul><li>async 表示 JS 不会阻塞，但会在下载完成后立刻执行。</li><li>defer 则会在下载完成并且整个文档解析完成、DOMContentLoaded 事件被触发前开始执行。</li></ul></li></ul><h5 id="提高渲染效率"><a href="#提高渲染效率" class="headerlink" title="提高渲染效率"></a>提高渲染效率</h5><p><strong>提高渲染效率：</strong></p><h6 id="减少对-DOM-操作"><a href="#减少对-DOM-操作" class="headerlink" title="减少对 DOM 操作"></a>减少对 DOM 操作</h6><ul><li><code>减少对 DOM 操作</code>：因为 JS 引擎和渲染引擎需要交流，因此大量操作 DOM 很大程度上会影响整体的性能，这里建议除非遇到不可避免的情况下，除此之外我们尽量批量处理 DOM ,并且对于一些频繁操作 DOM 的可以结合防抖节流函数进行处理。</li></ul><h6 id="事件循环、异步更新"><a href="#事件循环、异步更新" class="headerlink" title="事件循环、异步更新"></a>事件循环、异步更新</h6><ul><li><code>事件循环、异步更新</code>：我们常说 JS 是单线程的，之所以是单线程，是因为在浏览器渲染的过程中如果两个线程同时操作一个 DOM 节点，那么该谁先谁后呢，虽然多线程也有办法解决，但是 JS 毕竟是浏览器脚本语言，不需要那么复杂。由于 JS 的单线程性，有了事件循环 (Event Loop) 与异步更新策略。事件循环中的异步队列分为：macro（宏任务）队列和 micro（微任务）队列。他们的区别是，当 macro-task 出队时，任务是一个一个执行的；而 micro-task 出队时，任务一队一队执行。所以，处理 micro 队列时会逐个执行队列中的任务并把它出队，直到队列被清空。良好的利用事件循环和异步更新，可以提高浏览器的渲染效率。</li></ul><h3 id="其它补充"><a href="#其它补充" class="headerlink" title="其它补充"></a>其它补充</h3><h4 id="性能指标-amp-模型"><a href="#性能指标-amp-模型" class="headerlink" title="性能指标 &amp; 模型"></a>性能指标 &amp; 模型</h4><ul><li><strong>性能指标 &amp; 模型</strong>：<ul><li><code>性能指标</code>：<ol><li>First Paint 首次绘制(FP)：用于记录页面第一次绘制像素的时间。</li><li>First contentful paint 首次内容绘制 (FCP)：用于记录页面首次绘制文本、图片、非空白 Canvas 或 SVG 的时间。</li><li>Largest contentful paint 最大内容绘制 (LCP)：记录视窗内最大的元素绘制的时间。</li><li>First input delay 首次输入延迟 (FID)：FCP 和 TTI 之间用户首次与页面交互时响应的延迟。</li><li>Time to Interactive 可交互时间 (TTI)：指标代表着页面何时真正进入可用的状态。</li><li>Total blocking time 总阻塞时间 (TBT)：记录在 FCP 到 TTI 之间所有长任务的阻塞时间总和。</li><li>Cumulative layout shift 累积布局偏移 (CLS)：记录页面非预期的位移波动。</li></ol></li><li><code>RAIL 模型(简述)</code>：RAIL 模型由 Google 提出，RAIL 是 response （响应）、 animation（动画）、idle（浏览器空置状态）和 load（加载），从这四个模块角度来思考你的产品。如果在每个模块上，你都可以达到性能优化的目标值，那么最终用户感受到的将会是极致的体验。</li></ul></li></ul><h4 id="首屏时间"><a href="#首屏时间" class="headerlink" title="首屏时间"></a>首屏时间</h4><ul><li><strong>首屏时间</strong>：首屏时间是指页面第一屏所有资源完整展示的时间(可以理解为白屏时间 + 第一次渲染的用时)。这是一个对用户来说非常直接的体验指标，但是对于前端却是一个非常难以统计衡量的指标。上文说到了很多优化首屏时间的方法，说到首屏时间让我想起了我们学校公众号的校园码，对于这种要及时展示使用的场景，特别需要优化首屏时间，而我们学校的校园码展示出来前却需要加载很多资源。</li></ul><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><ul><li><strong>CDN 加速(内容分发网络)</strong>：CDN(content delivery network)是一组分布在多个不同地理位置的 Web 服务器。我们都知道，当服务器离用户越远时，延迟越高。CDN 就是为了解决这一问题，在多个位置部署服务器，将用户网址的内容存储下来，根据用户请求的位置选择离用户近的服务器，降低网络拥塞，提高用户访问速度和命中率，从而缩短请求时间。它主要的关键技术是内容存储和分发技术。通过实测，我的博客配置了 CDN 加速后速度有明显的提升。</li></ul><h4 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h4><ul><li><strong>性能监控</strong>：待补充</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在对于我的博客优化过程中，我使用到了 Google 的 <a href="https://developers.google.com/speed" target="_blank" rel="noopener">PageSpeed Insights</a> 工具，从初始的评分 68 优化到最终评分 99 分,如图:</p><p><img src="img/optimization/blog.jpg" alt="blog"></p><p>这篇文章总体介绍了前端性能优化的种种方法，但同时在这些方法中，有些方法不仅仅能够提高前端的性能，同时还能为服务器降低压力、降低流量的使用等等，可以说是一劳多得。</p>]]></content>
      
      
      <categories>
          
          <category> Performance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端适配(Mobile Terminal Adaptation)</title>
      <link href="/mobile.html"/>
      <url>/mobile.html</url>
      
        <content type="html"><![CDATA[<h2 id="移动端适配-mobile-terminal-adaptation"><a href="#移动端适配-mobile-terminal-adaptation" class="headerlink" title="移动端适配(mobile terminal adaptation)"></a>移动端适配(mobile terminal adaptation)</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目前移动端的屏幕大小各异,市面上各种尺寸的机型都有,而且有 1 倍屏，2 倍屏，3 倍屏之分，这对前端界面在不同设备下的呈现效果提出挑战，我们希望找到一种完美适配各种机型的方案(元素和字体能够保持一定比例随着用户屏幕尺寸变化)，在用户面前呈现想要的效果。下面这篇文章聊聊关于前端开发中移动端适配的问题。</p><h3 id="几个基本概念"><a href="#几个基本概念" class="headerlink" title="几个基本概念"></a>几个基本概念</h3><h4 id="屏幕大小"><a href="#屏幕大小" class="headerlink" title="屏幕大小"></a>屏幕大小</h4><p><strong>屏幕对角的的长度</strong>。1 英寸 = 2.54 厘米，那么一个 5 寸的手机的对角线长度就是 <code>5 X 2.54 = 12.7</code> 厘米。</p><h4 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h4><p>屏幕的<strong>像素点个数</strong>，例如：一个屏幕的分辨率为 <code>320 * 480</code> 即这个屏幕上有 <code>320 X 480</code> 个像素点。</p><h4 id="px-pixels"><a href="#px-pixels" class="headerlink" title="px(pixels)"></a>px(pixels)</h4><p><code>1px = 1inch * 1/96</code> (在一臂观察距离下，20inch)。 px 像素是 Web 开发中常用的单位。 1px 代表屏幕上一个<strong>物理像素点</strong>，在不同分辨率的设备上像素点的大小不同，同尺寸的屏幕分辨率越高，像素点越小，反之越大。</p><h4 id="pt-point"><a href="#pt-point" class="headerlink" title="pt(point)"></a>pt(point)</h4><p>是一个标准的长度单位，<code>1pt ＝ 1 / 72英寸</code>， ios 开发使用的单位。 pt 同时也是印刷行业常用单位，能够使用测量设备测得的长度。</p><h4 id="ppi-pixels-per-inch"><a href="#ppi-pixels-per-inch" class="headerlink" title="ppi(pixels per inch)"></a>ppi(pixels per inch)</h4><p>即像素密度，它标志<strong>每英寸屏幕上有多少个设备像素点</strong>，ppi 越大，屏幕的分辨率越高，显示画面细节越丰富。计算公式为：$\frac{\sqrt{(W^2+H^2)}}{S}$，其中 W 和 H 是分辨率的宽高， S 是屏幕尺寸。</p><h4 id="dpi-dot-per-inch"><a href="#dpi-dot-per-inch" class="headerlink" title="dpi(dot per inch)"></a>dpi(dot per inch)</h4><p>dpi 和 ppi 的概念相似，指打印设备<code>每英寸印刷出来的点</code>有多少个，值越高，图片越细腻。</p><h4 id="dip-device-independent-pixels"><a href="#dip-device-independent-pixels" class="headerlink" title="dip(device independent pixels)"></a>dip(device independent pixels)</h4><p>dp ，是<strong>设备独立像素</strong>，也叫逻辑像素，又称密度无关像素。它是一个逻辑单位，即无论图形在屏幕上如何缩放，它们始终都有一个不变的逻辑尺寸。不同坐标系或不同系统，会有自己对应的设备独立像素。</p><h4 id="dpr-devicePixelRatio"><a href="#dpr-devicePixelRatio" class="headerlink" title="dpr(devicePixelRatio)"></a>dpr(devicePixelRatio)</h4><p><strong>设备物理像素和设备独立像素比</strong>，即$dpr =\frac{物理像素}{css像素}$是指在理想布局宽度，使用多少个物理像素来渲染一个 css 像素。 dpr 越高，屏幕的单位尺寸内设备像素越多，显示内容越细腻。</p><h3 id="相关获取"><a href="#相关获取" class="headerlink" title="相关获取"></a>相关获取</h3><ol><li>屏幕的设备独立宽度</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dipWidth = screen.width;</span><br></pre></td></tr></table></figure><ol><li>屏幕的设备独立宽度</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dipHight = screen.height;</span><br></pre></td></tr></table></figure><ol><li>dpr</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dpr = <span class="built_in">window</span>.devicePixelRatio;</span><br></pre></td></tr></table></figure><ol><li>物理像素宽度</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> physicalWidth = dipWidth \* dpr;</span><br></pre></td></tr></table></figure><p>css 中，通过 css 中通过<code>-webkit-device-pixel-ratio</code>,<code>-webkit-min-device-pixel-ratio</code>,<code>-webkit-max-device-pixel-ratio</code>进行媒体查询。</p><ol><li>物理像素高度</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> physicalHight = dipHeight * dpr;</span><br></pre></td></tr></table></figure><h3 id="关于视口-viewport"><a href="#关于视口-viewport" class="headerlink" title="关于视口(viewport)"></a>关于视口(viewport)</h3><p>移动端涉及<strong>布局视口(Layout Viewport)、视觉视口(Visual ViewPort)和理想视口(Ideal ViewPort)</strong>。</p><ul><li><strong>布局视口(layout viewport)</strong>: 用于网⻚的布局。可以看作是 html 元素的上一级容器即顶级容器，默认情况或者将 html 元素的 width 属性设为 100% 时，会占满这个顶级容器，此时用<code>document.documentElement.clientWidth</code>获取到 html 元素的布局宽度也就是布局视口的宽度，使用媒体查询时 max-width 和 min-width 的值指的也是布局视口的宽。无论移动端浏览器是否进行了缩放、横纵切换，在⻚面初始化后，这个视口的大小将固定不变。</li></ul><blockquote><p>layout viewport 并不是整个网⻚内容，它只是移动端适配手机小屏的逻辑视口。布局视口的高度并不等于整个网⻚的高度，同时 position: fixed 的定位是基于布局视口的。</p></blockquote><ul><li><strong>可视视口(visual viewport)</strong>: 用于展示当前屏幕内容。滑动屏幕、横纵切换、缩放操作等，实际上都是对可视视口的操作。</li></ul><blockquote><p>相关操作：滑动⻚面 -&gt; 移动 visual viewport 的坐标；缩放⻚面 -&gt; 修改 visual viewport 的宽高；横纵屏切换 -&gt; 调换 visual viewport 的宽高，并映射。</p></blockquote><ul><li><strong>理想视口(Ideal ViewPort)</strong>: 是屏幕分辨率的值，即对设备来说是最理想的布局视口，用户不需要对页面进行缩放就能完美的显示整个页面。最简单的做法就是使布局视口宽度设置为手机屏幕的宽度。通过设置<code>&lt;meta name = &quot;viewport&quot; content = &quot;width = device-width, initial-scale = 1.0&quot;&gt;</code>实现。</li></ul><h3 id="关于-lt-meta-gt-标签"><a href="#关于-lt-meta-gt-标签" class="headerlink" title="关于&lt;meta&gt;标签"></a>关于<code>&lt;meta&gt;</code>标签</h3><p><code>&lt;meta&gt;</code>标签中定义了一些元数据信息，通过设置<code>&lt;meta name = &quot;viewport&quot;&gt;</code>，提供有关视口初始大小的信息，供移动设备使用。属性值为:</p><div class="table-container"><table><thead><tr><th>属性</th><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>width</code></td><td>数值 / <code>device-width</code></td><td>视口宽度</td></tr><tr><td><code>height</code></td><td>数值 / <code>device-height</code></td><td>视口高度</td></tr><tr><td><code>initial-scale</code></td><td>0.0 ~ 10.0</td><td>设备宽度与视口大小间缩放比例(初始值)</td></tr><tr><td><code>maximum-scale</code></td><td>0.0 ~ 10.0</td><td>缩放最大值</td></tr><tr><td><code>minimum-scale</code></td><td>0.0 ~ 10.0</td><td>缩放最小值</td></tr><tr><td><code>user-scalable</code></td><td>Boolean 类型</td><td>能否缩放页面，默认<code>yes｜1</code></td></tr></tbody></table></div><h3 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h3><h4 id="多媒体查询-media"><a href="#多媒体查询-media" class="headerlink" title="多媒体查询@media"></a>多媒体查询@media</h4><p><code>多媒体查询@media</code>：通过给不同分辨率的设备编写不同的样式实现响应式布局，解决不同设备不同分辨率之间的兼容，一般是 PC、平板、手机设备之间较大的分辨率差异。优点是能够实现不仅仅是样式伸缩变换的样式改变。缺点是要匹配足够多的设备与屏幕，工作量大；达到断点变化明显，用户体验不好。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 屏幕可视窗口尺寸小于 480 像素时 font-size: 16px</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 屏幕可视窗口尺寸大于 480 像素时 font-size: 24px;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vw、vh、vmin、vmax"><a href="#vw、vh、vmin、vmax" class="headerlink" title="vw、vh、vmin、vmax"></a>vw、vh、vmin、vmax</h4><p><code>vw、vh、vmin、vmax</code>：<code>vw</code>：是 viewport width 的简写，是可视区域尺寸的相对单位，1vw 相当于 1% 的可视区域的宽度；<code>vh</code>: 是 viewport height 的简写，是可视区域尺寸的相对单位， 1vh 相当于 1% 的可视区域的高度；<code>vmin</code>: 当前 vh 和 vw 的最小值；<code>vmax</code>：当前 vh 和 vw 的最大值。使得元素能够随视口大小自适应调整，是纯 css 移动端适配方案，不存在脚本依赖问题。但是存在一些兼容性问题，在 Android 4.4 / iOS 8 以下不支持。</p><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><p><code>rem</code>：rem 是相对长度单位， rem 方案中的样式设计为相对于根元素(html) font-size 计算值的倍数。在布局时使用 rem 单位布局，达到自适应的目的，实现弹性布局。但是 rem 布局存在以下问题：不是纯 css 移动适配方案，需要引入 js 脚本 在头部内嵌一段 js 脚本监听分辨率的变化来动态改变根元素的字体大小，css 样式和 js 代码有一定耦合，并且必须将改变 font-size 的代码放在 css 样式前。同时浏览器渲染最小单位是像素，元素根据屏幕宽度自适应，通过 rem 计算后可能会出现小数像素，浏览器会对这部分小数四舍五入，按照整数渲染。会出现<strong>小数像素</strong>的问题，我们可以指定最小转换像素，对于比较小的像素，不转换为 rem 或 vw 解决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize =</span><br><span class="line">  <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">750</span> + <span class="string">"px"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>通过@media 改变 font-size 值，和使用 vw / wh 设置 font-size 的大小同样可以改变上面讲到的 rem 相对长度</p></blockquote><h4 id="px-自动转换为-vw"><a href="#px-自动转换为-vw" class="headerlink" title="px 自动转换为 vw"></a>px 自动转换为 vw</h4><p><code>px自动转换为vw</code>：设计师一般给宽度大小为 750px 的视觉稿，我们采用 vw 方案的话，需要将对应的元素大小单位 px 转换为 vw 单位，这是一项影响开发效率（需要手动计算将 px 转换为 vw）且不利于后续代码维护的工作。这时可以使用 <a href="https://github.com/evrone/postcss-px-to-viewport" target="_blank" rel="noopener">postcss-px-to-viewport</a> 插件，将 px 自动转换为 vw。</p><h3 id="一些适配问题"><a href="#一些适配问题" class="headerlink" title="一些适配问题"></a>一些适配问题</h3><ol><li><strong>1px 的问题</strong>：1 px 问题指的是在视觉设计师眼里的 1px 是指设备像素 1px，而如果我们直接写 css 的大小 1px，那在 dpr = 2 时，则等于 2px 设备像素，dpr = 3 时，等于 3px 设备像素。所以对于要求处理 1px 的场景，我们要进行特殊处理。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 解决方案，使用 transform: scale(0.5) + :before / :after</span><br><span class="line"><span class="selector-class">.calss</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  &amp;::after &#123;</span><br><span class="line">    <span class="selector-tag">content</span>: "";</span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line">    <span class="selector-tag">bottom</span>: 0<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">left</span>: 0<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">right</span>: 0<span class="selector-tag">px</span>;</span><br><span class="line">    <span class="selector-tag">border-top</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#666</span>;</span><br><span class="line">    <span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(0<span class="selector-class">.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>图片高清的问题</strong>：适用普通屏的图片在高清屏中展示模糊，适用高清屏的图片在普通屏中，展示缺少色差、没有锐利度，并且浪费带宽。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 解决方案，对不同 dpr 屏幕使用不同 image 图片 */</span></span><br><span class="line"><span class="selector-attr">[data-dpr=<span class="string">"1"</span>]</span> <span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(image@<span class="number">1</span>x.jpg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-dpr=<span class="string">"2"</span>]</span> <span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(image@<span class="number">2</span>x.jpg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-dpr=<span class="string">"3"</span>]</span> <span class="selector-class">.class</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(image@<span class="number">3</span>x.jpg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE</title>
      <link href="/javaee.html"/>
      <url>/javaee.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaEE"><a href="#JavaEE" class="headerlink" title="JavaEE"></a>JavaEE</h2><h3 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title="Lecture 1"></a>Lecture 1</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p><img src="img/javaee/spring.png" alt="spring"></p><h3 id="Lecture-2"><a href="#Lecture-2" class="headerlink" title="Lecture 2"></a>Lecture 2</h3><h4 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h4><ul><li>一个复杂而又简洁的 <code>javabean</code> 工厂,管理 <code>bean</code> 的创建和依赖</li><li>很普通又很实用的框架，提取了大量实际开发中通用的设计思想和模式，抽象而成的一个框架</li><li>轻量级的、非侵入式（不依赖 <code>Spring API</code> ）的应用框架</li><li>集成已存在的成熟应用解决方案，开发简单高效</li></ul><p>优点：</p><ol><li>低侵入式设计</li><li>独立于各种应用服务器</li><li><code>Spring</code> 的 <code>DI</code> 容器，提高组件之间的解耦</li><li><code>SpringAOP</code> 提供通用任务的集中统一处理（安全、事务、日志等），实现更好的代码复用</li><li><code>Spring</code> 的 <code>ORM 和 DAO</code> 提供了与第三方持久层框架的良好整合</li><li>高度开放，可以自由选用 <code>Spring</code> 框架的部分或全部</li></ol><h5 id="Bean-容器画像"><a href="#Bean-容器画像" class="headerlink" title="Bean 容器画像"></a>Bean 容器画像</h5><p><img src="img/javaee/container.png" alt="container"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"group"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"zust.se.Group"</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">"id"</span> value=<span class="string">"100"</span>/&gt;</span><br><span class="line">    &lt;property name=<span class="string">"name"</span> value=<span class="string">"GroupA/&gt;</span></span><br><span class="line"><span class="string">&lt;/bean&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory ac=<span class="keyword">new</span> BeanFactory(<span class="string">"bean.xml"</span>);</span><br><span class="line">Group group=(Group) ac.getBean(<span class="string">"group"</span>);</span><br><span class="line">System.out.printIn(JSON.toJSONString(group));</span><br></pre></td></tr></table></figure><h5 id="IOC-和-DI"><a href="#IOC-和-DI" class="headerlink" title="IOC 和 DI"></a>IOC 和 DI</h5><p>由容器来管理对象之间的依赖关系，“控制反转”或“依赖注入”</p><p><code>IOC</code>（Inversion of Control）：由容器来负责控制对象的生命周期和对象间的关系<br><code>DI</code>（Dependency Injection）：在系统运行中，由容器动态的向某个对象提供它所需要的其他对象</p><p><strong>DI 注入的两种方式:</strong></p><ul><li><p>设值注入<br>​<code>IOC</code> 容器使用属性的 <code>setter</code> 方法来注入被依赖的实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;property name=<span class="string">"userDao"</span> ref=<span class="string">"userDao"</span>/&gt;</span><br></pre></td></tr></table></figure></li><li><p>构造注入<br><code>IOC</code> 容器使用构造器来注入被依赖的实例，按构造函数参数顺序指定对应要注入值， 用 <code>index</code> 属性指定顺序，从 0 开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;constructor-arg ref=<span class="string">"db"</span>/&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Lecture-3"><a href="#Lecture-3" class="headerlink" title="Lecture 3"></a>Lecture 3</h3><h4 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h4><p><code>Spring</code> 通过 <code>IoC</code> 容器来管理对象的实例化和初始化，以及对象从创建到销毁的整个生命周期</p><h4 id="创建-bean-实例"><a href="#创建-bean-实例" class="headerlink" title="创建 bean 实例"></a>创建 bean 实例</h4><ul><li><p><code>BeanFactory</code> 容器<br><code>BeanFactory</code> 是一个管理 <code>Bean</code> 的工厂，它主要负责初始化各种 <code>Bean</code>，并调用它们的生命周期方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Resource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">BeanFactory factory = <span class="keyword">new</span> XmlBeanFactory(resource);</span><br></pre></td></tr></table></figure></li><li><p><code>ApplicationContext</code> 容器<br><code>ApplicationContext</code> 继承了 <code>BeanFactory</code> 接口，是 <code>BeanFactory</code> 的拓展，增加了例如 AOP、国际化、事件支持等功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(String configLocation);</span><br></pre></td></tr></table></figure></li><li><p>Web 服务器实例化<br><code>ApplicationContext</code> 容器通常使用基于 <code>ContextLoaderListener</code> 实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">  &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</span><br><span class="line">  &lt;!--加载spring目录下的applicationContext.xml文件--&gt;</span><br><span class="line">  &lt;param-value&gt;</span><br><span class="line">      classpath:spring/applicationContext.xml</span><br><span class="line">  &lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br><span class="line">&lt;!--指定以ContextLoaderListener方式启动Spring容器--&gt;</span><br><span class="line">&lt;listener&gt;</span><br><span class="line">  &lt;listener-<span class="class"><span class="keyword">class</span>&gt;</span></span><br><span class="line"><span class="class">      <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span></span></span><br><span class="line"><span class="class">  &lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h4><ul><li><p>注入普通属性<br><img src="img/javaee/3-1.png" alt="3-1"></p></li><li><p>注入 bean 引用<br><img src="img/javaee/3-2.png" alt="3-2"></p></li><li><p>bean 的自动装配<br><img src="img/javaee/3-3.png" alt="3-3"></p></li><li><p>注入嵌套 bean：不被 spring 访问，将嵌套的 bean 注入 property 属性中</p></li><li><p>注入集合类型值：<br><img src="img/javaee/3-4.png" alt="3-4"></p></li></ul><h4 id="bean-的作用域-scope"><a href="#bean-的作用域-scope" class="headerlink" title="bean 的作用域 scope"></a>bean 的作用域 scope</h4><ol><li><code>singleton</code>（默认）: 单例模式，在整个容器中只有一个实例【可跟踪进行生命周期管理】</li><li><p><code>prototype</code>：原型模式 ，每次通过 getBean 获取时产生一个新的实例</p></li><li><p><code>request</code>：每次 http 请求产生一个新的实例，web 应用。须在 web.xml 中配置相应的 Listener 或 filter</p></li><li><code>Session</code>：每次 http session 产生一个新的实例 ，web 应用</li></ol><h4 id="bean-的生命周期"><a href="#bean-的生命周期" class="headerlink" title="bean 的生命周期"></a>bean 的生命周期</h4><ul><li><p>注入之后——init-method</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"chinese"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.j2ee.service.impl.Chinese"</span></span><br><span class="line">init-method=<span class="string">"init"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"axe"</span> ref=<span class="string">"steelAxe"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li><li><p>销毁之前——destroy-method</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"chinese"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.j2ee.service.impl.Chinese"</span></span><br><span class="line">destroy-method=<span class="string">"destroy"</span>&gt;</span><br><span class="line">&lt;property name=<span class="string">"axe"</span> ref=<span class="string">"steelAxe"</span>/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="Spring-国际化"><a href="#Spring-国际化" class="headerlink" title="Spring 国际化"></a>Spring 国际化</h4><p>使用 MessageSource 接口</p><h4 id="注解装配-Bean"><a href="#注解装配-Bean" class="headerlink" title="注解装配 Bean"></a>注解装配 Bean</h4><ol><li><code>@Component</code>:注解描述 Spring 中的 Bean，但它是一个泛化的概念，仅仅表示一个组件（Bean），并且可以作用在任何层次</li><li><code>@Repository</code>:用于将数据访问层（DAO 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同</li><li><code>@Service</code>:通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同</li><li><code>@Controller</code>:通常作用在控制层（Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同</li><li><code>@Autowired</code>:可以应用到 Bean 的属性变量、属性的 setter 方法、非 setter 方法及构造函数等，配合对应的注解处理器完成 Bean 的自动配置工作。默认按照 Bean 的类型进行装配</li><li><code>@Resource</code>:与 Autowired 相同，区别在于 @Autowired 按照 Bean 类型装配，而 @Resource 按照 Bean 实例名称进行装配</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--使用context命名空间，通知spring扫描指定目录，进行注解的解析 --&gt;</span><br><span class="line">    &lt;context:component-scan</span><br><span class="line">        base-<span class="keyword">package</span>=<span class="string">"net.biancheng"</span> /&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;u.id&#125;"</span>) <span class="comment">// 通过@Value将配置文件中u.id的值注入给user的id属性</span></span><br><span class="line">&lt;contect:component-scan base-<span class="keyword">package</span>=<span class="string">"se.zust"</span> /&gt;</span><br></pre></td></tr></table></figure><p>生命周期（在类的成员方法定义语句前注解）</p><ul><li><code>@PostConstruct</code>：注解的方法将会在对象完成构造且依赖注入完成后被自动调用</li><li><code>@PreDestroy</code>：注解的方法将在 bean 对象销毁之前被自动调用</li></ul><h4 id="Java-日志配置（log4j）"><a href="#Java-日志配置（log4j）" class="headerlink" title="Java 日志配置（log4j）"></a>Java 日志配置（log4j）</h4><p><code>resources</code> 新建 <code>log4j.properties</code><br><code>pom.xml</code> 添加依赖<br>为类添加 <code>logger</code> 静态属性</p><p><img src="img/javaee/3-5.png" alt="3-5"></p><p>用 logger 输出日志：<code>logger.debug、logger.info、logger.warn、logger.error、logger.fetal</code></p><h4 id="Spring-测试"><a href="#Spring-测试" class="headerlink" title="Spring 测试"></a>Spring 测试</h4><ul><li><p>JUnit：Java 语言的单元测试框架<br>​ 在任意方法前加@Test 注解</p></li><li><p>容器测试</p><ol><li>测试类前添加注解@RunWith 和@ContextConfiguration</li><li>通过@Resource 给测试类注入容器中的 bean</li></ol></li></ul><p><img src="img/javaee/3-6.png" alt="3-6"></p><h3 id="Lecture-4"><a href="#Lecture-4" class="headerlink" title="Lecture 4"></a>Lecture 4</h3><h4 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h4><ul><li>横向抽取机制（动态代理），取代了传统纵向继承机制的重复性代码</li><li>可以通过预编译方式和运行期间动态代理实现在不修改源代码的情况下给程序动态统一添加功能</li><li>主要作用是分离功能性需求和非功能性需求，使开发人员可以集中处理某一个关注点或者横切逻辑，减少对业务代码的侵入，增强代码的可读性和可维护性</li><li>适用于：日志管理、事务处理、权限控制、异常处理…</li></ul><p><strong>概念：</strong></p><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Joinpoint（连接点）</td><td>指可以被动态代理拦截目标类的方法，表示“在什么地方做”</td></tr><tr><td>Pointcut（切入点）</td><td>指要对哪些 Joinpoint 进行拦截，即被拦截的连接点</td></tr><tr><td>Advice（通知）/增强处理</td><td>对切入点增强的内容，表示“具体怎么做”，before、after…</td></tr><tr><td>Target（目标）</td><td>指代理的目标对象</td></tr><tr><td>Weaving（织入）</td><td>指把增强代码应用到目标上，生成代理对象的过程</td></tr><tr><td>Proxy（代理）</td><td>指生成的代理对象</td></tr><tr><td>Aspect（切面）</td><td>一个关注点的模块化，横切多个对象，切入点和通知的结合</td></tr><tr><td>关注点</td><td>要做什么，公共功能，如：事务管理</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>通知</th><th>说明</th></tr></thead><tbody><tr><td>before（前置通知）</td><td>通知方法在目标方法调用之前执行</td></tr><tr><td>after（后置通知）</td><td>通知方法在目标方法返回或异常后调用</td></tr><tr><td>after-returning（返回后通知）</td><td>通知方法会在目标方法返回后调用</td></tr><tr><td>after-throwing（抛出异常通知）</td><td>通知方法会在目标方法抛出异常后调用</td></tr><tr><td>around（环绕通知）</td><td>通知方法会将目标方法封装起来</td></tr></tbody></table></div><h5 id="基于-xml-开发-aop"><a href="#基于-xml-开发-aop" class="headerlink" title="基于 xml 开发 aop"></a>基于 xml 开发 aop</h5><ol><li>在 <code>xml</code> 中导入 <code>Spring aop</code> 命名空间</li><li>定义切面（将 <code>bean</code> 转化为切面）</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:aspect id=<span class="string">"myAspect"</span> ref=<span class="string">"aBean"</span>&gt;</span><br><span class="line">        ...</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><blockquote><p>其中，id 用来定义该切面的唯一表示名称，ref 用于引用普通的 Spring Bean</p></blockquote><ol><li>定义切入点</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:pointcut id=<span class="string">"myPointCut"</span></span><br><span class="line">        expression=<span class="string">"execution(* net.biancheng.service.*.*(..))"</span>/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure><blockquote><p>id 用于指定切入点的唯一标识名称，execution 用于指定切入点关联的切入点表达式</p></blockquote><ol><li>定义通知</li></ol><p><code>AspectJ</code> 支持 5 种类型的 <code>advice</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:aspect id=<span class="string">"myAspect"</span> ref=<span class="string">"aBean"</span>&gt;</span><br><span class="line">    &lt;!-- 前置通知 --&gt;</span><br><span class="line">    &lt;aop:before pointcut-ref=<span class="string">"myPointCut"</span> method=<span class="string">"..."</span>/&gt;</span><br><span class="line">    &lt;!-- 后置通知 --&gt;</span><br><span class="line">    &lt;aop:after-returning pointcut-ref=<span class="string">"myPointCut"</span> method=<span class="string">"..."</span>/&gt;</span><br><span class="line">    &lt;!-- 环绕通知 --&gt;</span><br><span class="line">    &lt;aop:around pointcut-ref=<span class="string">"myPointCut"</span> method=<span class="string">"..."</span>/&gt;</span><br><span class="line">    &lt;!-- 异常通知 --&gt;</span><br><span class="line">    &lt;aop:after-throwing pointcut-ref=<span class="string">"myPointCut"</span> method=<span class="string">"..."</span>/&gt;</span><br><span class="line">    &lt;!-- 最终通知 --&gt;</span><br><span class="line">    &lt;aop:after pointcut-ref=<span class="string">"myPointCut"</span> method=<span class="string">"..."</span>/&gt;</span><br><span class="line">    ....</span><br><span class="line">&lt;/aop:aspect&gt;</span><br></pre></td></tr></table></figure><h5 id="基于注解开发-aop"><a href="#基于注解开发-aop" class="headerlink" title="基于注解开发 aop"></a>基于注解开发 aop</h5><div class="table-container"><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>@Aspect</td><td>用于定义一个切面</td></tr><tr><td>@Pointcut</td><td>用于定义一个切入点</td></tr><tr><td>@Before</td><td>用于定义前置通知，相当于 BeforeAdvice</td></tr><tr><td>@AfterReturning</td><td>用于定义后置通知，相当于 AfterReturningAdvice</td></tr><tr><td>@Around</td><td>用于定义环绕通知，相当于 MethodInterceptor</td></tr><tr><td>@AfterThrowing</td><td>用于定义抛出通知，相当于 ThrowAdvice</td></tr><tr><td>@After</td><td>用于定义最终 final 通知，不管是否异常，该通知都会执行</td></tr></tbody></table></div><ol><li>在 <code>XML</code> 文件中添加以下内容启动<code>@AspectJ</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy&gt;</span><br></pre></td></tr></table></figure><ol><li>定义切面</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectModule</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义切入点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求：方法必须是private，返回值类型为void，名称自定义，没有参数</span></span><br><span class="line"><span class="meta">@Pointcut</span>(<span class="string">"execution(*net.biancheng..*.*(..))"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">myPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>定义通知</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Before</span>(<span class="string">"myPointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeAdvice</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Lecture-5"><a href="#Lecture-5" class="headerlink" title="Lecture 5"></a>Lecture 5</h3><h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><p><code>ORM</code> 是 <code>Object Relational Mapping</code> 的缩写，“对象关系映射”，它解决了对象和关系型数据库之间的数据交互问题</p><div class="table-container"><table><thead><tr><th>数据库</th><th>类/对象</th></tr></thead><tbody><tr><td>表（table）</td><td>类（class）</td></tr><tr><td>表中的记录（record，也称行）</td><td>对象（object）</td></tr><tr><td>表中的字段（field，也称列）</td><td>对象中的属性（attribute）</td></tr></tbody></table></div><p>ORM 通过使用描述对象和数据库之间映射的，将 java 程序中的对象自动持久化到关系数据库中</p><p>在业务逻辑层和呈现层中，我们是面向对象的。当对象信息发生变化的时候，我们需要把对象的信息保存在关系数据库中</p><blockquote><p>（避免数据访问层代码重复）</p></blockquote><h4 id="JPA"><a href="#JPA" class="headerlink" title="JPA"></a>JPA</h4><p><code>Java Persistence API</code>，就是 java 持久化 api,是基于 ORM 的一种规范</p><p><strong>开发步骤：</strong></p><ul><li>创建 <code>maven</code> 项目</li><li>加入 <code>hibernate-entitymanager</code> 依赖包</li><li>加入数据库 <code>mysql-connector-java</code> 依赖包</li><li>在 <code>resources/META-INF</code> 中添加 <code>persistence.xml</code> 配置 JPA，配好实体类的包扫描， 在实体类包中为每张表对应</li></ul><p><img src="img/javaee/5-1.png" alt="5-1"></p><ul><li>建立一个实体类 <code>JavaBean</code></li><li>创建 <code>javabean</code></li><li>为数据库字段添加对应属性</li><li>在类前面添加@Entity 和@Table(“”)注解属性</li><li>在属性前添加相应注解</li></ul><p><img src="img/javaee/5-2.png" alt="5-2"></p><ol><li>表注解：在实体类定义语句前注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line">​<span class="meta">@Table</span>(name=<span class="string">"tableName"</span>)</span><br></pre></td></tr></table></figure><ol><li>主键：在主键对应属性的 getter 方法前注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Id</span></span><br><span class="line"><span class="meta">@GeneratedValue</span>(strategy=GenerationType.IDENTITY)</span><br><span class="line"><span class="meta">@Column</span>(name = <span class="string">"keyName"</span>)</span><br></pre></td></tr></table></figure><ol><li>普通属性：在对应属性的 getter 方法前注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​<span class="meta">@Column</span>(name = <span class="string">"propName"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Basic</span>(fetch=FetchType.LAZY|EAGER)</span><br><span class="line"><span class="comment">// LAZY：懒加载</span></span><br><span class="line"><span class="comment">// EAGER：立即加载，默认值</span></span><br></pre></td></tr></table></figure><p><strong>JPA 操作数据库:</strong></p><ul><li>利用 <code>jpa</code> 配置创建 <code>entityManager</code></li><li>利用 <code>entityManager</code> 的接口方法操作数据库</li></ul><div class="table-container"><table><thead><tr><th>单元</th><th>描述</th></tr></thead><tbody><tr><td>EntityManagerFactory</td><td>EntityManager 的工厂类,它创建并管理多个 EntityManager 实例</td></tr><tr><td>EntityManager</td><td>这是一个接口，它管理的持久化操作的对象</td></tr><tr><td>Entity</td><td>实体，是持久性对象，是存储在数据库中的记录</td></tr><tr><td>EntityTransaction</td><td>与 EntityManager 一对一关系；对于每一个 EntityManager，由 EntityTransaction 类维护</td></tr><tr><td>Persistence</td><td>这个类包含静态方法来获取 EntityManagerFactory 实例</td></tr><tr><td>Query</td><td>该接口由每个 JPA 供应商，能够获得符合标准的关系对象</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过Persistence获取EntityManagerFactory，</span></span><br><span class="line"><span class="comment"> * 传入参数对应配置文件中持久化单元persistence-unit的name</span></span><br><span class="line"><span class="comment"> * 通过EntityManagerFactory创建EntityManager</span></span><br><span class="line"><span class="comment"> * 获取EntityTransaction</span></span><br><span class="line"><span class="comment"> * 开启事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">EntityManagerFactory entityManagerFactory;</span><br><span class="line">EntityManager entityManager;</span><br><span class="line">entityManagerFactory =</span><br><span class="line">        Persistence.createEntityManagerFactory(<span class="string">"jpa"</span>);</span><br><span class="line">entityManager = entityManagerFactory.createEntityManager();</span><br><span class="line">entityManager.getTransaction().begin();</span><br><span class="line"><span class="comment">//数据操作代码</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提交事务</span></span><br><span class="line"><span class="comment"> * 关闭entityManager</span></span><br><span class="line"><span class="comment"> * 关闭entityManagerFactory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">entityManager.getTransaction().commit();</span><br><span class="line">entityManager.close();</span><br><span class="line">entityManagerFactory.close();</span><br></pre></td></tr></table></figure><p><strong>持久化对象状态：</strong></p><ul><li><code>瞬时对象(New Objects)</code>：使用 new 操作符初始化的对象不是立刻就持久的。它们的状态是瞬时的，也就是说它们没有任何跟数据库表相关联的行为，只要应用不再引用这些对象，它们的状态将会丢失，并由垃圾回收机制回收。</li><li><code>托管对象(Manage Objects)</code>：持久实例是任何具有数据库标识的实例。它有持久化管理器 EntityManager 统一管理，持久实例是在事务中进行操作的——它们的状态在事务结束时同数据库进行同步。当事务提交时，通过执行 SQL 的 INSERT、UPDATE 和 DELETE 语句把内存中的状态同步到数据库中。</li><li><code>离线对象(Detached Objects)</code>：EntityManager 关闭之后，持久化对象就变为离线对象。离线表示这个对象不能再与数据库保持同步，它们不再受 JPA 管理。</li></ul><p><strong>持久化对象生命周期：</strong></p><p><img src="img/javaee/5-3.png" alt="5-3"></p><h3 id="Lecture-6"><a href="#Lecture-6" class="headerlink" title="Lecture 6"></a>Lecture 6</h3><h4 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h4><p><code>@Data</code> 注解生成实体类属性的 <code>getter/setter</code> 等方法</p><p>用@Setter、@Getter 代替@Data</p><blockquote><p>@Data 注解不仅帮我们实现了生成了 getter/setter 同时还重写了 equals(Object other) 和 hashCode()方法， Lombok 会将 Project 类中的 List projects 当做是 hashCode 计算的一部分（同理，equals,toString 也会存在同样的问题），而如果我的项目中出现循环引用，这就会导致死循环，最终就会抛出 StackOverFlowError</p></blockquote><h4 id="单表映射"><a href="#单表映射" class="headerlink" title="单表映射"></a>单表映射</h4><p>双向一对一关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OneToOne</span>(optional = <span class="keyword">true</span>, cascade = CascadeType.ALL)</span><br><span class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"id_card_id"</span>)</span><br><span class="line"><span class="keyword">private</span> TidCard tidCard;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OneToOne</span>(cascade = CascadeType.ALL, mappedBy = <span class="string">"tidCard"</span>)</span><br><span class="line"><span class="keyword">private</span> Tuser tuser;</span><br></pre></td></tr></table></figure><h4 id="多表映射"><a href="#多表映射" class="headerlink" title="多表映射"></a>多表映射</h4><p>双向一对多关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OneToMany</span>(cascade = CascadeType.ALL,fetch =FetchType.LAZY,mappedBy = <span class="string">"tuser"</span>)</span><br><span class="line"><span class="keyword">private</span> Set&lt;TcreditCard&gt; tcreditCards;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ManyToOne</span>(fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@JoinColumn</span>(name=<span class="string">"user_id"</span>,insertable = <span class="keyword">false</span>,updatable = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> Tuser tuser;</span><br></pre></td></tr></table></figure><h4 id="级联-cascade"><a href="#级联-cascade" class="headerlink" title="级联 cascade"></a>级联 cascade</h4><p>两个对象之间的操作联动关系，对一个对象执行了操作之后，对其指定的级联对象也需要执行相同的操作</p><p><code>CascadeType. PERSIST</code> 级联持久化 ( 保存 ) 操作<br><code>CascadeType. MERGE</code> 级联更新 ( 合并 ) 操作<br><code>CascadeType. REFRESH</code> 级联刷新操作，只会查询获取操作<br><code>CascadeType. REMOVE</code> 级联删除操作<br><code>CascadeType. ALL</code> 级联以上全部操作</p><h3 id="Lecture-7"><a href="#Lecture-7" class="headerlink" title="Lecture 7"></a>Lecture 7</h3><h4 id="hql"><a href="#hql" class="headerlink" title="hql"></a>hql</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Query query = entityManager.createQuery(</span><br><span class="line">    <span class="string">"from User user where user.name like 'J%'"</span>);</span><br><span class="line">List&lt;User&gt; users = query. getResultList();</span><br></pre></td></tr></table></figure><p><strong>hql 步骤：</strong></p><ol><li>获取 <code>JPA</code> 的 <code>entityManager</code> 对象</li><li>编写 <code>HQL</code> 语句</li><li><code>entityManager.createQuery(HQL)</code>创建 <code>Query</code> 对象</li><li><code>query.setXXX</code> 设置查询参数</li><li><code>query. getResultList()</code>得到查询结果（持久化实体集）</li></ol><h3 id="Lecture-8"><a href="#Lecture-8" class="headerlink" title="Lecture 8"></a>Lecture 8</h3><p><strong>步骤：</strong></p><ul><li>创建 <code>maven</code> 项目</li><li>添加 <code>MyBatis</code> 依赖</li><li>在 <code>resources</code> 下创建 <code>jdbc.properties</code>（可以是其他名字）</li><li>在 <code>resources</code> 下创建 <code>SqlMapper.xml</code>（可以是其他名字）</li><li>在 <code>entity</code> 包中创建 <code>POJO</code>（不一定与表对应）</li><li>在 <code>dao</code> 包中创建 <code>mapper</code> 接口</li><li>在 <code>mapper</code> 包中创建 <code>mapper</code> 配置文件，文件中每个 select 的 id 与 mapper 接口中的一个方法对应</li><li>编写测试类进行测试</li></ul><p><strong>MyBatis 接口方法：</strong></p><p><img src="img/javaee/8-1.png" alt="8-1"></p><p><strong>配置：</strong></p><p><img src="img/javaee/8-2.png" alt="8-2"></p><p><strong>测试：</strong></p><p><img src="img/javaee/8-3.png" alt="8-3"></p><p><strong>#{} 占位符 、${} 拼接符：</strong></p><ul><li><code>#{}</code> 为参数占位符 ?，即 sql 预编译，能防止 sql 注入，有‘ ’单引号，建议多使用</li><li><code>${}</code> 为字符串替换，即 sql 拼接，不能防止 sql 注入，无单引号；表名，orderby 必须用</li></ul><h4 id="JPA、MyBatis-对比"><a href="#JPA、MyBatis-对比" class="headerlink" title="JPA、MyBatis 对比"></a>JPA、MyBatis 对比</h4><p><strong>Hibernate：</strong></p><blockquote><p>目前最流行的 ORM 框架，设计灵巧,文档丰富(完全自动操作)，只是性能不好控制(自己去控制性能,不是很好控制)。Hibernate 是一个完整的 ORM 框架,常规 CRUD 我们不需要写一句 SQL;各大 ORM 框架实现这个规范。可以自动建表。</p></blockquote><p><strong>MyBatis:</strong></p><blockquote><p>允许开发人员直接编写 SQL(更好灵活)。并不是一个完整的 ORM 框架,因为我们还需要自己去写全部 SQL。不是完整的 ORM,程序员需要自己去写全部的 SQL,可以进行更为细致的 SQL 优化，轻量级框架，学习成本低，性能好控制。不能自动建表。<br>SQL 映射框架，将 SQL 结果与对象进行映射<br>半自动：开发人员写 SQL，通过 iBatis 映射成对象</p></blockquote><p><strong>两者对比：</strong><code>MyBatis</code> 是一个小巧、方便、高效、简单、直接、半自动化的持久层框架，<code>JPA</code>是一个强大、方便、高效、复杂、间接、全自动化的持久层框架规范</p><h3 id="Lecture-8-2"><a href="#Lecture-8-2" class="headerlink" title="Lecture 8-2"></a>Lecture 8-2</h3><h4 id="Spring-Data"><a href="#Spring-Data" class="headerlink" title="Spring Data"></a>Spring Data</h4><p>Spring 的一个子项目。用于简化数据库访问，支持 NoSQL 和关系数据存储。其主要目标是使数据库的访问变得方便快捷</p><p><img src="img/javaee/8-4.png" alt="8-4"></p><h5 id="JpaRepository"><a href="#JpaRepository" class="headerlink" title="JpaRepository"></a>JpaRepository</h5><ul><li><code>List findAll();</code> //查找所有实体</li><li><code>List findAll(Sort sort);</code> //排序、查找所有实体</li><li><code>List save(Iterable&lt;? extends T&gt; entities);</code> //保存集合</li><li><code>void flush();</code> //执行缓存与数据库同步</li><li><code>T saveAndFlush(T entity);</code> //强制执行持久化</li><li><code>void deleteInBatch(Iterable entities);</code> //删除一个实体集合</li></ul><p><img src="img/javaee/8-5.png" alt="8-5"></p><h3 id="Lecture-9"><a href="#Lecture-9" class="headerlink" title="Lecture 9"></a>Lecture 9</h3><h4 id="Web-MVC-演进"><a href="#Web-MVC-演进" class="headerlink" title="Web MVC 演进"></a>Web MVC 演进</h4><ol><li><code>jsp+bean</code></li><li>标准 <code>MVC</code></li><li><code>Web MVC</code>（请求-响应，前后端分离）</li></ol><p><img src="img/javaee/mvc.png" alt="mvc"></p><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><p>一种基于 <code>Java</code> 的实现了 <code>W</code>eb MVC<code>设计模式的请求驱动类型的轻量级</code>Web<code>框架，即使用了</code>MVC<code>架构模式的思想，将</code>Web<code>层进行职责解耦 基于请求驱动指的就是使用请求-响应模型。</code>Spring Web MVC<code>简化日常</code>Web` 开发，支持本地化（Locale）解析、主题（Theme）解析及文件上传等；提供了非常灵活的数据验证、格式化和数据绑定机制；提供了强大的约定大于配置（惯例优先原则）的契约式编程支持</p><ul><li>前端控制器：<code>DispatcherServlet</code></li><li>应用控制器：<code>映射管理器(Handler Mapping)+视图解析器(View Resolver)</code></li><li>页面控制器：<code>Controller</code> （可以实现 Controller 接口，也可以是 POJO）</li></ul><p><strong>开发步骤：</strong></p><ol><li>新建 <code>maven</code> 项目，补全项目结构</li><li>添加 <code>SpringMVC</code> 包依赖及 <code>jetty</code> 配置</li><li>修改 <code>web.xml</code>，添加 <code>springmvc</code> 控制器配置</li><li>在 <code>WEB-INF</code> 下添加 <code>SpringMVC</code> 的配置文件（包扫描及 <code>resolver</code> 配置）</li></ol><p><strong>规划用户请求:</strong></p><ol><li>开发 <code>controller</code></li><li>开发视图（jsp）</li><li><code>clean jetty:run -Djetty.port=8088</code> 编译启动 web 站点</li><li>测试站点</li></ol><h3 id="Lecture-10"><a href="#Lecture-10" class="headerlink" title="Lecture 10"></a>Lecture 10</h3><h4 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h4><p><strong>web.xml:</strong><br><code>Spring MVC</code> 是基于 <code>Servlet</code> 的，<code>DispatcherServlet</code> 是整个 <code>Spring MVC</code> 框架的核心，主要负责截获请求并将其分派给相应的处理器处理。所以配置 <code>Spring MVC</code>，首先要定义 <code>DispatcherServlet</code></p><ul><li>部署 <code>DispatcherServlet</code></li><li>表示容器再启动时立即加载 <code>servlet</code></li><li>处理所有 <code>URL</code></li></ul><p><img src="img/javaee/10-1.png" alt="10-1"></p><p><strong>controller:</strong></p><p><img src="img/javaee/10-2.png" alt="10-2"></p><div class="table-container"><table><thead><tr><th>请求方法</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>多次执行同一 GET 请求，不会对系统造成影响，具有幂等性[指多个相同请求返回相同的结果]，充分使用客户端的缓存</td></tr><tr><td>POST</td><td>POST 方法，通常表示“创建一个新资源”，但它既不安全也不具有幂等性（多次操作会产生多个新资源）</td></tr></tbody></table></div><p><strong>参数类型绑定：</strong></p><ul><li><code>@RequestParam</code> 绑定请求参数</li><li><code>@RequestHeader</code> 绑定请求头参数</li><li><code>@CookieValue</code> 绑定 Cookie 的值</li><li><code>@PathVariable</code> 绑定 URL 中的变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/handle1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle1</span><span class="params">(@RequestParam(<span class="string">"userName"</span>)</span> String userName,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(<span class="string">"password"</span>)</span> String password,</span></span><br><span class="line"><span class="function">    @<span class="title">RequestParam</span><span class="params">(<span class="string">"realName"</span>)</span> String realName)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>命令/表单对象绑定：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/handle14"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handle14</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="img/javaee/10-3.png" alt="10-3"></p><p><strong>Servlet API 对象作为入参:</strong><br>如果处理方法自行使用 <code>HttpServletResponse</code> 返回响应，则处理方法的返回值设置成 <code>void</code> 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/handle21"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle21</span><span class="params">(HttpServletRequest request,HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    String userName = WebUtils.findParameterValue(request, <span class="string">"userName"</span>);</span><br><span class="line">    response.addCookie(<span class="keyword">new</span> Cookie(<span class="string">"userName"</span>, userName));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">HttpServletRequest request;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">HttpServletResponse response;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/handle21"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle21</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p><strong>视图解析：</strong></p><blockquote><p>jstl</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 视图解析器 --&gt;</span><br><span class="line">    &lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span><br><span class="line">          id=<span class="string">"viewResolver"</span></span><br><span class="line">          p:prefix=<span class="string">"/WEB-INF/jsp/"</span> p:suffix=<span class="string">".jsp"</span>&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br></pre></td></tr></table></figure><ol><li>发起请求到前端控制器<code>(DispatcherServlet)</code></li><li>前端控制器请求 <code>HandlerMapping</code> 查找 <code>Handler</code> 可以根据 <code>xml</code> 配置、注解进行查找</li><li>处理器映射器 <code>HandlerMapping</code> 向前端控制器返回 <code>Handler</code></li><li>前端控制器调用处理器适配器去执行 <code>Handler</code></li><li>处理器适配器去执行 <code>Handler</code></li><li><code>Handler</code> 执行完成给适配器返回 <code>ModelAndView</code></li><li>处理器适配器向前端控制器返回 <code>ModelAndView</code> <code>ModelAndView</code> 是 <code>springmvc</code> 框架的一个底层对象，包括 <code>Model</code> 和 <code>view</code></li><li>前端控制器请求视图解析器去进行视图解析，根据逻辑视图名解析成真正的视图(jsp)</li><li>视图解析器向前端控制器返回 <code>View</code></li><li>前端控制器进行视图渲染。视图渲染将模型数据(在 <code>ModelAndView</code> 对象中)填充到 <code>request</code> 域</li><li>前端控制器向用户响应结果</li></ol><p><strong>JSON:</strong></p><ul><li>输出 <code>json——@ResponseBody</code></li><li>输入 <code>json——@RequestBody</code></li></ul><p><img src="img/javaee/10-4.png" alt="10-4"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 让Spring MVC不处理静态资源</span></span><br><span class="line">&lt;mvc:<span class="keyword">default</span>-servlet-handler /&gt;</span><br><span class="line">&lt;mvc:annotation-driven /&gt;</span><br></pre></td></tr></table></figure><h3 id="Lecture-11"><a href="#Lecture-11" class="headerlink" title="Lecture 11"></a>Lecture 11</h3><h4 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h4><p><strong>分层：</strong></p><ul><li>Web 层<code>（controller）</code>：处理用户请求并予以响应，需要业务层 <code>bean</code> 提供业务支持</li><li>业务层：为 <code>Web</code> 层的 <code>controller</code> 方法提供业务方法支持，需要数据层 <code>bean</code> 提供数据支持</li><li>数据库：为业务层 <code>bean</code> 的方法提供数据支持，需要提供 <code>sessionFactory</code> 来管理和使用映射对象</li></ul><p><strong>整合基本思路：</strong></p><ul><li><code>SpringMVC</code> 与 <code>Spring</code> 天然整合</li><li><code>JPA/Hibernate</code> 整合到 <code>Spring</code><ol><li>关键是 <code>entityManagerFactory</code></li><li>将 <code>datasource</code> 和 <code>entityManagerFactory</code> 作为 <code>bean</code> 配置到 <code>Spring</code> 中</li><li>在 <code>Dao</code> 中注入 <code>entityManagerFactory</code></li><li>当 <code>Dao</code> 通过<code>@Repository</code> 加入 <code>Spring</code> 容器</li></ol></li></ul><p><strong>SSH 的 javaweb 项目中的容器：</strong></p><ul><li><code>Spring</code> 的容器：由 <code>listener</code> 启动，为父容器</li><li><code>SpringMVC</code> 容器：由 <code>dispatchservlet</code> 启动，为子容器</li><li><code>SpringMVC</code> 里在配置 <code>controller</code> 时，可以直接引用在 <code>spring</code> 中配置的 <code>service</code> 类；</li><li>在 <code>web.xml</code> 配置中，要先配置 <code>spring</code> 的配置，然后配置 <code>spring mvc</code> 的配置，否则 <code>spring mvc</code> 的子容器无法使用父容器中的资源</li><li>父容器中的 <code>bean</code> 不能引用子容器中的 <code>bean</code></li></ul><p><strong>整合启动配置：</strong></p><p><strong>整合步骤：</strong></p><ul><li>在 <code>web</code> 中启动 <code>Spring</code> 容器</li><li>配置监听器</li><li>将所有业务 <code>bean</code> 通过注解部署到容器中</li></ul><ol><li>包扫描</li></ol><ul><li><code>Controller</code> 用<code>@Controller</code> 注解<br>​- <code>Service</code> 用<code>@Service 和@Transactional</code> 注解</li><li><code>​Dao</code> 用<code>@Repository</code> 注解</li></ul><ol><li><code>Bean</code> 配置<code>（datasource、 entityManagerFactory ）</code></li></ol><blockquote><p>SSH 架构项目分析设计</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅拷贝(Shallow Copy)&amp;深拷贝(Deep Copy)</title>
      <link href="/copy.html"/>
      <url>/copy.html</url>
      
        <content type="html"><![CDATA[<h2 id="浅拷贝-shallow-copy-amp-深拷贝-deep-copy"><a href="#浅拷贝-shallow-copy-amp-深拷贝-deep-copy" class="headerlink" title="浅拷贝(shallow copy)&amp;深拷贝(deep copy)"></a>浅拷贝(shallow copy)&amp;深拷贝(deep copy)</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>为了更好理解浅拷贝和深拷贝需要先了解基本概念</p></blockquote><h4 id="JS-数据类型"><a href="#JS-数据类型" class="headerlink" title="JS 数据类型"></a>JS 数据类型</h4><ul><li>基本数据类型：值类型，变量名和值都储存在栈内存中。<code>number、string、boolean、undefined、null、symbol(ES6)</code>。</li><li>引用数据类型：地址类型，变量名储存在栈内存中，值储存在堆内存中，但是堆内存中会提供一个储存在栈内存引用地址指向堆内存中的值。<code>function、object、array</code>。</li></ul><h3 id="什么是浅拷贝和深拷贝"><a href="#什么是浅拷贝和深拷贝" class="headerlink" title="什么是浅拷贝和深拷贝"></a>什么是浅拷贝和深拷贝</h3><p>根据上面的基本概念，实现明确一点，深浅拷贝对于基本数据类型是没有意义的。因为，基本类型赋值时，赋的是数据。而引用类型赋值时，赋的值地址(就是引用类型变量在内存中保存的内容)。</p><h4 id="浅拷贝-shallow-copy"><a href="#浅拷贝-shallow-copy" class="headerlink" title="浅拷贝(shallow copy)"></a>浅拷贝(shallow copy)</h4><p>复制指向某个对象的指针，而不复制对象本身，新旧对象共享同一块内存。</p><h4 id="深拷贝-deep-copy"><a href="#深拷贝-deep-copy" class="headerlink" title="深拷贝(deep copy)"></a>深拷贝(deep copy)</h4><p>另外创造一个一模一样的对象，新对象跟原对象不共享内存，修改新对象不会同时修改原对象。</p><h3 id="具体说明"><a href="#具体说明" class="headerlink" title="具体说明"></a>具体说明</h3><p>为了更好地解释深浅拷贝，引入赋值这一概念。</p><h4 id="赋值-copy"><a href="#赋值-copy" class="headerlink" title="赋值(copy)"></a>赋值(copy)</h4><ul><li>基本数据类型：赋值，赋值之后两个变量互不影响。</li><li>引用数据类型：赋址，两个变量具有相同的引用，指向同一个对象，相互之间有影响。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"whiskey"</span>,</span><br><span class="line">  data: &#123; <span class="attr">num</span>: <span class="number">1</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line">b = a;</span><br><span class="line">b.name = <span class="string">"zcj"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// "zcj", a 中 name 属性也改变了</span></span><br></pre></td></tr></table></figure><p>通常我们在开发中并不希望改变变量 a 之后会影响到变量 b，这时就需要用到浅拷贝和深拷贝。</p><h4 id="浅拷贝-shallow-copy-1"><a href="#浅拷贝-shallow-copy-1" class="headerlink" title="浅拷贝 (shallow copy)"></a>浅拷贝 (shallow copy)</h4><ol><li><code>Object.assign(target,source)</code><br>ES6 中新增的对象方法，将所有可枚举属性的值从一个或多个源对象复制到目标对象,并返回目标对象。<code>Object.assign()</code>拷贝的是对象的属性的引用，而不是对象本身。当 object 只有一层的时候，是深拷贝。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"whiskey"</span>,</span><br><span class="line">  data: &#123; <span class="attr">num</span>: <span class="number">1</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">Object</span>.assign(&#123;&#125;, a);</span><br><span class="line">b.name = <span class="string">"zcj"</span>;</span><br><span class="line">b.data.num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// "whiskey"</span></span><br><span class="line"><span class="built_in">console</span>.log(a.data.num); <span class="comment">// 0, 两层后同样会变化</span></span><br></pre></td></tr></table></figure><ol><li><code>…扩展操作符(ES6)</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"whiskey"</span>,</span><br><span class="line">  data: &#123; <span class="attr">num</span>: <span class="number">1</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123; ...a &#125;;</span><br><span class="line">b.name = <span class="string">"zcj"</span>;</span><br><span class="line">b.data.num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name); <span class="comment">// "whiskey"</span></span><br><span class="line"><span class="built_in">console</span>.log(a.data.num); <span class="comment">// 0, 两层后同样会变化</span></span><br></pre></td></tr></table></figure><ol><li><code>Array.prototype.slice()</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">0</span>, <span class="string">"1"</span>, [<span class="number">2</span>, <span class="number">3</span>]];</span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">0</span>, <span class="number">3</span>); <span class="comment">// [0, "1", [2, 3]]</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="string">"1"</span>;</span><br><span class="line">b[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">2</span>][<span class="number">0</span>]); <span class="comment">// 3, 两层后同样会变化</span></span><br></pre></td></tr></table></figure><ol><li><code>Array.prototype.concat()</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">0</span>, <span class="string">"1"</span>, [<span class="number">2</span>, <span class="number">3</span>]];</span><br><span class="line"><span class="keyword">var</span> b = a.concat(); <span class="comment">// [0, "1", [2, 3]]</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">b[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">2</span>][<span class="number">0</span>]); <span class="comment">// 3, 两层后同样会变化</span></span><br></pre></td></tr></table></figure><h4 id="深拷贝-deep-copy-1"><a href="#深拷贝-deep-copy-1" class="headerlink" title="深拷贝 (deep copy)"></a>深拷贝 (deep copy)</h4><ol><li><code>JSON.parse(JSON.stringify())</code><br>JSON.stringify()将对象转成 JSON 字符串，JSON.parse()把字符串解析成对象，一去一来，新的对象产生了，并开辟了新的栈，实现深拷贝。需要注意的是，这个方法不能深拷贝函数，原因是 JSON.stringify()不能接受函数，同时会有如下问题：<ul><li>会忽略 undefined</li><li>会忽略 symbol(ES6 基本类型)</li><li>不能序列化函数</li><li>Infinity 值会被置为 null</li><li>循环引用(对象的对象引用了他们自身)会出错</li><li>Date, Set, Map 会转换为字符串，使得转换结果不一致</li><li>不能处理正则</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">0</span>, <span class="string">"1"</span>, [<span class="number">2</span>, <span class="number">3</span>]];</span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(a)); <span class="comment">// [0, "1", [2, 3]]</span></span><br><span class="line">b[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">b[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">0</span>]); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="number">2</span>][<span class="number">0</span>]); <span class="comment">// 2, 两层后不会发生变化</span></span><br></pre></td></tr></table></figure><p>2.  <code>递归赋值</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  name: <span class="string">"whiskey"</span>,</span><br><span class="line">  data: &#123; <span class="attr">num</span>: <span class="number">1</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[i] != <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> obj[i] == <span class="string">"object"</span>)</span><br><span class="line">      clone[i] = deepCopy(obj[i]);</span><br><span class="line">    <span class="keyword">else</span> clone[i] = obj[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line">b = deepCopy(a);</span><br><span class="line">b.data.num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.data.num); <span class="comment">//1，a 属性值没有改变</span></span><br></pre></td></tr></table></figure><p>3.  <code>深拷贝现成函数库</code><br>如 <code>lodash</code> 函数库的<code>\_.cloneDeep</code>这里不具体展开讲。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">和原数据指向同一对象</th><th style="text-align:center">第一层数据为基本数据类型</th><th style="text-align:center">原数据中包含子对象</th></tr></thead><tbody><tr><td style="text-align:center">赋值</td><td style="text-align:center">是</td><td style="text-align:center">改变会使原数据一同改变</td><td style="text-align:center">改变会使原数据一同改变</td></tr><tr><td style="text-align:center">浅拷贝</td><td style="text-align:center">否</td><td style="text-align:center">改变不会使原数据一同改变</td><td style="text-align:center">改变会使原数据一同改变</td></tr><tr><td style="text-align:center">深拷贝</td><td style="text-align:center">否</td><td style="text-align:center">改变不会使原数据一同改变</td><td style="text-align:center">改变不会使原数据一同改变</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖(debounce)&amp;节流(throttle)</title>
      <link href="/debounce.html"/>
      <url>/debounce.html</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="防抖-debounce-amp-节流-throttle"><a href="#防抖-debounce-amp-节流-throttle" class="headerlink" title="防抖(debounce)&amp;节流(throttle)"></a>防抖(debounce)&amp;节流(throttle)</h2><h3 id="什么是防抖和节流？"><a href="#什么是防抖和节流？" class="headerlink" title="什么是防抖和节流？"></a>什么是防抖和节流？</h3><h4 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h4><p>&emsp;&emsp;当调用动作 n 毫秒后，才会执行该动作，若在这 n 毫秒内又调用此动作则将重新计算执行时间。<br>&emsp;&emsp;理解：持续触发不执行，不触发的一段时间之后才执行。</p><h4 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流(throttle)"></a>节流(throttle)</h4><p>&emsp;&emsp;预先设定一个执行周期，当调用动作的时刻大于等于执行周期则执行该动作，然后进入下一个新周期。<br>&emsp;&emsp;理解：隔一定执行周期（时间）触发一次事件。</p><h3 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h3><h4 id="debounce"><a href="#debounce" class="headerlink" title="debounce"></a>debounce</h4><p>1.<code>scroll</code>事件（资源的加载） 2.<code>mousemove</code>事件（拖拽） 3.<code>resize</code>事件（响应式布局样式） 4.<code>keyup</code>事件（输入框文字停止打字后才进行校验）</p><h4 id="throttle"><a href="#throttle" class="headerlink" title="throttle"></a>throttle</h4><p>1.<code>click</code>事件（不停快速点击按钮，减少触发频次） 2.<code>scroll</code>事件（返回顶部按钮出现\隐藏事件触发） 3.<code>keyup</code>事件（输入框文字与显示栏内容复制同步） 4.减少发送<code>ajax</code>请求，降低请求频率</p><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>&emsp;&emsp;下面来看一个案例，我们为实现输入框文字和显示栏内容同步，给 id 为 num 的 <code>input</code> 对象添加监听事件，当输入框输入内容时触发监听实现，并将结果显示在 id 为 show 的 <code>input</code> 对象中。<br>&emsp;&emsp;在输入框输入文字时，大量执行了操作 <code>DOM</code> 的函数（操作 DOM 是很耗费性能的），如图所示:<br><img src="img/debounce/case.gif" alt="case"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../public/css/bootstrap.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.label</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">        margin-right: 20px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.inline-block</span> &#123;</span></span><br><span class="line">        display: inline-block;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        margin-top: 50px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.section</span> &#123;</span></span><br><span class="line">        margin-bottom: 100px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">        margin-bottom: 50px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.boxes</span> &#123;</span></span><br><span class="line">        font-size: 22px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title text-center"</span>&gt;</span>Case<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boxes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>Num<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"num"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>Show<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">"show"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">disabled</span>=<span class="string">"disabled"</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> numElmt = <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(numElmt.value);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).value = numElmt.value;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      numElmt.addEventListener(<span class="string">"input"</span>, myFunction, <span class="literal">false</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="防抖代码实现"><a href="#防抖代码实现" class="headerlink" title="防抖代码实现"></a>防抖代码实现</h3><p>&emsp;&emsp;我们对上述代码进行防抖处理，防抖本质上是需要 <code>Window</code> 对象的 <code>setTimeout()</code>来辅助实现，延迟运行需要执行的代码，如又调用此动作则将重新计算延迟(clearTimeout)，等延迟时间(delay)完毕时执行目标代码。<br><img src="img/debounce/debounce.gif" alt="case2"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../public/css/bootstrap.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>debounce<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.label</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">        margin-right: 20px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.inline-block</span> &#123;</span></span><br><span class="line">        display: inline-block;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        margin-top: 50px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.section</span> &#123;</span></span><br><span class="line">        margin-bottom: 100px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">        margin-bottom: 50px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.boxes</span> &#123;</span></span><br><span class="line">        font-size: 22px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title text-center"</span>&gt;</span>Case<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boxes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>Num<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"num"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>Show<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">"show"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">disabled</span>=<span class="string">"disabled"</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">debounce</span><span class="params">(fn, delay)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> timer = <span class="literal">null</span>; <span class="comment">//闭包</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">          if (timer) &#123;</span><br><span class="line">            clearTimeout(timer);</span><br><span class="line">          &#125;</span><br><span class="line">          timer = setTimeout(fn, delay);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> numElmt = <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(numElmt.value);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).value = numElmt.value;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      numElmt.addEventListener(<span class="string">"input"</span>, debounce(myFunction, <span class="number">1000</span>), <span class="literal">false</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节流代码实现"><a href="#节流代码实现" class="headerlink" title="节流代码实现"></a>节流代码实现</h3><p>&emsp;&emsp;在函数执行一次之后，让函数在指定的时间期限内不再工作，直至过了限定期限再重新执行。节流的实现方式有很多种，在此利用 setTimeout 和状态位 valid（表示当前函数是否处于工作状态）做一个简单的实现。<br><img src="img/debounce/throttle.gif" alt="throttle"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../public/css/bootstrap.min.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>throttle<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.label</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">        margin-right: 20px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.inline-block</span> &#123;</span></span><br><span class="line">        display: inline-block;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">        margin-top: 50px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">      <span class="selector-class">.section</span> &#123;</span></span><br><span class="line">        margin-bottom: 100px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.title</span> &#123;</span></span><br><span class="line">        margin-bottom: 50px;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="css">      <span class="selector-class">.boxes</span> &#123;</span></span><br><span class="line">        font-size: 22px;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title text-center"</span>&gt;</span>throttle<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"boxes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>Num<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"num"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>Show<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">id</span>=<span class="string">"show"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">disabled</span>=<span class="string">"disabled"</span></span></span><br><span class="line"><span class="tag">          /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">throttle</span><span class="params">(fn, delay)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> valid = <span class="literal">false</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">          setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line">            fn();</span><br><span class="line"><span class="actionscript">            valid = <span class="literal">true</span>;</span></span><br><span class="line">          &#125;, delay);</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> numElmt = <span class="built_in">document</span>.getElementById(<span class="string">"num"</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="function"><span class="keyword">function</span> <span class="title">myFunction</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(numElmt.value);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"show"</span>).value = numElmt.value;</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      numElmt.addEventListener(<span class="string">"input"</span>, throttle(myFunction, <span class="number">1000</span>), <span class="literal">false</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>&emsp;&emsp;根据实际业务场景，通过对高频事件合理的利用和选择<code>防抖(debounce)和节流(throttle)</code>可以在一定程度上优化性能和提高用户体验。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
